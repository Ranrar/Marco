RootNode {
    type: "root",
    children: [
        Heading {
            type: "heading",
            depth: 1,
            children: [ TextNode { type: "text", value: "Heading 1" } ]
        },
        Heading {
            type: "heading",
            depth: 2,
            children: [ TextNode { type: "text", value: "Heading 2" } ]
        },
        Heading {
            type: "heading",
            depth: 3,
            children: [ TextNode { type: "text", value: "Heading 3" } ]
        },
        Heading {
            type: "heading",
            depth: 5,
            children: [ TextNode { type: "text", value: "Heading 5" } ]
        },
        Heading {
            type: "heading",
            depth: 6,
            children: [ TextNode { type: "text", value: "Heading 6" } ]
        },
        Heading {
            type: "heading",
            depth: 1,
            children: [ TextNode { type: "text", value: "Setext Title" } ]
        },
        Paragraph {
            type: "paragraph",
            children: [
                TextNode { type: "text", value: "This is a sample paragraph with " },
                Strong { type: "strong", children: [ TextNode { type: "text", value: "bold" } ] },
                TextNode { type: "text", value: " and " },
                Emphasis { type: "emphasis", children: [ TextNode { type: "text", value: "italic" } ] },
                TextNode { type: "text", value: " text." }
            ]
        },
        InlineCode { type: "inlineCode", value: "let x = 5;" },
        Strikethrough { type: "delete", children: [ TextNode { type: "text", value: "struck" } ] },
        HardBreak { type: "hardbreak" },
        SoftBreak { type: "softbreak" },
        BlockQuote {
            type: "blockquote",
            children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "A blockquote." } ] } ]
        },
        CodeBlock { type: "codeBlock", language: Some("rust"), value: "fn main() {\n    println!(\"Hello World\");\n}" },
        HorizontalRule { type: "thematicBreak" },
        List {
            type: "list",
            ordered: false,
            children: [
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "First item" } ] } ] },
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Second item" } ] } ] }
            ]
        },
        List {
            type: "list",
            ordered: false,
            children: [
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Task incomplete" } ] } ], checked: Some(false) },
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Task done" } ] } ], checked: Some(true) }
            ]
        },
        Table {
            type: "table",
            children: [
                TableRow { type: "tableRow", children: [ TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "A" } ] }, TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "B" } ] } ] },
                TableRow { type: "tableRow", children: [ TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "1" } ] }, TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "2" } ] } ] }
            ]
        },
        Footnote { type: "footnote", children: [ TextNode { type: "text", value: "See note" } ] },
        Link { type: "link", url: "https://example.com", title: "Example", children: [ TextNode { type: "text", value: "Example Link" } ] },
        Image { type: "image", url: "https://example.com/image.png", title: "Example Image", alt: "Alt text" },
        Autolink { type: "link", url: "https://example.com", children: [ TextNode { type: "text", value: "https://example.com" } ] },
        Definition { type: "definition", identifier: "ref-id", url: "https://example.com", title: Some("Optional title") },
        LinkReference { type: "linkReference", identifier: "ref-id", children: [ TextNode { type: "text", value: "Reference Link" } ] },
        LinkShortcut { type: "link_shortcut", children: [ TextNode { type: "text", value: "Shortcut Link" } ] },
        LinkDefinition { type: "link_def", identifier: "ref-id", url: "https://example.com", title: Some("Optional title") },
        DefinitionList {
            type: "definitionList",
            children: [
                DefinitionTerm { type: "term", children: [ TextNode { type: "text", value: "Term" } ] },
                DefinitionDescription { type: "description", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Definition text." } ] } ] }
            ]
        },
        FrontMatter { type: "frontmatter", value: "---\ntitle: Example\n---" },
        FrontMatterStart { type: "frontmatter_start", value: "---" },
        FrontMatterEnd { type: "frontmatter_end", value: "---" },
        HTMLIns { type: "htmlInline", value: "<ins>underlined</ins>" },
        HTMLNbsp { type: "htmlInline", value: "&nbsp;&nbsp;&nbsp;&nbsp;Indented" },
        HTMLCenter { type: "htmlBlock", value: "<center>Centered text</center>" },
        HTMLFont { type: "htmlInline", value: "<font color=\"red\">Red text</font>" },
        CommentHack { type: "comment", value: "[This is a comment]: #" },
        SymbolEntity { type: "symbol", value: "&copy;" },
        TOCPlaceholder { type: "toc", children: [ Heading { type: "heading", depth: 4, children: [ TextNode { type: "text", value: "Table of Contents" } ] } ] },
        FigureCaption { type: "figure", children: [ Image { type: "image", url: "/assets/images/albuquerque.jpg", title: "Albuquerque", alt: "Albuquerque" }, TextNode { type: "text", value: "A single track trail outside of Albuquerque, New Mexico." } ] },
        VideoEmbed { type: "video", value: "[![Image alt text](https://img.youtube.com/vi/YOUTUBE-ID/0.jpg)](https://www.youtube.com/watch?v=YOUTUBE-ID)" },
        InlineMath { type: "mathInline", value: "x^2 + y^2" },
        BlockMath { type: "mathBlock", value: "\\int_0^1 x dx" },
        Emoji { type: "emoji", value: ":smile:" },
        Mention { type: "mention", value: "@username" },
        Admonition { type: "admonition", value: "Warning: Something important." }
    ]
}
