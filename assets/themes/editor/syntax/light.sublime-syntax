%YAML 1.2
---
# Marco Light Syntax Theme for Code Blocks
# Based on Marco Light XML theme with colors adapted for Syntect
name: Marco Light
version: 1
hidden: false

variables:
  # Core colors from light.xml
  light_bg: '#FAFAFA'
  light_text: '#24292E'
  light_comment: '#6E7781'
  light_keyword: '#CF222E'
  light_string: '#0A3069'
  light_number: '#0550AE'
  light_function: '#8250DF'
  light_type: '#0550AE'
  light_variable: '#24292E'
  light_constant: '#0550AE'
  light_operator: '#24292E'
  light_preprocessor: '#8250DF'
  light_special: '#CF222E'
  light_attribute: '#0550AE'

contexts:
  main:
    # Comments
    - match: '//.*$'
      scope: comment.line.double-slash
      captures:
        0: comment.line.double-slash
    - match: '/\*'
      scope: comment.block.begin
      push: block_comment
    - match: '#.*$'
      scope: comment.line.hash
      captures:
        0: comment.line.hash

    # Strings
    - match: '"'
      scope: punctuation.definition.string.begin
      push: double_quoted_string
    - match: "'"
      scope: punctuation.definition.string.begin  
      push: single_quoted_string
    - match: '`'
      scope: punctuation.definition.string.begin
      push: backtick_string

    # Numbers
    - match: '\b\d+\.?\d*([eE][+-]?\d+)?\b'
      scope: constant.numeric
    - match: '\b0[xX][0-9a-fA-F]+\b'
      scope: constant.numeric.hex
    - match: '\b0[bB][01]+\b'
      scope: constant.numeric.binary
    - match: '\b0[oO][0-7]+\b'
      scope: constant.numeric.octal

    # Keywords (common across languages)
    - match: '\b(if|else|elif|while|for|do|switch|case|default|break|continue|return|function|def|class|struct|enum|interface|import|export|from|as|try|catch|finally|throw|async|await|yield|let|const|var|public|private|protected|static|final|abstract|override|virtual|new|delete|this|self|super|null|undefined|true|false|None|True|False)\b'
      scope: keyword.control

    # Types (common type keywords)
    - match: '\b(int|float|double|bool|boolean|char|string|str|void|auto|typeof|instanceof|Array|Object|Function|Promise|Map|Set|WeakMap|WeakSet)\b'
      scope: storage.type

    # Function definitions
    - match: '\b([a-zA-Z_][a-zA-Z0-9_]*)\s*\('
      captures:
        1: entity.name.function

    # Variable names (simple heuristic)
    - match: '\b[a-zA-Z_][a-zA-Z0-9_]*\b'
      scope: variable.other

    # Operators
    - match: '[+\-*/%=<>!&|^~]+'
      scope: keyword.operator

    # Punctuation
    - match: '[{}()\[\];,.]'
      scope: punctuation

  block_comment:
    - meta_scope: comment.block
    - match: '\*/'
      scope: comment.block.end
      pop: true
    - match: '.'
      scope: comment.block

  double_quoted_string:
    - meta_scope: string.quoted.double
    - match: '\\.'
      scope: constant.character.escape
    - match: '"'
      scope: punctuation.definition.string.end
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single
    - match: '\\.'
      scope: constant.character.escape
    - match: "'"
      scope: punctuation.definition.string.end
      pop: true

  backtick_string:
    - meta_scope: string.quoted.template
    - match: '\\.'
      scope: constant.character.escape
    - match: '\$\{[^}]*\}'
      scope: variable.other.interpolation
    - match: '`'
      scope: punctuation.definition.string.end
      pop: true