/// The html_viewer.rs is a UI component that displays the HTML output generated by the backend renderer
/// It does not perform the actual Markdown-to-HTML conversion itself; instead,
/// it takes the already-rendered HTML and presents it in the UI.
use gtk4::prelude::*;
use webkit6::prelude::*;
use webkit6::WebView;
/// TODO change open link polici to onnly allow open target when klicking
/// Create a WebView widget and load the provided HTML string.
pub fn create_html_viewer(html: &str) -> WebView {
    let webview = WebView::new();
    // Defer loading HTML until the main loop is idle to ensure the widget
    // has been allocated and avoid 'trying to snapshot GtkGizmo without a current allocation' warnings.
    let html_string = html.to_string();
    let webview_clone = webview.clone();
    glib::idle_add_local(move || {
        webview_clone.load_html(&html_string, None);
        // Stop the idle source after one run
        glib::ControlFlow::Break
    });
    webview.set_vexpand(true);
    webview.set_hexpand(true);
    webview
}

/// Update the content in an existing WebView using JavaScript injection.
/// This avoids full page reloads and provides smooth updates while preserving scroll position.
pub fn update_html_content_smooth(webview: &WebView, content: &str) {
    let escaped_content = content
        .replace('\\', "\\\\")
        .replace('\'', "\\'")
        .replace('\n', "\\n")
        .replace('\r', "\\r");

    let js_code = format!("updateContent('{}');", escaped_content);
    let webview_clone = webview.clone();
    let js_code_clone = js_code.clone();

    glib::idle_add_local(move || {
        webview_clone.evaluate_javascript(
            &js_code_clone,
            None,                      // world_name
            None,                      // source_uri
            None::<&gio::Cancellable>, // cancellable
            |result| match result {
                Ok(_) => log::debug!("[webkit6] Content updated successfully"),
                Err(e) => log::warn!("[webkit6] Failed to update content: {}", e),
            },
        );
        glib::ControlFlow::Break
    });
}

/// Wraps the HTML body with a full HTML document, injecting the provided CSS string into the <head>.
pub fn wrap_html_document(body: &str, css: &str, theme_mode: &str) -> String {
    // Include a named <style> element and small JS helpers so the host can
    // update CSS and theme class without reloading the whole document.
    let doc = format!(
        r#"<!DOCTYPE html>
<html class="{}">
    <head>
        <meta charset=\"utf-8\">
        <style id=\"marco-preview-style\">body {{ font-family: sans-serif; }}
{}</style>
        <script>
            function setPreviewCSS(css) {{
                try {{
                    var el = document.getElementById('marco-preview-style');
                    if (el) el.innerHTML = css;
                }} catch(e){{}}
            }}
            function setPreviewTheme(mode) {{
                try {{
                    document.documentElement.className = mode;
                }} catch(e){{}}
            }}
            function updateContent(htmlContent) {{
                try {{
                    // Save current scroll position
                    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
                    
                    // Update content container
                    var container = document.getElementById('marco-content-container');
                    if (container) {{
                        container.innerHTML = htmlContent;
                        
                        // Restore scroll position after a brief delay to allow content to render
                        setTimeout(function() {{
                            document.documentElement.scrollTop = scrollTop;
                            document.body.scrollTop = scrollTop;
                        }}, 10);
                    }}
                }} catch(e) {{
                    console.error('Error updating content:', e);
                }}
            }}
            function setContent(htmlContent) {{
                // Alternative function for setting content without scroll preservation
                try {{
                    var container = document.getElementById('marco-content-container');
                    if (container) {{
                        container.innerHTML = htmlContent;
                    }}
                }} catch(e) {{
                    console.error('Error setting content:', e);
                }}
            }}
        </script>
    </head>
    <body>
        <div id="marco-content-container">{}</div>
    </body>
</html>"#,
        theme_mode, css, body
    );
    doc
}

// Note: in-page JS helpers are embedded in the HTML template produced by
// `wrap_html_document`. To avoid binding issues across webkit6 versions we
// intentionally don't call JS from Rust here. If/when needed, add a small
// compatibility wrapper that uses the correct webkit6 API available in the
// project's environment.

/// Create a scrollable, read-only viewer that displays the raw HTML source.
/// For show source code.
/// Create a scrollable, read-only viewer that displays the raw HTML source.
/// If `editor_bg`/`editor_fg` are provided, apply those colors to the TextView so
/// the source view matches the editor theme. If `add_editor_scrolled_class` is
/// true, the ScrolledWindow will be given the `editor-scrolled` CSS class so
/// any global scrollbar styling injected by the application applies to it.
pub fn create_html_source_viewer(
    html: &str,
    editor_bg: Option<&str>,
    editor_fg: Option<&str>,
    add_editor_scrolled_class: bool,
) -> gtk4::ScrolledWindow {
    use gtk4::{PolicyType, ScrolledWindow, TextBuffer, TextView};

    let sw = ScrolledWindow::new();
    sw.set_policy(PolicyType::Automatic, PolicyType::Automatic);
    sw.set_min_content_width(200);
    sw.set_min_content_height(200);

    let tv = TextView::new();
    tv.set_editable(false);
    tv.set_cursor_visible(false);
    tv.set_wrap_mode(gtk4::WrapMode::None);

    // Use a monospace style class for better readability (CSS must define .monospace)
    let ctx = tv.style_context();
    ctx.add_class("monospace");

    // If editor colors are provided, add a wrapper class and load a small
    // CSS provider to set the TextView foreground/background so the source
    // viewer visually matches the editor theme.
    if editor_bg.is_some() || editor_fg.is_some() {
        // Add a class to the scrolled window so the CSS can target the child
        sw.add_css_class("source-preview");
        if let Some(display) = gtk4::gdk::Display::default() {
            let mut css_rules = String::new();
            let bg = editor_bg.unwrap_or("transparent");
            let fg = editor_fg.unwrap_or("#000000");
            // Target the monospace class we set on the TextView
            css_rules.push_str(&format!(
                ".source-preview .monospace {{ background-color: {}; color: {}; }}",
                bg, fg
            ));
            let provider = gtk4::CssProvider::new();
            provider.load_from_data(&css_rules);
            // Register CSS provider for the display so our small rules apply.
            gtk4::style_context_add_provider_for_display(
                &display,
                &provider,
                gtk4::STYLE_PROVIDER_PRIORITY_APPLICATION,
            );
        }
    }

    let buffer = TextBuffer::new(None::<&gtk4::TextTagTable>);
    buffer.set_text(html);
    tv.set_buffer(Some(&buffer));
    sw.set_child(Some(&tv));

    // If requested, add the editor-scrolled CSS class so the app's scrollbar
    // CSS (which uses the .editor-scrolled selector) applies to this scrolled window.
    if add_editor_scrolled_class {
        sw.add_css_class("editor-scrolled");
    }
    sw
}
