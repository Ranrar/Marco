/// The html_viewer.rs is a UI component that displays the HTML output generated by the backend renderer
/// It does not perform the actual Markdown-to-HTML conversion itself; instead,
/// it takes the already-rendered HTML and presents it in the UI.
use gtk4::prelude::*;
use std::path::Path;
use webkit6::prelude::*;
use webkit6::WebView;
/// TODO change open link polici to onnly allow open target when klicking

/// Generate a file:// base URI from a document path for resolving relative file references.
/// If the document has a parent directory, returns a file:// URI for that directory.
/// This allows relative image paths and other file references in the document to work correctly.
pub fn generate_base_uri_from_path<P: AsRef<Path>>(document_path: P) -> Option<String> {
    if let Some(parent_dir) = document_path.as_ref().parent() {
        // Convert parent directory to absolute path and create file:// URI
        if let Ok(absolute_parent) = parent_dir.canonicalize() {
            let path_str = absolute_parent.to_string_lossy();
            Some(format!("file://{}/", path_str))
        } else {
            // Fallback: use the path as-is if canonicalize fails
            let path_str = parent_dir.to_string_lossy();
            Some(format!("file://{}/", path_str))
        }
    } else {
        None
    }
}
/// Setup UserContentManager for proper script and stylesheet management
/// This prevents memory leaks from accumulated JavaScript and CSS
fn setup_user_content_manager(webview: &WebView) {
    // Store a reference to track if cleanup is needed
    // For now, we'll implement the cleanup pattern in the HTML template
    // and use proper JavaScript management through the template system
    log::debug!("[webkit6] Setting up UserContentManager for WebView: {:p}", webview);
}

/// Create a WebView widget and load the provided HTML string.
/// If base_uri is provided, it will be used as the base for resolving relative paths.
pub fn create_html_viewer(html: &str) -> WebView {
    create_html_viewer_with_base(html, None)
}

/// Create a WebView widget with an optional base URI for resolving relative paths.
/// This version allows specifying a base URI to resolve local file references.
pub fn create_html_viewer_with_base(html: &str, base_uri: Option<&str>) -> WebView {
    let webview = WebView::new();

    // Configure WebKit security settings to allow local file access
    if let Some(settings) = webkit6::prelude::WebViewExt::settings(&webview) {
        settings.set_allow_file_access_from_file_urls(true);
        settings.set_allow_universal_access_from_file_urls(true);
        settings.set_auto_load_images(true);
    }

    // Initialize UserContentManager for proper script and stylesheet management
    setup_user_content_manager(&webview);

    // Set up cleanup on destruction to prevent memory leaks
    webview.connect_destroy({
        let webview_cleanup = webview.clone();
        move |_| {
            // Cleanup JavaScript state before destruction
            webview_cleanup.evaluate_javascript(
                "(function() { 
                    if (window.MarcoPreview) { 
                        MarcoPreview.cleanup(); 
                        delete window.MarcoPreview; 
                    } 
                })()",
                None,                      // world_name
                None,                      // source_uri
                None::<&gio::Cancellable>, // cancellable
                |_| {
                    // Cleanup completed, WebView can be safely destroyed
                },
            );
        }
    });

    // Defer loading HTML until the main loop is idle to ensure the widget
    // has been allocated and avoid 'trying to snapshot GtkGizmo without a current allocation' warnings.
    let html_string = html.to_string();
    let base_uri_string = base_uri.map(|s| s.to_string());
    let webview_clone = webview.clone();
    glib::idle_add_local(move || {
        webview_clone.load_html(&html_string, base_uri_string.as_deref());
        // Stop the idle source after one run
        glib::ControlFlow::Break
    });
    webview.set_vexpand(true);
    webview.set_hexpand(true);
    webview
}

/// Update the content in an existing WebView using JavaScript injection.
/// This avoids full page reloads and provides smooth updates while preserving scroll position.
/// Enhanced to prevent memory leaks by using a more efficient approach.
pub fn update_html_content_smooth(webview: &WebView, content: &str) {
    let escaped_content = content
        .replace('\\', "\\\\")
        .replace('\'', "\\'")
        .replace('\n', "\\n")
        .replace('\r', "\\r");

    // Use a more efficient JavaScript approach that avoids creating multiple functions
    // and cleans up properly to prevent memory leaks
    let js_code = format!(
        r#"
        (function() {{
            try {{
                // Cleanup any previous temporary variables
                if (window._marcoTempUpdate) {{
                    delete window._marcoTempUpdate;
                }}
                
                // Check if our standard update function exists
                if (typeof updateContent === 'function') {{
                    updateContent('{}');
                    return;
                }}
                
                // Fallback: direct DOM update without creating persistent variables
                var container = document.getElementById('marco-content-container');
                if (container) {{
                    // Save scroll position
                    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
                    
                    // Update content
                    container.innerHTML = '{}';
                    
                    // Restore scroll position
                    setTimeout(function() {{
                        document.documentElement.scrollTop = scrollTop;
                        document.body.scrollTop = scrollTop;
                    }}, 10);
                }} else {{
                    // Last resort: create container
                    var body = document.body || document.getElementsByTagName('body')[0];
                    if (body) {{
                        body.innerHTML = '<div id="marco-content-container">{}</div>';
                    }}
                }}
            }} catch(e) {{
                console.error('Error in content update:', e);
            }}
        }})();
        "#,
        escaped_content, escaped_content, escaped_content
    );

    let webview_clone = webview.clone();

    glib::idle_add_local(move || {
        webview_clone.evaluate_javascript(
            &js_code,
            None,                      // world_name
            None,                      // source_uri
            None::<&gio::Cancellable>, // cancellable
            |result| match result {
                Ok(_) => log::debug!("[webkit6] Content update JavaScript executed successfully"),
                Err(e) => log::warn!(
                    "[webkit6] Failed to execute content update JavaScript: {}",
                    e
                ),
            },
        );
        glib::ControlFlow::Break
    });
}

/// Wraps the HTML body with a full HTML document, injecting the provided CSS string into the <head>.
/// Enhanced with proper cleanup mechanisms to prevent memory leaks.
pub fn wrap_html_document(body: &str, css: &str, theme_mode: &str) -> String {
    // Include a named <style> element and small JS helpers so the host can
    // update CSS and theme class without reloading the whole document.
    // Enhanced with cleanup mechanisms to prevent memory accumulation.
    let doc = format!(
        r#"<!DOCTYPE html>
<html class="{}">
    <head>
        <meta charset=\"utf-8\">
        <style id=\"marco-preview-style\">body {{ font-family: sans-serif; }}
{}</style>
        <script>
            // Marco Preview Management Object - prevents global namespace pollution
            window.MarcoPreview = (function() {{
                var scrollTimeouts = [];
                
                // Cleanup function to clear any pending timeouts
                function cleanup() {{
                    scrollTimeouts.forEach(function(id) {{
                        clearTimeout(id);
                    }});
                    scrollTimeouts = [];
                }}
                
                return {{
                    setCSS: function(css) {{
                        try {{
                            var el = document.getElementById('marco-preview-style');
                            if (el) {{
                                el.innerHTML = css;
                            }}
                        }} catch(e) {{
                            console.error('Error setting CSS:', e);
                        }}
                    }},
                    
                    setTheme: function(mode) {{
                        try {{
                            document.documentElement.className = mode;
                        }} catch(e) {{
                            console.error('Error setting theme:', e);
                        }}
                    }},
                    
                    updateContent: function(htmlContent) {{
                        try {{
                            // Clean up any pending scroll restoration
                            cleanup();
                            
                            // Save current scroll position
                            var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
                            
                            // Update content container
                            var container = document.getElementById('marco-content-container');
                            if (container) {{
                                container.innerHTML = htmlContent;
                                
                                // Restore scroll position after a brief delay
                                var timeoutId = setTimeout(function() {{
                                    document.documentElement.scrollTop = scrollTop;
                                    document.body.scrollTop = scrollTop;
                                    // Remove this timeout from tracking
                                    var index = scrollTimeouts.indexOf(timeoutId);
                                    if (index > -1) {{
                                        scrollTimeouts.splice(index, 1);
                                    }}
                                }}, 10);
                                scrollTimeouts.push(timeoutId);
                            }}
                        }} catch(e) {{
                            console.error('Error updating content:', e);
                        }}
                    }},
                    
                    setContent: function(htmlContent) {{
                        try {{
                            var container = document.getElementById('marco-content-container');
                            if (container) {{
                                container.innerHTML = htmlContent;
                            }}
                        }} catch(e) {{
                            console.error('Error setting content:', e);
                        }}
                    }},
                    
                    cleanup: cleanup
                }};
            }})();
            
            // Legacy function aliases for backwards compatibility
            function setPreviewCSS(css) {{ MarcoPreview.setCSS(css); }}
            function setPreviewTheme(mode) {{ MarcoPreview.setTheme(mode); }}
            function updateContent(htmlContent) {{ MarcoPreview.updateContent(htmlContent); }}
            function setContent(htmlContent) {{ MarcoPreview.setContent(htmlContent); }}
            
            // Cleanup on page unload
            window.addEventListener('beforeunload', function() {{
                if (window.MarcoPreview) {{
                    MarcoPreview.cleanup();
                }}
            }});
        </script>
    </head>
    <body>
        <div id="marco-content-container">{}</div>
    </body>
</html>"#,
        theme_mode, css, body
    );
    doc
}

// Note: in-page JS helpers are embedded in the HTML template produced by
// `wrap_html_document`. To avoid binding issues across webkit6 versions we
// intentionally don't call JS from Rust here. If/when needed, add a small
// compatibility wrapper that uses the correct webkit6 API available in the
// project's environment.

/// Create a WebView-based HTML source viewer with syntax highlighting.
///
/// This viewer displays HTML source code (from Marco's markdown rendering)
/// with professional syntax highlighting powered by syntect.
///
/// # Arguments
/// * `html_source` - The HTML code to display (already generated by Marco)
/// * `theme_mode` - "light" or "dark" theme mode for syntax highlighting
/// * `base_uri` - Optional base URI for resolving relative paths
///
/// # Returns
/// * `Ok(WebView)` - Configured WebView with highlighted HTML
/// * `Err(String)` - Error message if highlighting fails
///
/// # Example
/// ```ignore
/// let webview = create_html_source_viewer_webview(
///     "<h1>Hello</h1>",
///     "dark",
///     None,
/// )?;
/// ```
pub fn create_html_source_viewer_webview(
    html_source: &str,
    theme_mode: &str,
    base_uri: Option<&str>,
    editor_bg: Option<&str>,
    editor_fg: Option<&str>,
    scrollbar_thumb: Option<&str>,
    scrollbar_track: Option<&str>,
) -> Result<WebView, String> {
    use crate::components::viewer::syntax_highlighter::{global_syntax_highlighter, generate_css_with_global};
    
    // Normalize theme mode to "light" or "dark"
    let normalized_theme = if theme_mode.contains("dark") {
        "dark"
    } else {
        "light"
    };
    
    log::debug!("[webkit6] Creating WebView-based code viewer with theme: {} (normalized: {})", 
        theme_mode, normalized_theme);
    log::debug!("[webkit6] HTML source length: {} bytes", html_source.len());
    
    // If HTML source is empty, use a placeholder
    let display_html = if html_source.is_empty() {
        log::debug!("[webkit6] HTML source is empty, using placeholder");
        "<!-- No content yet -->"
    } else {
        html_source
    };
    
    // Initialize global syntax highlighter
    global_syntax_highlighter()
        .map_err(|e| format!("Failed to initialize syntax highlighter: {}", e))?;
    
    // Get syntect CSS for current theme
    let syntect_css = generate_css_with_global(normalized_theme)
        .map_err(|e| format!("Failed to generate CSS: {}", e))?;
    
    // Highlight HTML source using syntect
    let highlighted_html = SYNTAX_HIGHLIGHTER.with(|highlighter| {
        let h = highlighter.borrow();
        let syntax_highlighter = h.as_ref()
            .ok_or_else(|| "Syntax highlighter not initialized".to_string())?;
            
        syntax_highlighter.highlight_to_html(display_html, "html", normalized_theme)
            .map_err(|e| format!("Highlighting failed: {}", e))
    })?;
    
    // Determine theme colors - use editor colors if provided, otherwise use defaults
    let (bg_color, fg_color) = if let (Some(bg), Some(fg)) = (editor_bg, editor_fg) {
        (bg, fg)
    } else if normalized_theme == "dark" {
        ("#2b303b", "#c0c5ce")
    } else {
        ("#fdf6e3", "#657b83") // Solarized Light colors
    };
    
    // Generate webkit scrollbar CSS to match editor
    let scrollbar_css = if let (Some(thumb), Some(track)) = (scrollbar_thumb, scrollbar_track) {
        crate::components::viewer::webview_utils::webkit_scrollbar_css(thumb, track)
    } else {
        String::new()
    };
    
    // Build complete HTML page with syntect CSS and scrollbar styling
    let complete_page = format!(
        r#"<!DOCTYPE html>
<html style="height: 100%; margin: 0; padding: 0; overflow: hidden;">
  <head>
    <meta charset="UTF-8">
    <style>
      html, body {{
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }}
      body {{
        background: {};
        color: {};
        font-family: 'Fira Code', 'Monaco', 'Courier New', monospace;
        font-size: 12px;
        line-height: 1.5;
        display: flex;
        flex-direction: column;
      }}
      #code-container {{
        flex: 1;
        overflow: auto;
        padding: 16px;
        box-sizing: border-box;
      }}
      pre {{
        margin: 0;
        white-space: pre;
        word-wrap: normal;
      }}
      code {{
        font-family: inherit;
        white-space: pre;
      }}
      /* Syntect CSS */
      {}
      /* Scrollbar styling */
      {}
    </style>
  </head>
  <body>
    <div id="code-container">
      <pre><code>{}</code></pre>
    </div>
  </body>
</html>"#,
        bg_color, fg_color, syntect_css, scrollbar_css, highlighted_html
    );
    
    log::debug!("[webkit6] Generated HTML page: {} bytes, bg={}, fg={}", 
        complete_page.len(), bg_color, fg_color);
    log::debug!("[webkit6] Highlighted HTML length: {} bytes", highlighted_html.len());
    log::debug!("[webkit6] Highlighted HTML preview: {}", 
        &highlighted_html.chars().take(200).collect::<String>());
    log::debug!("[webkit6] Syntect CSS length: {} bytes", syntect_css.len());
    
    // Debug: Write HTML to temporary file for inspection
    if let Err(e) = std::fs::write("/tmp/marco_code_view_debug.html", &complete_page) {
        log::warn!("[webkit6] Failed to write debug HTML: {}", e);
    } else {
        log::debug!("[webkit6] Debug HTML written to /tmp/marco_code_view_debug.html");
    }
    
    // Create WebView
    let webview = WebView::new();
    
    // Configure security settings (same as HTML preview)
    if let Some(settings) = webkit6::prelude::WebViewExt::settings(&webview) {
        settings.set_allow_file_access_from_file_urls(true);
        settings.set_allow_universal_access_from_file_urls(true);
        settings.set_auto_load_images(true);
    }
    
    // Initialize UserContentManager
    setup_user_content_manager(&webview);
    
    // Set up cleanup on destruction
    webview.connect_destroy({
        let webview_cleanup = webview.clone();
        move |_| {
            webview_cleanup.evaluate_javascript(
                "(function() { if (window.MarcoPreview) { MarcoPreview.cleanup(); delete window.MarcoPreview; } })()",
                None,
                None,
                None::<&gio::Cancellable>,
                |_| {},
            );
        }
    });
    
    // Defer loading HTML until idle
    let complete_page_owned = complete_page.clone();
    let base_uri_owned = base_uri.map(|s| s.to_string());
    let webview_clone = webview.clone();
    glib::idle_add_local(move || {
        log::debug!("[webkit6] Loading HTML into code view WebView: {} bytes", 
            complete_page_owned.len());
        webview_clone.load_html(&complete_page_owned, base_uri_owned.as_deref());
        glib::ControlFlow::Break
    });
    
    webview.set_vexpand(true);
    webview.set_hexpand(true);
    
    log::debug!("[webkit6] Code viewer WebView created successfully");
    Ok(webview)
}

/// Update code view WebView content smoothly using JavaScript injection.
/// This avoids full page reloads and prevents flickering while updating the HTML source.
pub fn update_code_view_smooth(
    webview: &WebView,
    html_source: &str,
    theme_mode: &str,
    editor_bg: Option<&str>,
    editor_fg: Option<&str>,
    scrollbar_thumb: Option<&str>,
    scrollbar_track: Option<&str>,
) -> Result<(), String> {
    use crate::components::viewer::syntax_highlighter::{global_syntax_highlighter, generate_css_with_global};
    
    // Normalize theme mode
    let normalized_theme = if theme_mode.contains("dark") {
        "dark"
    } else {
        "light"
    };
    
    log::debug!("[webkit6] Smooth updating code view with theme: {} (normalized: {})", 
        theme_mode, normalized_theme);
    
    // Handle empty HTML
    let display_html = if html_source.is_empty() {
        "<!-- No content yet -->"
    } else {
        html_source
    };
    
    // Initialize and get CSS
    global_syntax_highlighter()
        .map_err(|e| format!("Failed to initialize syntax highlighter: {}", e))?;
    
    let syntect_css = generate_css_with_global(normalized_theme)
        .map_err(|e| format!("Failed to generate CSS: {}", e))?;
    
    // Highlight HTML
    let highlighted_html = SYNTAX_HIGHLIGHTER.with(|highlighter| {
        let h = highlighter.borrow();
        let syntax_highlighter = h.as_ref()
            .ok_or_else(|| "Syntax highlighter not initialized".to_string())?;
            
        syntax_highlighter.highlight_to_html(display_html, "html", normalized_theme)
            .map_err(|e| format!("Highlighting failed: {}", e))
    })?;
    
    // Escape for JavaScript
    let escaped_html = highlighted_html
        .replace('\\', "\\\\")
        .replace('\'', "\\'")
        .replace('\n', "\\n")
        .replace('\r', "\\r");
    
    let escaped_css = syntect_css
        .replace('\\', "\\\\")
        .replace('\'', "\\'")
        .replace('\n', "\\n")
        .replace('\r', "\\r");
    
    // Determine colors for theme - use editor colors if provided, otherwise use defaults
    let (bg_color, fg_color) = if let (Some(bg), Some(fg)) = (editor_bg, editor_fg) {
        (bg, fg)
    } else if normalized_theme == "dark" {
        ("#2b303b", "#c0c5ce")
    } else {
        ("#fdf6e3", "#657b83")
    };
    
    // Generate webkit scrollbar CSS
    let scrollbar_css = if let (Some(thumb), Some(track)) = (scrollbar_thumb, scrollbar_track) {
        crate::components::viewer::webview_utils::webkit_scrollbar_css(thumb, track)
    } else {
        String::new()
    };
    
    let escaped_scrollbar_css = scrollbar_css
        .replace('\\', "\\\\")
        .replace('\'', "\\'")
        .replace('\n', "\\n")
        .replace('\r', "\\r");
    
    // JavaScript to update content and theme
    let js_code = format!(
        r#"
        (function() {{
            try {{
                // Update body colors
                document.body.style.background = '{}';
                document.body.style.color = '{}';
                
                // Update syntect CSS
                var styleEl = document.getElementById('marco-syntect-style');
                if (!styleEl) {{
                    styleEl = document.createElement('style');
                    styleEl.id = 'marco-syntect-style';
                    document.head.appendChild(styleEl);
                }}
                styleEl.textContent = '{}';
                
                // Update scrollbar CSS
                var scrollbarStyleEl = document.getElementById('marco-scrollbar-style');
                if (!scrollbarStyleEl) {{
                    scrollbarStyleEl = document.createElement('style');
                    scrollbarStyleEl.id = 'marco-scrollbar-style';
                    document.head.appendChild(scrollbarStyleEl);
                }}
                scrollbarStyleEl.textContent = '{}';
                
                // Update code content
                var codeEl = document.querySelector('pre code');
                if (codeEl) {{
                    var scrollTop = window.scrollY;
                    codeEl.innerHTML = '{}';
                    window.scrollTo(0, scrollTop);
                }} else {{
                    console.error('Code element not found');
                }}
            }} catch(e) {{
                console.error('Update failed:', e);
            }}
        }})();
        "#,
        bg_color, fg_color, escaped_css, escaped_scrollbar_css, escaped_html
    );
    
    let webview_clone = webview.clone();
    glib::idle_add_local(move || {
        webview_clone.evaluate_javascript(
            &js_code,
            None,
            None,
            None::<&gio::Cancellable>,
            |result| match result {
                Ok(_) => log::debug!("[webkit6] Code view smooth update successful"),
                Err(e) => log::warn!("[webkit6] Code view smooth update failed: {}", e),
            },
        );
        glib::ControlFlow::Break
    });
    
    Ok(())
}

// Import SYNTAX_HIGHLIGHTER for use in create_html_source_viewer_webview
use crate::components::viewer::syntax_highlighter::SYNTAX_HIGHLIGHTER;
