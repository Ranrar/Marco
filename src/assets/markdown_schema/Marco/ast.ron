# CommonMark AST Template

RootNode {
    type: "root",
    children: [
        Heading {
            type: "heading",
            depth: 1,
            children: [ TextNode { type: "text", value: "Heading 1" } ]
        },
        Heading {
            type: "heading",
            depth: 2,
            children: [ TextNode { type: "text", value: "Heading 2" } ]
        },
        Paragraph {
            type: "paragraph",
            children: [
                TextNode { type: "text", value: "This is a sample paragraph with " },
                Strong { type: "strong", children: [ TextNode { type: "text", value: "bold" } ] },
                TextNode { type: "text", value: " and " },
                Emphasis { type: "emphasis", children: [ TextNode { type: "text", value: "italic" } ] },
                TextNode { type: "text", value: " text." }
            ]
        },
        BlockQuote {
            type: "blockquote",
            children: [
                Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "A blockquote." } ] }
            ]
        },
        List {
            type: "list",
            ordered: false,
            children: [
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "First item" } ] } ] },
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Second item" } ] } ] }
            ]
        },
        CodeBlock {
            type: "codeBlock",
            language: Some("rust"),
            value: "fn main() {\n    println!(\"Hello World\");\n}"
        },
        HorizontalRule {
            type: "thematicBreak"
        },
        Link {
            type: "link",
            url: "https://example.com",
            title: "Example",
            children: [ TextNode { type: "text", value: "Example Link" } ]
        },
        Image {
            type: "image",
            url: "https://example.com/image.png",
            title: "Example Image",
            alt: "Alt text"
        },
        InlineCode {
            type: "inlineCode",
            value: "let x = 5;"
        }
        , HardBreak {
            type: "hardbreak"
        }
        , SoftBreak {
            type: "softbreak"
        }
        , Strikethrough {
            type: "delete",
            children: [ TextNode { type: "text", value: "struck" } ]
        }
        , List {
            type: "list",
            ordered: false,
            children: [
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Task incomplete" } ] } ], checked: Some(false) },
                ListItem { type: "listItem", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Task done" } ] } ], checked: Some(true) }
            ]
        }
        , Table {
            type: "table",
            children: [
                TableRow { type: "tableRow", children: [ TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "A" } ] }, TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "B" } ] } ] },
                TableRow { type: "tableRow", children: [ TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "1" } ] }, TableCell { type: "tableCell", children: [ TextNode { type: "text", value: "2" } ] } ] }
            ]
        }
        , Footnote {
            type: "footnote",
            children: [ TextNode { type: "text", value: "See note" } ]
        }
        , Autolink {
            type: "link",
            url: "https://example.com",
            children: [ TextNode { type: "text", value: "https://example.com" } ]
        }
        , HTMLIns {
            type: "htmlInline",
            value: "<ins>underlined</ins>"
        }
        , HTMLNbsp {
            type: "htmlInline",
            value: "&nbsp;&nbsp;&nbsp;&nbsp;Indented"
        }
        , HTMLCenter {
            type: "htmlBlock",
            value: "<center>Centered text</center>"
        }
        , HTMLFont {
            type: "htmlInline",
            value: "<font color=\"red\">Red text</font>"
        }
        , CommentHack {
            type: "comment",
            value: "[This is a comment]: #"
        }
        , Definition {
            type: "definition",
            identifier: "ref-id",
            url: "https://example.com",
            title: Some("Optional title")
        }
        , FrontMatter {
            type: "frontmatter",
            value: "---\ntitle: Example\n---"
        }
        , FigureCaption {
            type: "figure",
            children: [ Image { type: "image", url: "/assets/images/albuquerque.jpg", title: "Albuquerque", alt: "Albuquerque" }, TextNode { type: "text", value: "A single track trail outside of Albuquerque, New Mexico." } ]
        }
        , SetextHeading {
            type: "heading",
            depth: 1,
            children: [ TextNode { type: "text", value: "Setext Title" } ]
        }
        , LinkReference {
            type: "linkReference",
            identifier: "ref-id",
            children: [ TextNode { type: "text", value: "Reference Link" } ]
        }
        , DefinitionList {
            type: "definitionList",
            children: [ DefinitionTerm { type: "term", children: [ TextNode { type: "text", value: "Term" } ] }, DefinitionDescription { type: "description", children: [ Paragraph { type: "paragraph", children: [ TextNode { type: "text", value: "Definition text." } ] } ] } ]
        }
        , TOCPlaceholder {
            type: "toc",
            children: [ Heading { type: "heading", depth: 4, children: [ TextNode { type: "text", value: "Table of Contents" } ] } ]
        }
        , VideoEmbed {
            type: "video",
            value: "[![Image alt text](https://img.youtube.com/vi/YOUTUBE-ID/0.jpg)](https://www.youtube.com/watch?v=YOUTUBE-ID)"
        }
        , InlineMath {
            type: "mathInline",
            value: "x^2 + y^2"
        }
        , BlockMath {
            type: "mathBlock",
            value: "\\int_0^1 x dx"
        }
        , Emoji {
            type: "emoji",
            value: ":smile:"
        }
    ]
}
