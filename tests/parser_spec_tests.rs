// This file is generated by build.rs
use marco::logic::core::inline::parser::parse_phrases;
use marco::logic::core::inline::types::InlineNode;
#[cfg(test)]
mod parser_spec_generated {
    use super::*;
    #[test]
    fn parser_example_1() {
        let ast = parse_phrases(r#"	foo	baz		bim
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_1 did not produce valid node structure");
    }
    #[test]
    fn parser_example_2() {
        let ast = parse_phrases(r#"  	foo	baz		bim
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_2 did not produce valid node structure");
    }
    #[test]
    fn parser_example_3() {
        let ast = parse_phrases(r#"    a	a
    ὐ	a
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_3 did not produce valid node structure");
    }
    #[test]
    fn parser_example_4() {
        let ast = parse_phrases(r#"  - foo

	bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_4 did not produce valid node structure");
    }
    #[test]
    fn parser_example_5() {
        let ast = parse_phrases(r#"- foo

		bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_5 did not produce valid node structure");
    }
    #[test]
    fn parser_example_6() {
        let ast = parse_phrases(r#">		foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_6 did not produce valid node structure");
    }
    #[test]
    fn parser_example_7() {
        let ast = parse_phrases(r#"-		foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_7 did not produce valid node structure");
    }
    #[test]
    fn parser_example_8() {
        let ast = parse_phrases(r#"    foo
	bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_8 did not produce valid node structure");
    }
    #[test]
    fn parser_example_9() {
        let ast = parse_phrases(r#" - foo
   - bar
	 - baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_9 did not produce valid node structure");
    }
    #[test]
    fn parser_example_10() {
        let ast = parse_phrases(r#"#	Foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_10 did not produce valid node structure");
    }
    #[test]
    fn parser_example_11() {
        let ast = parse_phrases(r#"*	*	*	
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_11 did not produce valid node structure");
    }
    #[test]
    fn parser_example_12() {
        let ast = parse_phrases(r#"\!\\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_12 did not produce valid node structure");
    }
    #[test]
    fn parser_example_13() {
        let ast = parse_phrases(r#"\	\A\a\ \3\φ\«
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_13 did not produce valid node structure");
    }
    #[test]
    fn parser_example_14() {
        let ast = parse_phrases(r#"\*not emphasized*
\<br/> not a tag
\[not a link](/foo)
\`not code`
1\. not a list
\* not a list
\# not a heading
\[foo]: /url \"not a reference\"
\&ouml; not a character entity
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_14 did not produce valid node structure");
    }
    #[test]
    fn parser_example_15() {
        let ast = parse_phrases(r#"\\*emphasis*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_15 did not produce valid node structure");
    }
    #[test]
    fn parser_example_16() {
        let ast = parse_phrases(r#"foo\
bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_16 did not produce valid node structure");
    }
    #[test]
    fn parser_example_17() {
        let ast = parse_phrases(r#"`` \[\` ``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_17 did not produce valid node structure");
    }
    #[test]
    fn parser_example_18() {
        let ast = parse_phrases(r#"    \[\]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_18 did not produce valid node structure");
    }
    #[test]
    fn parser_example_19() {
        let ast = parse_phrases(r#"~~~
\[\]
~~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_19 did not produce valid node structure");
    }
    #[test]
    fn parser_example_20() {
        let ast = parse_phrases(r#"<https://example.com?find=\*>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_20 did not produce valid node structure");
    }
    #[test]
    fn parser_example_21() {
        let ast = parse_phrases(r#"<a href=\"/bar\/)\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_21 did not produce valid node structure");
    }
    #[test]
    fn parser_example_22() {
        let ast = parse_phrases(r#"[foo](/bar\* \"ti\*tle\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_22 did not produce valid node structure");
    }
    #[test]
    fn parser_example_23() {
        let ast = parse_phrases(r#"[foo]

[foo]: /bar\* \"ti\*tle\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_23 did not produce valid node structure");
    }
    #[test]
    fn parser_example_24() {
        let ast = parse_phrases(r#"``` foo\+bar
foo
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_24 did not produce valid node structure");
    }
    #[test]
    fn parser_example_25() {
        let ast = parse_phrases(r#"&nbsp; &amp; &copy; &AElig; &Dcaron;
&frac34; &HilbertSpace; &DifferentialD;
&ClockwiseContourIntegral; &ngE;
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_25 did not produce valid node structure");
    }
    #[test]
    fn parser_example_26() {
        let ast = parse_phrases(r#"&#35; &#1234; &#992; &#0;
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_26 did not produce valid node structure");
    }
    #[test]
    fn parser_example_27() {
        let ast = parse_phrases(r#"&#X22; &#XD06; &#xcab;
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_27 did not produce valid node structure");
    }
    #[test]
    fn parser_example_28() {
        let ast = parse_phrases(r#"&nbsp &x; &#; &#x;
&#87654321;
&#abcdef0;
&ThisIsNotDefined; &hi?;
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_28 did not produce valid node structure");
    }
    #[test]
    fn parser_example_29() {
        let ast = parse_phrases(r#"&copy
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_29 did not produce valid node structure");
    }
    #[test]
    fn parser_example_30() {
        let ast = parse_phrases(r#"&MadeUpEntity;
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_30 did not produce valid node structure");
    }
    #[test]
    fn parser_example_31() {
        let ast = parse_phrases(r#"<a href=\"&ouml;&ouml;.html\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_31 did not produce valid node structure");
    }
    #[test]
    fn parser_example_32() {
        let ast = parse_phrases(r#"[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_32 did not produce valid node structure");
    }
    #[test]
    fn parser_example_33() {
        let ast = parse_phrases(r#"[foo]

[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_33 did not produce valid node structure");
    }
    #[test]
    fn parser_example_34() {
        let ast = parse_phrases(r#"``` f&ouml;&ouml;
foo
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_34 did not produce valid node structure");
    }
    #[test]
    fn parser_example_35() {
        let ast = parse_phrases(r#"`f&ouml;&ouml;`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_35 did not produce valid node structure");
    }
    #[test]
    fn parser_example_36() {
        let ast = parse_phrases(r#"    f&ouml;f&ouml;
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_36 did not produce valid node structure");
    }
    #[test]
    fn parser_example_37() {
        let ast = parse_phrases(r#"&#42;foo&#42;
*foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_37 did not produce valid node structure");
    }
    #[test]
    fn parser_example_38() {
        let ast = parse_phrases(r#"&#42; foo

* foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_38 did not produce valid node structure");
    }
    #[test]
    fn parser_example_39() {
        let ast = parse_phrases(r#"foo&#10;&#10;bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_39 did not produce valid node structure");
    }
    #[test]
    fn parser_example_40() {
        let ast = parse_phrases(r#"&#9;foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_40 did not produce valid node structure");
    }
    #[test]
    fn parser_example_41() {
        let ast = parse_phrases(r#"[a](url &quot;tit&quot;)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_41 did not produce valid node structure");
    }
    #[test]
    fn parser_example_42() {
        let ast = parse_phrases(r#"- `one
- two`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_42 did not produce valid node structure");
    }
    #[test]
    fn parser_example_43() {
        let ast = parse_phrases(r#"***
---
___
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_43 did not produce valid node structure");
    }
    #[test]
    fn parser_example_44() {
        let ast = parse_phrases(r#"+++
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_44 did not produce valid node structure");
    }
    #[test]
    fn parser_example_45() {
        let ast = parse_phrases(r#"===
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_45 did not produce valid node structure");
    }
    #[test]
    fn parser_example_46() {
        let ast = parse_phrases(r#"--
**
__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_46 did not produce valid node structure");
    }
    #[test]
    fn parser_example_47() {
        let ast = parse_phrases(r#" ***
  ***
   ***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_47 did not produce valid node structure");
    }
    #[test]
    fn parser_example_48() {
        let ast = parse_phrases(r#"    ***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_48 did not produce valid node structure");
    }
    #[test]
    fn parser_example_49() {
        let ast = parse_phrases(r#"Foo
    ***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_49 did not produce valid node structure");
    }
    #[test]
    fn parser_example_50() {
        let ast = parse_phrases(r#"_____________________________________
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_50 did not produce valid node structure");
    }
    #[test]
    fn parser_example_51() {
        let ast = parse_phrases(r#" - - -
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_51 did not produce valid node structure");
    }
    #[test]
    fn parser_example_52() {
        let ast = parse_phrases(r#" **  * ** * ** * **
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_52 did not produce valid node structure");
    }
    #[test]
    fn parser_example_53() {
        let ast = parse_phrases(r#"-     -      -      -
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_53 did not produce valid node structure");
    }
    #[test]
    fn parser_example_54() {
        let ast = parse_phrases(r#"- - - -    
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_54 did not produce valid node structure");
    }
    #[test]
    fn parser_example_55() {
        let ast = parse_phrases(r#"_ _ _ _ a

a------

---a---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_55 did not produce valid node structure");
    }
    #[test]
    fn parser_example_56() {
        let ast = parse_phrases(r#" *-*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_56 did not produce valid node structure");
    }
    #[test]
    fn parser_example_57() {
        let ast = parse_phrases(r#"- foo
***
- bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_57 did not produce valid node structure");
    }
    #[test]
    fn parser_example_58() {
        let ast = parse_phrases(r#"Foo
***
bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_58 did not produce valid node structure");
    }
    #[test]
    fn parser_example_59() {
        let ast = parse_phrases(r#"Foo
---
bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_59 did not produce valid node structure");
    }
    #[test]
    fn parser_example_60() {
        let ast = parse_phrases(r#"* Foo
* * *
* Bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_60 did not produce valid node structure");
    }
    #[test]
    fn parser_example_61() {
        let ast = parse_phrases(r#"- Foo
- * * *
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_61 did not produce valid node structure");
    }
    #[test]
    fn parser_example_62() {
        let ast = parse_phrases(r#"# foo
## foo
### foo
#### foo
##### foo
###### foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_62 did not produce valid node structure");
    }
    #[test]
    fn parser_example_63() {
        let ast = parse_phrases(r#"####### foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_63 did not produce valid node structure");
    }
    #[test]
    fn parser_example_64() {
        let ast = parse_phrases(r#"#5 bolt

#hashtag
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_64 did not produce valid node structure");
    }
    #[test]
    fn parser_example_65() {
        let ast = parse_phrases(r#"\## foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_65 did not produce valid node structure");
    }
    #[test]
    fn parser_example_66() {
        let ast = parse_phrases(r#"# foo *bar* \*baz\*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_66 did not produce valid node structure");
    }
    #[test]
    fn parser_example_67() {
        let ast = parse_phrases(r#"#                  foo                     
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_67 did not produce valid node structure");
    }
    #[test]
    fn parser_example_68() {
        let ast = parse_phrases(r#" ### foo
  ## foo
   # foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_68 did not produce valid node structure");
    }
    #[test]
    fn parser_example_69() {
        let ast = parse_phrases(r#"    # foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_69 did not produce valid node structure");
    }
    #[test]
    fn parser_example_70() {
        let ast = parse_phrases(r#"foo
    # bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_70 did not produce valid node structure");
    }
    #[test]
    fn parser_example_71() {
        let ast = parse_phrases(r#"## foo ##
  ###   bar    ###
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_71 did not produce valid node structure");
    }
    #[test]
    fn parser_example_72() {
        let ast = parse_phrases(r#"# foo ##################################
##### foo ##
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_72 did not produce valid node structure");
    }
    #[test]
    fn parser_example_73() {
        let ast = parse_phrases(r#"### foo ###     
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_73 did not produce valid node structure");
    }
    #[test]
    fn parser_example_74() {
        let ast = parse_phrases(r#"### foo ### b
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_74 did not produce valid node structure");
    }
    #[test]
    fn parser_example_75() {
        let ast = parse_phrases(r#"# foo#
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_75 did not produce valid node structure");
    }
    #[test]
    fn parser_example_76() {
        let ast = parse_phrases(r#"### foo \###
## foo #\##
# foo \#
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_76 did not produce valid node structure");
    }
    #[test]
    fn parser_example_77() {
        let ast = parse_phrases(r#"****
## foo
****
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_77 did not produce valid node structure");
    }
    #[test]
    fn parser_example_78() {
        let ast = parse_phrases(r#"Foo bar
# baz
Bar foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_78 did not produce valid node structure");
    }
    #[test]
    fn parser_example_79() {
        let ast = parse_phrases(r#"## 
#
### ###
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_79 did not produce valid node structure");
    }
    #[test]
    fn parser_example_80() {
        let ast = parse_phrases(r#"Foo *bar*
=========

Foo *bar*
---------
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_80 did not produce valid node structure");
    }
    #[test]
    fn parser_example_81() {
        let ast = parse_phrases(r#"Foo *bar
baz*
====
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_81 did not produce valid node structure");
    }
    #[test]
    fn parser_example_82() {
        let ast = parse_phrases(r#"  Foo *bar
baz*	
====
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_82 did not produce valid node structure");
    }
    #[test]
    fn parser_example_83() {
        let ast = parse_phrases(r#"Foo
-------------------------

Foo
=
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_83 did not produce valid node structure");
    }
    #[test]
    fn parser_example_84() {
        let ast = parse_phrases(r#"   Foo
---

  Foo
-----

  Foo
  ===
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_84 did not produce valid node structure");
    }
    #[test]
    fn parser_example_85() {
        let ast = parse_phrases(r#"    Foo
    ---

    Foo
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_85 did not produce valid node structure");
    }
    #[test]
    fn parser_example_86() {
        let ast = parse_phrases(r#"Foo
   ----      
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_86 did not produce valid node structure");
    }
    #[test]
    fn parser_example_87() {
        let ast = parse_phrases(r#"Foo
    ---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_87 did not produce valid node structure");
    }
    #[test]
    fn parser_example_88() {
        let ast = parse_phrases(r#"Foo
= =

Foo
--- -
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_88 did not produce valid node structure");
    }
    #[test]
    fn parser_example_89() {
        let ast = parse_phrases(r#"Foo  
-----
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_89 did not produce valid node structure");
    }
    #[test]
    fn parser_example_90() {
        let ast = parse_phrases(r#"Foo\
----
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_90 did not produce valid node structure");
    }
    #[test]
    fn parser_example_91() {
        let ast = parse_phrases(r#"`Foo
----
`

<a title=\"a lot
---
of dashes\"/>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_91 did not produce valid node structure");
    }
    #[test]
    fn parser_example_92() {
        let ast = parse_phrases(r#"> Foo
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_92 did not produce valid node structure");
    }
    #[test]
    fn parser_example_93() {
        let ast = parse_phrases(r#"> foo
bar
===
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_93 did not produce valid node structure");
    }
    #[test]
    fn parser_example_94() {
        let ast = parse_phrases(r#"- Foo
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_94 did not produce valid node structure");
    }
    #[test]
    fn parser_example_95() {
        let ast = parse_phrases(r#"Foo
Bar
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_95 did not produce valid node structure");
    }
    #[test]
    fn parser_example_96() {
        let ast = parse_phrases(r#"---
Foo
---
Bar
---
Baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_96 did not produce valid node structure");
    }
    #[test]
    fn parser_example_97() {
        let ast = parse_phrases(r#"
====
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_97 did not produce valid node structure");
    }
    #[test]
    fn parser_example_98() {
        let ast = parse_phrases(r#"---
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_98 did not produce valid node structure");
    }
    #[test]
    fn parser_example_99() {
        let ast = parse_phrases(r#"- foo
-----
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_99 did not produce valid node structure");
    }
    #[test]
    fn parser_example_100() {
        let ast = parse_phrases(r#"    foo
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_100 did not produce valid node structure");
    }
    #[test]
    fn parser_example_101() {
        let ast = parse_phrases(r#"> foo
-----
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_101 did not produce valid node structure");
    }
    #[test]
    fn parser_example_102() {
        let ast = parse_phrases(r#"\> foo
------
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_102 did not produce valid node structure");
    }
    #[test]
    fn parser_example_103() {
        let ast = parse_phrases(r#"Foo

bar
---
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_103 did not produce valid node structure");
    }
    #[test]
    fn parser_example_104() {
        let ast = parse_phrases(r#"Foo
bar

---

baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_104 did not produce valid node structure");
    }
    #[test]
    fn parser_example_105() {
        let ast = parse_phrases(r#"Foo
bar
* * *
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_105 did not produce valid node structure");
    }
    #[test]
    fn parser_example_106() {
        let ast = parse_phrases(r#"Foo
bar
\---
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_106 did not produce valid node structure");
    }
    #[test]
    fn parser_example_107() {
        let ast = parse_phrases(r#"    a simple
      indented code block
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_107 did not produce valid node structure");
    }
    #[test]
    fn parser_example_108() {
        let ast = parse_phrases(r#"  - foo

    bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_108 did not produce valid node structure");
    }
    #[test]
    fn parser_example_109() {
        let ast = parse_phrases(r#"1.  foo

    - bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_109 did not produce valid node structure");
    }
    #[test]
    fn parser_example_110() {
        let ast = parse_phrases(r#"    <a/>
    *hi*

    - one
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_110 did not produce valid node structure");
    }
    #[test]
    fn parser_example_111() {
        let ast = parse_phrases(r#"    chunk1

    chunk2
  
 
 
    chunk3
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_111 did not produce valid node structure");
    }
    #[test]
    fn parser_example_112() {
        let ast = parse_phrases(r#"    chunk1
      
      chunk2
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_112 did not produce valid node structure");
    }
    #[test]
    fn parser_example_113() {
        let ast = parse_phrases(r#"Foo
    bar

"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_113 did not produce valid node structure");
    }
    #[test]
    fn parser_example_114() {
        let ast = parse_phrases(r#"    foo
bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_114 did not produce valid node structure");
    }
    #[test]
    fn parser_example_115() {
        let ast = parse_phrases(r#"# Heading
    foo
Heading
------
    foo
----
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_115 did not produce valid node structure");
    }
    #[test]
    fn parser_example_116() {
        let ast = parse_phrases(r#"        foo
    bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_116 did not produce valid node structure");
    }
    #[test]
    fn parser_example_117() {
        let ast = parse_phrases(r#"
    
    foo
    

"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_117 did not produce valid node structure");
    }
    #[test]
    fn parser_example_118() {
        let ast = parse_phrases(r#"    foo  
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_118 did not produce valid node structure");
    }
    #[test]
    fn parser_example_119() {
        let ast = parse_phrases(r#"```
<
 >
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_119 did not produce valid node structure");
    }
    #[test]
    fn parser_example_120() {
        let ast = parse_phrases(r#"~~~
<
 >
~~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_120 did not produce valid node structure");
    }
    #[test]
    fn parser_example_121() {
        let ast = parse_phrases(r#"``
foo
``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_121 did not produce valid node structure");
    }
    #[test]
    fn parser_example_122() {
        let ast = parse_phrases(r#"```
aaa
~~~
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_122 did not produce valid node structure");
    }
    #[test]
    fn parser_example_123() {
        let ast = parse_phrases(r#"~~~
aaa
```
~~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_123 did not produce valid node structure");
    }
    #[test]
    fn parser_example_124() {
        let ast = parse_phrases(r#"````
aaa
```
``````
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_124 did not produce valid node structure");
    }
    #[test]
    fn parser_example_125() {
        let ast = parse_phrases(r#"~~~~
aaa
~~~
~~~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_125 did not produce valid node structure");
    }
    #[test]
    fn parser_example_126() {
        let ast = parse_phrases(r#"```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_126 did not produce valid node structure");
    }
    #[test]
    fn parser_example_127() {
        let ast = parse_phrases(r#"`````

```
aaa
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_127 did not produce valid node structure");
    }
    #[test]
    fn parser_example_128() {
        let ast = parse_phrases(r#"> ```
> aaa

bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_128 did not produce valid node structure");
    }
    #[test]
    fn parser_example_129() {
        let ast = parse_phrases(r#"```

  
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_129 did not produce valid node structure");
    }
    #[test]
    fn parser_example_130() {
        let ast = parse_phrases(r#"```
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_130 did not produce valid node structure");
    }
    #[test]
    fn parser_example_131() {
        let ast = parse_phrases(r#" ```
 aaa
aaa
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_131 did not produce valid node structure");
    }
    #[test]
    fn parser_example_132() {
        let ast = parse_phrases(r#"  ```
aaa
  aaa
aaa
  ```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_132 did not produce valid node structure");
    }
    #[test]
    fn parser_example_133() {
        let ast = parse_phrases(r#"   ```
   aaa
    aaa
  aaa
   ```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_133 did not produce valid node structure");
    }
    #[test]
    fn parser_example_134() {
        let ast = parse_phrases(r#"    ```
    aaa
    ```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_134 did not produce valid node structure");
    }
    #[test]
    fn parser_example_135() {
        let ast = parse_phrases(r#"```
aaa
  ```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_135 did not produce valid node structure");
    }
    #[test]
    fn parser_example_136() {
        let ast = parse_phrases(r#"   ```
aaa
  ```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_136 did not produce valid node structure");
    }
    #[test]
    fn parser_example_137() {
        let ast = parse_phrases(r#"```
aaa
    ```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_137 did not produce valid node structure");
    }
    #[test]
    fn parser_example_138() {
        let ast = parse_phrases(r#"``` ```
aaa
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_138 did not produce valid node structure");
    }
    #[test]
    fn parser_example_139() {
        let ast = parse_phrases(r#"~~~~~~
aaa
~~~ ~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_139 did not produce valid node structure");
    }
    #[test]
    fn parser_example_140() {
        let ast = parse_phrases(r#"foo
```
bar
```
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_140 did not produce valid node structure");
    }
    #[test]
    fn parser_example_141() {
        let ast = parse_phrases(r#"foo
---
~~~
bar
~~~
# baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_141 did not produce valid node structure");
    }
    #[test]
    fn parser_example_142() {
        let ast = parse_phrases(r#"```ruby
def foo(x)
  return 3
end
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_142 did not produce valid node structure");
    }
    #[test]
    fn parser_example_143() {
        let ast = parse_phrases(r#"~~~~    ruby startline=3 $%@#$
def foo(x)
  return 3
end
~~~~~~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_143 did not produce valid node structure");
    }
    #[test]
    fn parser_example_144() {
        let ast = parse_phrases(r#"````;
````
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_144 did not produce valid node structure");
    }
    #[test]
    fn parser_example_145() {
        let ast = parse_phrases(r#"``` aa ```
foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_145 did not produce valid node structure");
    }
    #[test]
    fn parser_example_146() {
        let ast = parse_phrases(r#"~~~ aa ``` ~~~
foo
~~~
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_146 did not produce valid node structure");
    }
    #[test]
    fn parser_example_147() {
        let ast = parse_phrases(r#"```
``` aaa
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_147 did not produce valid node structure");
    }
    #[test]
    fn parser_example_148() {
        let ast = parse_phrases(r#"<table><tr><td>
<pre>
**Hello**,

_world_.
</pre>
</td></tr></table>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_148 did not produce valid node structure");
    }
    #[test]
    fn parser_example_149() {
        let ast = parse_phrases(r#"<table>
  <tr>
    <td>
           hi
    </td>
  </tr>
</table>

okay.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_149 did not produce valid node structure");
    }
    #[test]
    fn parser_example_150() {
        let ast = parse_phrases(r#" <div>
  *hello*
         <foo><a>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_150 did not produce valid node structure");
    }
    #[test]
    fn parser_example_151() {
        let ast = parse_phrases(r#"</div>
*foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_151 did not produce valid node structure");
    }
    #[test]
    fn parser_example_152() {
        let ast = parse_phrases(r#"<DIV CLASS=\"foo\">

*Markdown*

</DIV>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_152 did not produce valid node structure");
    }
    #[test]
    fn parser_example_153() {
        let ast = parse_phrases(r#"<div id=\"foo\"
  class=\"bar\">
</div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_153 did not produce valid node structure");
    }
    #[test]
    fn parser_example_154() {
        let ast = parse_phrases(r#"<div id=\"foo\" class=\"bar
  baz\">
</div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_154 did not produce valid node structure");
    }
    #[test]
    fn parser_example_155() {
        let ast = parse_phrases(r#"<div>
*foo*

*bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_155 did not produce valid node structure");
    }
    #[test]
    fn parser_example_156() {
        let ast = parse_phrases(r#"<div id=\"foo\"
*hi*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_156 did not produce valid node structure");
    }
    #[test]
    fn parser_example_157() {
        let ast = parse_phrases(r#"<div class
foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_157 did not produce valid node structure");
    }
    #[test]
    fn parser_example_158() {
        let ast = parse_phrases(r#"<div *???-&&&-<---
*foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_158 did not produce valid node structure");
    }
    #[test]
    fn parser_example_159() {
        let ast = parse_phrases(r#"<div><a href=\"bar\">*foo*</a></div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_159 did not produce valid node structure");
    }
    #[test]
    fn parser_example_160() {
        let ast = parse_phrases(r#"<table><tr><td>
foo
</td></tr></table>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_160 did not produce valid node structure");
    }
    #[test]
    fn parser_example_161() {
        let ast = parse_phrases(r#"<div></div>
``` c
int x = 33;
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_161 did not produce valid node structure");
    }
    #[test]
    fn parser_example_162() {
        let ast = parse_phrases(r#"<div
> not quoted text
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_162 did not produce valid node structure");
    }
    #[test]
    fn parser_example_163() {
        let ast = parse_phrases(r#"<a href=\"foo\">
*bar*
</a>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_163 did not produce valid node structure");
    }
    #[test]
    fn parser_example_164() {
        let ast = parse_phrases(r#"<Warning>
*bar*
</Warning>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_164 did not produce valid node structure");
    }
    #[test]
    fn parser_example_165() {
        let ast = parse_phrases(r#"<i class=\"foo\">
*bar*
</i>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_165 did not produce valid node structure");
    }
    #[test]
    fn parser_example_166() {
        let ast = parse_phrases(r#"</ins>
*bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_166 did not produce valid node structure");
    }
    #[test]
    fn parser_example_167() {
        let ast = parse_phrases(r#"<del>
*foo*
</del>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_167 did not produce valid node structure");
    }
    #[test]
    fn parser_example_168() {
        let ast = parse_phrases(r#"<del>

*foo*

</del>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_168 did not produce valid node structure");
    }
    #[test]
    fn parser_example_169() {
        let ast = parse_phrases(r#"<del>*foo*</del>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_169 did not produce valid node structure");
    }
    #[test]
    fn parser_example_170() {
        let ast = parse_phrases(r#"<del
class=\"foo\">
*foo*
</del>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_170 did not produce valid node structure");
    }
    #[test]
    fn parser_example_171() {
        let ast = parse_phrases(r#"<pre language=\"haskell\"><code>
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags
</code></pre>
okay
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_171 did not produce valid node structure");
    }
    #[test]
    fn parser_example_172() {
        let ast = parse_phrases(r#"<script type=\"text/javascript\">
// JavaScript example

document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";
</script>
okay
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_172 did not produce valid node structure");
    }
    #[test]
    fn parser_example_173() {
        let ast = parse_phrases(r#"<textarea>

*foo*

_bar_

</textarea>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_173 did not produce valid node structure");
    }
    #[test]
    fn parser_example_174() {
        let ast = parse_phrases(r#"<style
  type=\"text/css\">
h1 {color:red;}

p {color:blue;}
</style>
okay
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_174 did not produce valid node structure");
    }
    #[test]
    fn parser_example_175() {
        let ast = parse_phrases(r#"<style
  type=\"text/css\">

foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_175 did not produce valid node structure");
    }
    #[test]
    fn parser_example_176() {
        let ast = parse_phrases(r#"> <div>
> foo

bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_176 did not produce valid node structure");
    }
    #[test]
    fn parser_example_177() {
        let ast = parse_phrases(r#"- <div>
- foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_177 did not produce valid node structure");
    }
    #[test]
    fn parser_example_178() {
        let ast = parse_phrases(r#"<style>p{color:red;}</style>
*foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_178 did not produce valid node structure");
    }
    #[test]
    fn parser_example_179() {
        let ast = parse_phrases(r#"<!-- foo -->*bar*
*baz*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_179 did not produce valid node structure");
    }
    #[test]
    fn parser_example_180() {
        let ast = parse_phrases(r#"<script>
foo
</script>1. *bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_180 did not produce valid node structure");
    }
    #[test]
    fn parser_example_181() {
        let ast = parse_phrases(r#"<!-- Foo

bar
   baz -->
okay
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_181 did not produce valid node structure");
    }
    #[test]
    fn parser_example_182() {
        let ast = parse_phrases(r#"<?php

  echo '>';

?>
okay
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_182 did not produce valid node structure");
    }
    #[test]
    fn parser_example_183() {
        let ast = parse_phrases(r#"<!DOCTYPE html>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_183 did not produce valid node structure");
    }
    #[test]
    fn parser_example_184() {
        let ast = parse_phrases(r#"<![CDATA[
function matchwo(a,b)
{
  if (a < b && a < 0) then {
    return 1;

  } else {

    return 0;
  }
}
]]>
okay
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_184 did not produce valid node structure");
    }
    #[test]
    fn parser_example_185() {
        let ast = parse_phrases(r#"  <!-- foo -->

    <!-- foo -->
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_185 did not produce valid node structure");
    }
    #[test]
    fn parser_example_186() {
        let ast = parse_phrases(r#"  <div>

    <div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_186 did not produce valid node structure");
    }
    #[test]
    fn parser_example_187() {
        let ast = parse_phrases(r#"Foo
<div>
bar
</div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_187 did not produce valid node structure");
    }
    #[test]
    fn parser_example_188() {
        let ast = parse_phrases(r#"<div>
bar
</div>
*foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_188 did not produce valid node structure");
    }
    #[test]
    fn parser_example_189() {
        let ast = parse_phrases(r#"Foo
<a href=\"bar\">
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_189 did not produce valid node structure");
    }
    #[test]
    fn parser_example_190() {
        let ast = parse_phrases(r#"<div>

*Emphasized* text.

</div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_190 did not produce valid node structure");
    }
    #[test]
    fn parser_example_191() {
        let ast = parse_phrases(r#"<div>
*Emphasized* text.
</div>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_191 did not produce valid node structure");
    }
    #[test]
    fn parser_example_192() {
        let ast = parse_phrases(r#"<table>

<tr>

<td>
Hi
</td>

</tr>

</table>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_192 did not produce valid node structure");
    }
    #[test]
    fn parser_example_193() {
        let ast = parse_phrases(r#"<table>

  <tr>

    <td>
      Hi
    </td>

  </tr>

</table>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_193 did not produce valid node structure");
    }
    #[test]
    fn parser_example_194() {
        let ast = parse_phrases(r#"[foo]: /url \"title\"

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_194 did not produce valid node structure");
    }
    #[test]
    fn parser_example_195() {
        let ast = parse_phrases(r#"   [foo]: 
      /url  
           'the title'  

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_195 did not produce valid node structure");
    }
    #[test]
    fn parser_example_196() {
        let ast = parse_phrases(r#"[Foo*bar\]]:my_(url) 'title (with parens)'

[Foo*bar\]]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_196 did not produce valid node structure");
    }
    #[test]
    fn parser_example_197() {
        let ast = parse_phrases(r#"[Foo bar]:
<my url>
'title'

[Foo bar]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_197 did not produce valid node structure");
    }
    #[test]
    fn parser_example_198() {
        let ast = parse_phrases(r#"[foo]: /url '
title
line1
line2
'

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_198 did not produce valid node structure");
    }
    #[test]
    fn parser_example_199() {
        let ast = parse_phrases(r#"[foo]: /url 'title

with blank line'

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_199 did not produce valid node structure");
    }
    #[test]
    fn parser_example_200() {
        let ast = parse_phrases(r#"[foo]:
/url

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_200 did not produce valid node structure");
    }
    #[test]
    fn parser_example_201() {
        let ast = parse_phrases(r#"[foo]:

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_201 did not produce valid node structure");
    }
    #[test]
    fn parser_example_202() {
        let ast = parse_phrases(r#"[foo]: <>

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_202 did not produce valid node structure");
    }
    #[test]
    fn parser_example_203() {
        let ast = parse_phrases(r#"[foo]: <bar>(baz)

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_203 did not produce valid node structure");
    }
    #[test]
    fn parser_example_204() {
        let ast = parse_phrases(r#"[foo]: /url\bar\*baz \"foo\\"bar\baz\"

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_204 did not produce valid node structure");
    }
    #[test]
    fn parser_example_205() {
        let ast = parse_phrases(r#"[foo]

[foo]: url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_205 did not produce valid node structure");
    }
    #[test]
    fn parser_example_206() {
        let ast = parse_phrases(r#"[foo]

[foo]: first
[foo]: second
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_206 did not produce valid node structure");
    }
    #[test]
    fn parser_example_207() {
        let ast = parse_phrases(r#"[FOO]: /url

[Foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_207 did not produce valid node structure");
    }
    #[test]
    fn parser_example_208() {
        let ast = parse_phrases(r#"[ΑΓΩ]: /φου

[αγω]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_208 did not produce valid node structure");
    }
    #[test]
    fn parser_example_209() {
        let ast = parse_phrases(r#"[foo]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_209 did not produce valid node structure");
    }
    #[test]
    fn parser_example_210() {
        let ast = parse_phrases(r#"[
foo
]: /url
bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_210 did not produce valid node structure");
    }
    #[test]
    fn parser_example_211() {
        let ast = parse_phrases(r#"[foo]: /url \"title\" ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_211 did not produce valid node structure");
    }
    #[test]
    fn parser_example_212() {
        let ast = parse_phrases(r#"[foo]: /url
\"title\" ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_212 did not produce valid node structure");
    }
    #[test]
    fn parser_example_213() {
        let ast = parse_phrases(r#"    [foo]: /url \"title\"

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_213 did not produce valid node structure");
    }
    #[test]
    fn parser_example_214() {
        let ast = parse_phrases(r#"```
[foo]: /url
```

[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_214 did not produce valid node structure");
    }
    #[test]
    fn parser_example_215() {
        let ast = parse_phrases(r#"Foo
[bar]: /baz

[bar]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_215 did not produce valid node structure");
    }
    #[test]
    fn parser_example_216() {
        let ast = parse_phrases(r#"# [Foo]
[foo]: /url
> bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_216 did not produce valid node structure");
    }
    #[test]
    fn parser_example_217() {
        let ast = parse_phrases(r#"[foo]: /url
bar
===
[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_217 did not produce valid node structure");
    }
    #[test]
    fn parser_example_218() {
        let ast = parse_phrases(r#"[foo]: /url
===
[foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_218 did not produce valid node structure");
    }
    #[test]
    fn parser_example_219() {
        let ast = parse_phrases(r#"[foo]: /foo-url \"foo\"
[bar]: /bar-url
  \"bar\"
[baz]: /baz-url

[foo],
[bar],
[baz]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_219 did not produce valid node structure");
    }
    #[test]
    fn parser_example_220() {
        let ast = parse_phrases(r#"[foo]

> [foo]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_220 did not produce valid node structure");
    }
    #[test]
    fn parser_example_221() {
        let ast = parse_phrases(r#"aaa

bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_221 did not produce valid node structure");
    }
    #[test]
    fn parser_example_222() {
        let ast = parse_phrases(r#"aaa
bbb

ccc
ddd
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_222 did not produce valid node structure");
    }
    #[test]
    fn parser_example_223() {
        let ast = parse_phrases(r#"aaa


bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_223 did not produce valid node structure");
    }
    #[test]
    fn parser_example_224() {
        let ast = parse_phrases(r#"  aaa
 bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_224 did not produce valid node structure");
    }
    #[test]
    fn parser_example_225() {
        let ast = parse_phrases(r#"aaa
             bbb
                                       ccc
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_225 did not produce valid node structure");
    }
    #[test]
    fn parser_example_226() {
        let ast = parse_phrases(r#"   aaa
bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_226 did not produce valid node structure");
    }
    #[test]
    fn parser_example_227() {
        let ast = parse_phrases(r#"    aaa
bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_227 did not produce valid node structure");
    }
    #[test]
    fn parser_example_228() {
        let ast = parse_phrases(r#"aaa     
bbb     
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_228 did not produce valid node structure");
    }
    #[test]
    fn parser_example_229() {
        let ast = parse_phrases(r#"  

aaa
  

# aaa

  
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_229 did not produce valid node structure");
    }
    #[test]
    fn parser_example_230() {
        let ast = parse_phrases(r#"> # Foo
> bar
> baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_230 did not produce valid node structure");
    }
    #[test]
    fn parser_example_231() {
        let ast = parse_phrases(r#"># Foo
>bar
> baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_231 did not produce valid node structure");
    }
    #[test]
    fn parser_example_232() {
        let ast = parse_phrases(r#"   > # Foo
   > bar
 > baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_232 did not produce valid node structure");
    }
    #[test]
    fn parser_example_233() {
        let ast = parse_phrases(r#"    > # Foo
    > bar
    > baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_233 did not produce valid node structure");
    }
    #[test]
    fn parser_example_234() {
        let ast = parse_phrases(r#"> # Foo
> bar
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_234 did not produce valid node structure");
    }
    #[test]
    fn parser_example_235() {
        let ast = parse_phrases(r#"> bar
baz
> foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_235 did not produce valid node structure");
    }
    #[test]
    fn parser_example_236() {
        let ast = parse_phrases(r#"> foo
---
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_236 did not produce valid node structure");
    }
    #[test]
    fn parser_example_237() {
        let ast = parse_phrases(r#"> - foo
- bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_237 did not produce valid node structure");
    }
    #[test]
    fn parser_example_238() {
        let ast = parse_phrases(r#">     foo
    bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_238 did not produce valid node structure");
    }
    #[test]
    fn parser_example_239() {
        let ast = parse_phrases(r#"> ```
foo
```
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_239 did not produce valid node structure");
    }
    #[test]
    fn parser_example_240() {
        let ast = parse_phrases(r#"> foo
    - bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_240 did not produce valid node structure");
    }
    #[test]
    fn parser_example_241() {
        let ast = parse_phrases(r#">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_241 did not produce valid node structure");
    }
    #[test]
    fn parser_example_242() {
        let ast = parse_phrases(r#">
>  
> 
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_242 did not produce valid node structure");
    }
    #[test]
    fn parser_example_243() {
        let ast = parse_phrases(r#">
> foo
>  
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_243 did not produce valid node structure");
    }
    #[test]
    fn parser_example_244() {
        let ast = parse_phrases(r#"> foo

> bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_244 did not produce valid node structure");
    }
    #[test]
    fn parser_example_245() {
        let ast = parse_phrases(r#"> foo
> bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_245 did not produce valid node structure");
    }
    #[test]
    fn parser_example_246() {
        let ast = parse_phrases(r#"> foo
>
> bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_246 did not produce valid node structure");
    }
    #[test]
    fn parser_example_247() {
        let ast = parse_phrases(r#"foo
> bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_247 did not produce valid node structure");
    }
    #[test]
    fn parser_example_248() {
        let ast = parse_phrases(r#"> aaa
***
> bbb
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_248 did not produce valid node structure");
    }
    #[test]
    fn parser_example_249() {
        let ast = parse_phrases(r#"> bar
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_249 did not produce valid node structure");
    }
    #[test]
    fn parser_example_250() {
        let ast = parse_phrases(r#"> bar

baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_250 did not produce valid node structure");
    }
    #[test]
    fn parser_example_251() {
        let ast = parse_phrases(r#"> bar
>
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_251 did not produce valid node structure");
    }
    #[test]
    fn parser_example_252() {
        let ast = parse_phrases(r#"> > > foo
bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_252 did not produce valid node structure");
    }
    #[test]
    fn parser_example_253() {
        let ast = parse_phrases(r#">>> foo
> bar
>>baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_253 did not produce valid node structure");
    }
    #[test]
    fn parser_example_254() {
        let ast = parse_phrases(r#">     code

>    not code
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_254 did not produce valid node structure");
    }
    #[test]
    fn parser_example_255() {
        let ast = parse_phrases(r#"A paragraph
with two lines.

    indented code

> A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_255 did not produce valid node structure");
    }
    #[test]
    fn parser_example_256() {
        let ast = parse_phrases(r#"1.  A paragraph
    with two lines.

        indented code

    > A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_256 did not produce valid node structure");
    }
    #[test]
    fn parser_example_257() {
        let ast = parse_phrases(r#"- one

 two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_257 did not produce valid node structure");
    }
    #[test]
    fn parser_example_258() {
        let ast = parse_phrases(r#"- one

  two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_258 did not produce valid node structure");
    }
    #[test]
    fn parser_example_259() {
        let ast = parse_phrases(r#" -    one

     two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_259 did not produce valid node structure");
    }
    #[test]
    fn parser_example_260() {
        let ast = parse_phrases(r#" -    one

      two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_260 did not produce valid node structure");
    }
    #[test]
    fn parser_example_261() {
        let ast = parse_phrases(r#"   > > 1.  one
>>
>>     two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_261 did not produce valid node structure");
    }
    #[test]
    fn parser_example_262() {
        let ast = parse_phrases(r#">>- one
>>
  >  > two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_262 did not produce valid node structure");
    }
    #[test]
    fn parser_example_263() {
        let ast = parse_phrases(r#"-one

2.two
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_263 did not produce valid node structure");
    }
    #[test]
    fn parser_example_264() {
        let ast = parse_phrases(r#"- foo


  bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_264 did not produce valid node structure");
    }
    #[test]
    fn parser_example_265() {
        let ast = parse_phrases(r#"1.  foo

    ```
    bar
    ```

    baz

    > bam
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_265 did not produce valid node structure");
    }
    #[test]
    fn parser_example_266() {
        let ast = parse_phrases(r#"- Foo

      bar


      baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_266 did not produce valid node structure");
    }
    #[test]
    fn parser_example_267() {
        let ast = parse_phrases(r#"123456789. ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_267 did not produce valid node structure");
    }
    #[test]
    fn parser_example_268() {
        let ast = parse_phrases(r#"1234567890. not ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_268 did not produce valid node structure");
    }
    #[test]
    fn parser_example_269() {
        let ast = parse_phrases(r#"0. ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_269 did not produce valid node structure");
    }
    #[test]
    fn parser_example_270() {
        let ast = parse_phrases(r#"003. ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_270 did not produce valid node structure");
    }
    #[test]
    fn parser_example_271() {
        let ast = parse_phrases(r#"-1. not ok
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_271 did not produce valid node structure");
    }
    #[test]
    fn parser_example_272() {
        let ast = parse_phrases(r#"- foo

      bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_272 did not produce valid node structure");
    }
    #[test]
    fn parser_example_273() {
        let ast = parse_phrases(r#"  10.  foo

           bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_273 did not produce valid node structure");
    }
    #[test]
    fn parser_example_274() {
        let ast = parse_phrases(r#"    indented code

paragraph

    more code
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_274 did not produce valid node structure");
    }
    #[test]
    fn parser_example_275() {
        let ast = parse_phrases(r#"1.     indented code

   paragraph

       more code
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_275 did not produce valid node structure");
    }
    #[test]
    fn parser_example_276() {
        let ast = parse_phrases(r#"1.      indented code

   paragraph

       more code
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_276 did not produce valid node structure");
    }
    #[test]
    fn parser_example_277() {
        let ast = parse_phrases(r#"   foo

bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_277 did not produce valid node structure");
    }
    #[test]
    fn parser_example_278() {
        let ast = parse_phrases(r#"-    foo

  bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_278 did not produce valid node structure");
    }
    #[test]
    fn parser_example_279() {
        let ast = parse_phrases(r#"-  foo

   bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_279 did not produce valid node structure");
    }
    #[test]
    fn parser_example_280() {
        let ast = parse_phrases(r#"-
  foo
-
  ```
  bar
  ```
-
      baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_280 did not produce valid node structure");
    }
    #[test]
    fn parser_example_281() {
        let ast = parse_phrases(r#"-   
  foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_281 did not produce valid node structure");
    }
    #[test]
    fn parser_example_282() {
        let ast = parse_phrases(r#"-

  foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_282 did not produce valid node structure");
    }
    #[test]
    fn parser_example_283() {
        let ast = parse_phrases(r#"- foo
-
- bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_283 did not produce valid node structure");
    }
    #[test]
    fn parser_example_284() {
        let ast = parse_phrases(r#"- foo
-   
- bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_284 did not produce valid node structure");
    }
    #[test]
    fn parser_example_285() {
        let ast = parse_phrases(r#"1. foo
2.
3. bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_285 did not produce valid node structure");
    }
    #[test]
    fn parser_example_286() {
        let ast = parse_phrases(r#"*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_286 did not produce valid node structure");
    }
    #[test]
    fn parser_example_287() {
        let ast = parse_phrases(r#"foo
*

foo
1.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_287 did not produce valid node structure");
    }
    #[test]
    fn parser_example_288() {
        let ast = parse_phrases(r#" 1.  A paragraph
     with two lines.

         indented code

     > A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_288 did not produce valid node structure");
    }
    #[test]
    fn parser_example_289() {
        let ast = parse_phrases(r#"  1.  A paragraph
      with two lines.

          indented code

      > A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_289 did not produce valid node structure");
    }
    #[test]
    fn parser_example_290() {
        let ast = parse_phrases(r#"   1.  A paragraph
       with two lines.

           indented code

       > A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_290 did not produce valid node structure");
    }
    #[test]
    fn parser_example_291() {
        let ast = parse_phrases(r#"    1.  A paragraph
        with two lines.

            indented code

        > A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_291 did not produce valid node structure");
    }
    #[test]
    fn parser_example_292() {
        let ast = parse_phrases(r#"  1.  A paragraph
with two lines.

          indented code

      > A block quote.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_292 did not produce valid node structure");
    }
    #[test]
    fn parser_example_293() {
        let ast = parse_phrases(r#"  1.  A paragraph
    with two lines.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_293 did not produce valid node structure");
    }
    #[test]
    fn parser_example_294() {
        let ast = parse_phrases(r#"> 1. > Blockquote
continued here.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_294 did not produce valid node structure");
    }
    #[test]
    fn parser_example_295() {
        let ast = parse_phrases(r#"> 1. > Blockquote
> continued here.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_295 did not produce valid node structure");
    }
    #[test]
    fn parser_example_296() {
        let ast = parse_phrases(r#"- foo
  - bar
    - baz
      - boo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_296 did not produce valid node structure");
    }
    #[test]
    fn parser_example_297() {
        let ast = parse_phrases(r#"- foo
 - bar
  - baz
   - boo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_297 did not produce valid node structure");
    }
    #[test]
    fn parser_example_298() {
        let ast = parse_phrases(r#"10) foo
    - bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_298 did not produce valid node structure");
    }
    #[test]
    fn parser_example_299() {
        let ast = parse_phrases(r#"10) foo
   - bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_299 did not produce valid node structure");
    }
    #[test]
    fn parser_example_300() {
        let ast = parse_phrases(r#"- - foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_300 did not produce valid node structure");
    }
    #[test]
    fn parser_example_301() {
        let ast = parse_phrases(r#"1. - 2. foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_301 did not produce valid node structure");
    }
    #[test]
    fn parser_example_302() {
        let ast = parse_phrases(r#"- # Foo
- Bar
  ---
  baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_302 did not produce valid node structure");
    }
    #[test]
    fn parser_example_303() {
        let ast = parse_phrases(r#"- foo
- bar
+ baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_303 did not produce valid node structure");
    }
    #[test]
    fn parser_example_304() {
        let ast = parse_phrases(r#"1. foo
2. bar
3) baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_304 did not produce valid node structure");
    }
    #[test]
    fn parser_example_305() {
        let ast = parse_phrases(r#"Foo
- bar
- baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_305 did not produce valid node structure");
    }
    #[test]
    fn parser_example_306() {
        let ast = parse_phrases(r#"The number of windows in my house is
14.  The number of doors is 6.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_306 did not produce valid node structure");
    }
    #[test]
    fn parser_example_307() {
        let ast = parse_phrases(r#"The number of windows in my house is
1.  The number of doors is 6.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_307 did not produce valid node structure");
    }
    #[test]
    fn parser_example_308() {
        let ast = parse_phrases(r#"- foo

- bar


- baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_308 did not produce valid node structure");
    }
    #[test]
    fn parser_example_309() {
        let ast = parse_phrases(r#"- foo
  - bar
    - baz


      bim
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_309 did not produce valid node structure");
    }
    #[test]
    fn parser_example_310() {
        let ast = parse_phrases(r#"- foo
- bar

<!-- -->

- baz
- bim
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_310 did not produce valid node structure");
    }
    #[test]
    fn parser_example_311() {
        let ast = parse_phrases(r#"-   foo

    notcode

-   foo

<!-- -->

    code
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_311 did not produce valid node structure");
    }
    #[test]
    fn parser_example_312() {
        let ast = parse_phrases(r#"- a
 - b
  - c
   - d
  - e
 - f
- g
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_312 did not produce valid node structure");
    }
    #[test]
    fn parser_example_313() {
        let ast = parse_phrases(r#"1. a

  2. b

   3. c
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_313 did not produce valid node structure");
    }
    #[test]
    fn parser_example_314() {
        let ast = parse_phrases(r#"- a
 - b
  - c
   - d
    - e
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_314 did not produce valid node structure");
    }
    #[test]
    fn parser_example_315() {
        let ast = parse_phrases(r#"1. a

  2. b

    3. c
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_315 did not produce valid node structure");
    }
    #[test]
    fn parser_example_316() {
        let ast = parse_phrases(r#"- a
- b

- c
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_316 did not produce valid node structure");
    }
    #[test]
    fn parser_example_317() {
        let ast = parse_phrases(r#"* a
*

* c
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_317 did not produce valid node structure");
    }
    #[test]
    fn parser_example_318() {
        let ast = parse_phrases(r#"- a
- b

  c
- d
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_318 did not produce valid node structure");
    }
    #[test]
    fn parser_example_319() {
        let ast = parse_phrases(r#"- a
- b

  [ref]: /url
- d
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_319 did not produce valid node structure");
    }
    #[test]
    fn parser_example_320() {
        let ast = parse_phrases(r#"- a
- ```
  b


  ```
- c
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_320 did not produce valid node structure");
    }
    #[test]
    fn parser_example_321() {
        let ast = parse_phrases(r#"- a
  - b

    c
- d
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_321 did not produce valid node structure");
    }
    #[test]
    fn parser_example_322() {
        let ast = parse_phrases(r#"* a
  > b
  >
* c
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_322 did not produce valid node structure");
    }
    #[test]
    fn parser_example_323() {
        let ast = parse_phrases(r#"- a
  > b
  ```
  c
  ```
- d
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_323 did not produce valid node structure");
    }
    #[test]
    fn parser_example_324() {
        let ast = parse_phrases(r#"- a
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_324 did not produce valid node structure");
    }
    #[test]
    fn parser_example_325() {
        let ast = parse_phrases(r#"- a
  - b
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_325 did not produce valid node structure");
    }
    #[test]
    fn parser_example_326() {
        let ast = parse_phrases(r#"1. ```
   foo
   ```

   bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_326 did not produce valid node structure");
    }
    #[test]
    fn parser_example_327() {
        let ast = parse_phrases(r#"* foo
  * bar

  baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_327 did not produce valid node structure");
    }
    #[test]
    fn parser_example_328() {
        let ast = parse_phrases(r#"- a
  - b
  - c

- d
  - e
  - f
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_328 did not produce valid node structure");
    }
    #[test]
    fn parser_example_329() {
        let ast = parse_phrases(r#"`hi`lo`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_329 did not produce valid node structure");
    }
    #[test]
    fn parser_example_330() {
        let ast = parse_phrases(r#"`foo`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_330 did not produce valid node structure");
    }
    #[test]
    fn parser_example_331() {
        let ast = parse_phrases(r#"`` foo ` bar ``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_331 did not produce valid node structure");
    }
    #[test]
    fn parser_example_332() {
        let ast = parse_phrases(r#"` `` `
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_332 did not produce valid node structure");
    }
    #[test]
    fn parser_example_333() {
        let ast = parse_phrases(r#"`  ``  `
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_333 did not produce valid node structure");
    }
    #[test]
    fn parser_example_334() {
        let ast = parse_phrases(r#"` a`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_334 did not produce valid node structure");
    }
    #[test]
    fn parser_example_335() {
        let ast = parse_phrases(r#"` b `
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_335 did not produce valid node structure");
    }
    #[test]
    fn parser_example_336() {
        let ast = parse_phrases(r#"` `
`  `
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_336 did not produce valid node structure");
    }
    #[test]
    fn parser_example_337() {
        let ast = parse_phrases(r#"``
foo
bar  
baz
``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_337 did not produce valid node structure");
    }
    #[test]
    fn parser_example_338() {
        let ast = parse_phrases(r#"``
foo 
``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_338 did not produce valid node structure");
    }
    #[test]
    fn parser_example_339() {
        let ast = parse_phrases(r#"`foo   bar 
baz`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_339 did not produce valid node structure");
    }
    #[test]
    fn parser_example_340() {
        let ast = parse_phrases(r#"`foo\`bar`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_340 did not produce valid node structure");
    }
    #[test]
    fn parser_example_341() {
        let ast = parse_phrases(r#"``foo`bar``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_341 did not produce valid node structure");
    }
    #[test]
    fn parser_example_342() {
        let ast = parse_phrases(r#"` foo `` bar `
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_342 did not produce valid node structure");
    }
    #[test]
    fn parser_example_343() {
        let ast = parse_phrases(r#"*foo`*`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_343 did not produce valid node structure");
    }
    #[test]
    fn parser_example_344() {
        let ast = parse_phrases(r#"[not a `link](/foo`)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_344 did not produce valid node structure");
    }
    #[test]
    fn parser_example_345() {
        let ast = parse_phrases(r#"`<a href=\"`\">`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_345 did not produce valid node structure");
    }
    #[test]
    fn parser_example_346() {
        let ast = parse_phrases(r#"<a href=\"`\">`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_346 did not produce valid node structure");
    }
    #[test]
    fn parser_example_347() {
        let ast = parse_phrases(r#"`<https://foo.bar.`baz>`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_347 did not produce valid node structure");
    }
    #[test]
    fn parser_example_348() {
        let ast = parse_phrases(r#"<https://foo.bar.`baz>`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_348 did not produce valid node structure");
    }
    #[test]
    fn parser_example_349() {
        let ast = parse_phrases(r#"```foo``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_349 did not produce valid node structure");
    }
    #[test]
    fn parser_example_350() {
        let ast = parse_phrases(r#"`foo
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_350 did not produce valid node structure");
    }
    #[test]
    fn parser_example_351() {
        let ast = parse_phrases(r#"`foo``bar``
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_351 did not produce valid node structure");
    }
    #[test]
    fn parser_example_352() {
        let ast = parse_phrases(r#"*foo bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_352 did not produce valid node structure");
    }
    #[test]
    fn parser_example_353() {
        let ast = parse_phrases(r#"a * foo bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_353 did not produce valid node structure");
    }
    #[test]
    fn parser_example_354() {
        let ast = parse_phrases(r#"a*\"foo\"*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_354 did not produce valid node structure");
    }
    #[test]
    fn parser_example_355() {
        let ast = parse_phrases(r#"* a *
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_355 did not produce valid node structure");
    }
    #[test]
    fn parser_example_356() {
        let ast = parse_phrases(r#"*$*alpha.

*£*bravo.

*€*charlie.

*𞋿*delta.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_356 did not produce valid node structure");
    }
    #[test]
    fn parser_example_357() {
        let ast = parse_phrases(r#"foo*bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_357 did not produce valid node structure");
    }
    #[test]
    fn parser_example_358() {
        let ast = parse_phrases(r#"5*6*78
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_358 did not produce valid node structure");
    }
    #[test]
    fn parser_example_359() {
        let ast = parse_phrases(r#"_foo bar_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_359 did not produce valid node structure");
    }
    #[test]
    fn parser_example_360() {
        let ast = parse_phrases(r#"_ foo bar_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_360 did not produce valid node structure");
    }
    #[test]
    fn parser_example_361() {
        let ast = parse_phrases(r#"a_\"foo\"_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_361 did not produce valid node structure");
    }
    #[test]
    fn parser_example_362() {
        let ast = parse_phrases(r#"foo_bar_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_362 did not produce valid node structure");
    }
    #[test]
    fn parser_example_363() {
        let ast = parse_phrases(r#"5_6_78
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_363 did not produce valid node structure");
    }
    #[test]
    fn parser_example_364() {
        let ast = parse_phrases(r#"пристаням_стремятся_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_364 did not produce valid node structure");
    }
    #[test]
    fn parser_example_365() {
        let ast = parse_phrases(r#"aa_\"bb\"_cc
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_365 did not produce valid node structure");
    }
    #[test]
    fn parser_example_366() {
        let ast = parse_phrases(r#"foo-_(bar)_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_366 did not produce valid node structure");
    }
    #[test]
    fn parser_example_367() {
        let ast = parse_phrases(r#"_foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_367 did not produce valid node structure");
    }
    #[test]
    fn parser_example_368() {
        let ast = parse_phrases(r#"*foo bar *
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_368 did not produce valid node structure");
    }
    #[test]
    fn parser_example_369() {
        let ast = parse_phrases(r#"*foo bar
*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_369 did not produce valid node structure");
    }
    #[test]
    fn parser_example_370() {
        let ast = parse_phrases(r#"*(*foo)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_370 did not produce valid node structure");
    }
    #[test]
    fn parser_example_371() {
        let ast = parse_phrases(r#"*(*foo*)*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_371 did not produce valid node structure");
    }
    #[test]
    fn parser_example_372() {
        let ast = parse_phrases(r#"*foo*bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_372 did not produce valid node structure");
    }
    #[test]
    fn parser_example_373() {
        let ast = parse_phrases(r#"_foo bar _
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_373 did not produce valid node structure");
    }
    #[test]
    fn parser_example_374() {
        let ast = parse_phrases(r#"_(_foo)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_374 did not produce valid node structure");
    }
    #[test]
    fn parser_example_375() {
        let ast = parse_phrases(r#"_(_foo_)_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_375 did not produce valid node structure");
    }
    #[test]
    fn parser_example_376() {
        let ast = parse_phrases(r#"_foo_bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_376 did not produce valid node structure");
    }
    #[test]
    fn parser_example_377() {
        let ast = parse_phrases(r#"_пристаням_стремятся
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_377 did not produce valid node structure");
    }
    #[test]
    fn parser_example_378() {
        let ast = parse_phrases(r#"_foo_bar_baz_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_378 did not produce valid node structure");
    }
    #[test]
    fn parser_example_379() {
        let ast = parse_phrases(r#"_(bar)_.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_379 did not produce valid node structure");
    }
    #[test]
    fn parser_example_380() {
        let ast = parse_phrases(r#"**foo bar**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_380 did not produce valid node structure");
    }
    #[test]
    fn parser_example_381() {
        let ast = parse_phrases(r#"** foo bar**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_381 did not produce valid node structure");
    }
    #[test]
    fn parser_example_382() {
        let ast = parse_phrases(r#"a**\"foo\"**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_382 did not produce valid node structure");
    }
    #[test]
    fn parser_example_383() {
        let ast = parse_phrases(r#"foo**bar**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_383 did not produce valid node structure");
    }
    #[test]
    fn parser_example_384() {
        let ast = parse_phrases(r#"__foo bar__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_384 did not produce valid node structure");
    }
    #[test]
    fn parser_example_385() {
        let ast = parse_phrases(r#"__ foo bar__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_385 did not produce valid node structure");
    }
    #[test]
    fn parser_example_386() {
        let ast = parse_phrases(r#"__
foo bar__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_386 did not produce valid node structure");
    }
    #[test]
    fn parser_example_387() {
        let ast = parse_phrases(r#"a__\"foo\"__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_387 did not produce valid node structure");
    }
    #[test]
    fn parser_example_388() {
        let ast = parse_phrases(r#"foo__bar__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_388 did not produce valid node structure");
    }
    #[test]
    fn parser_example_389() {
        let ast = parse_phrases(r#"5__6__78
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_389 did not produce valid node structure");
    }
    #[test]
    fn parser_example_390() {
        let ast = parse_phrases(r#"пристаням__стремятся__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_390 did not produce valid node structure");
    }
    #[test]
    fn parser_example_391() {
        let ast = parse_phrases(r#"__foo, __bar__, baz__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_391 did not produce valid node structure");
    }
    #[test]
    fn parser_example_392() {
        let ast = parse_phrases(r#"foo-__(bar)__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_392 did not produce valid node structure");
    }
    #[test]
    fn parser_example_393() {
        let ast = parse_phrases(r#"**foo bar **
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_393 did not produce valid node structure");
    }
    #[test]
    fn parser_example_394() {
        let ast = parse_phrases(r#"**(**foo)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_394 did not produce valid node structure");
    }
    #[test]
    fn parser_example_395() {
        let ast = parse_phrases(r#"*(**foo**)*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_395 did not produce valid node structure");
    }
    #[test]
    fn parser_example_396() {
        let ast = parse_phrases(r#"**Gomphocarpus (*Gomphocarpus physocarpus*, syn.
*Asclepias physocarpa*)**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_396 did not produce valid node structure");
    }
    #[test]
    fn parser_example_397() {
        let ast = parse_phrases(r#"**foo \"*bar*\" foo**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_397 did not produce valid node structure");
    }
    #[test]
    fn parser_example_398() {
        let ast = parse_phrases(r#"**foo**bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_398 did not produce valid node structure");
    }
    #[test]
    fn parser_example_399() {
        let ast = parse_phrases(r#"__foo bar __
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_399 did not produce valid node structure");
    }
    #[test]
    fn parser_example_400() {
        let ast = parse_phrases(r#"__(__foo)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_400 did not produce valid node structure");
    }
    #[test]
    fn parser_example_401() {
        let ast = parse_phrases(r#"_(__foo__)_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_401 did not produce valid node structure");
    }
    #[test]
    fn parser_example_402() {
        let ast = parse_phrases(r#"__foo__bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_402 did not produce valid node structure");
    }
    #[test]
    fn parser_example_403() {
        let ast = parse_phrases(r#"__пристаням__стремятся
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_403 did not produce valid node structure");
    }
    #[test]
    fn parser_example_404() {
        let ast = parse_phrases(r#"__foo__bar__baz__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_404 did not produce valid node structure");
    }
    #[test]
    fn parser_example_405() {
        let ast = parse_phrases(r#"__(bar)__.
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_405 did not produce valid node structure");
    }
    #[test]
    fn parser_example_406() {
        let ast = parse_phrases(r#"*foo [bar](/url)*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_406 did not produce valid node structure");
    }
    #[test]
    fn parser_example_407() {
        let ast = parse_phrases(r#"*foo
bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_407 did not produce valid node structure");
    }
    #[test]
    fn parser_example_408() {
        let ast = parse_phrases(r#"_foo __bar__ baz_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_408 did not produce valid node structure");
    }
    #[test]
    fn parser_example_409() {
        let ast = parse_phrases(r#"_foo _bar_ baz_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_409 did not produce valid node structure");
    }
    #[test]
    fn parser_example_410() {
        let ast = parse_phrases(r#"__foo_ bar_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_410 did not produce valid node structure");
    }
    #[test]
    fn parser_example_411() {
        let ast = parse_phrases(r#"*foo *bar**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_411 did not produce valid node structure");
    }
    #[test]
    fn parser_example_412() {
        let ast = parse_phrases(r#"*foo **bar** baz*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_412 did not produce valid node structure");
    }
    #[test]
    fn parser_example_413() {
        let ast = parse_phrases(r#"*foo**bar**baz*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_413 did not produce valid node structure");
    }
    #[test]
    fn parser_example_414() {
        let ast = parse_phrases(r#"*foo**bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_414 did not produce valid node structure");
    }
    #[test]
    fn parser_example_415() {
        let ast = parse_phrases(r#"***foo** bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_415 did not produce valid node structure");
    }
    #[test]
    fn parser_example_416() {
        let ast = parse_phrases(r#"*foo **bar***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_416 did not produce valid node structure");
    }
    #[test]
    fn parser_example_417() {
        let ast = parse_phrases(r#"*foo**bar***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_417 did not produce valid node structure");
    }
    #[test]
    fn parser_example_418() {
        let ast = parse_phrases(r#"foo***bar***baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_418 did not produce valid node structure");
    }
    #[test]
    fn parser_example_419() {
        let ast = parse_phrases(r#"foo******bar*********baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_419 did not produce valid node structure");
    }
    #[test]
    fn parser_example_420() {
        let ast = parse_phrases(r#"*foo **bar *baz* bim** bop*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_420 did not produce valid node structure");
    }
    #[test]
    fn parser_example_421() {
        let ast = parse_phrases(r#"*foo [*bar*](/url)*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_421 did not produce valid node structure");
    }
    #[test]
    fn parser_example_422() {
        let ast = parse_phrases(r#"** is not an empty emphasis
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_422 did not produce valid node structure");
    }
    #[test]
    fn parser_example_423() {
        let ast = parse_phrases(r#"**** is not an empty strong emphasis
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_423 did not produce valid node structure");
    }
    #[test]
    fn parser_example_424() {
        let ast = parse_phrases(r#"**foo [bar](/url)**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_424 did not produce valid node structure");
    }
    #[test]
    fn parser_example_425() {
        let ast = parse_phrases(r#"**foo
bar**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_425 did not produce valid node structure");
    }
    #[test]
    fn parser_example_426() {
        let ast = parse_phrases(r#"__foo _bar_ baz__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_426 did not produce valid node structure");
    }
    #[test]
    fn parser_example_427() {
        let ast = parse_phrases(r#"__foo __bar__ baz__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_427 did not produce valid node structure");
    }
    #[test]
    fn parser_example_428() {
        let ast = parse_phrases(r#"____foo__ bar__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_428 did not produce valid node structure");
    }
    #[test]
    fn parser_example_429() {
        let ast = parse_phrases(r#"**foo **bar****
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_429 did not produce valid node structure");
    }
    #[test]
    fn parser_example_430() {
        let ast = parse_phrases(r#"**foo *bar* baz**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_430 did not produce valid node structure");
    }
    #[test]
    fn parser_example_431() {
        let ast = parse_phrases(r#"**foo*bar*baz**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_431 did not produce valid node structure");
    }
    #[test]
    fn parser_example_432() {
        let ast = parse_phrases(r#"***foo* bar**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_432 did not produce valid node structure");
    }
    #[test]
    fn parser_example_433() {
        let ast = parse_phrases(r#"**foo *bar***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_433 did not produce valid node structure");
    }
    #[test]
    fn parser_example_434() {
        let ast = parse_phrases(r#"**foo *bar **baz**
bim* bop**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_434 did not produce valid node structure");
    }
    #[test]
    fn parser_example_435() {
        let ast = parse_phrases(r#"**foo [*bar*](/url)**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_435 did not produce valid node structure");
    }
    #[test]
    fn parser_example_436() {
        let ast = parse_phrases(r#"__ is not an empty emphasis
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_436 did not produce valid node structure");
    }
    #[test]
    fn parser_example_437() {
        let ast = parse_phrases(r#"____ is not an empty strong emphasis
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_437 did not produce valid node structure");
    }
    #[test]
    fn parser_example_438() {
        let ast = parse_phrases(r#"foo ***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_438 did not produce valid node structure");
    }
    #[test]
    fn parser_example_439() {
        let ast = parse_phrases(r#"foo *\**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_439 did not produce valid node structure");
    }
    #[test]
    fn parser_example_440() {
        let ast = parse_phrases(r#"foo *_*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_440 did not produce valid node structure");
    }
    #[test]
    fn parser_example_441() {
        let ast = parse_phrases(r#"foo *****
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_441 did not produce valid node structure");
    }
    #[test]
    fn parser_example_442() {
        let ast = parse_phrases(r#"foo **\***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_442 did not produce valid node structure");
    }
    #[test]
    fn parser_example_443() {
        let ast = parse_phrases(r#"foo **_**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_443 did not produce valid node structure");
    }
    #[test]
    fn parser_example_444() {
        let ast = parse_phrases(r#"**foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_444 did not produce valid node structure");
    }
    #[test]
    fn parser_example_445() {
        let ast = parse_phrases(r#"*foo**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_445 did not produce valid node structure");
    }
    #[test]
    fn parser_example_446() {
        let ast = parse_phrases(r#"***foo**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_446 did not produce valid node structure");
    }
    #[test]
    fn parser_example_447() {
        let ast = parse_phrases(r#"****foo*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_447 did not produce valid node structure");
    }
    #[test]
    fn parser_example_448() {
        let ast = parse_phrases(r#"**foo***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_448 did not produce valid node structure");
    }
    #[test]
    fn parser_example_449() {
        let ast = parse_phrases(r#"*foo****
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_449 did not produce valid node structure");
    }
    #[test]
    fn parser_example_450() {
        let ast = parse_phrases(r#"foo ___
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_450 did not produce valid node structure");
    }
    #[test]
    fn parser_example_451() {
        let ast = parse_phrases(r#"foo _\__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_451 did not produce valid node structure");
    }
    #[test]
    fn parser_example_452() {
        let ast = parse_phrases(r#"foo _*_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_452 did not produce valid node structure");
    }
    #[test]
    fn parser_example_453() {
        let ast = parse_phrases(r#"foo _____
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_453 did not produce valid node structure");
    }
    #[test]
    fn parser_example_454() {
        let ast = parse_phrases(r#"foo __\___
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_454 did not produce valid node structure");
    }
    #[test]
    fn parser_example_455() {
        let ast = parse_phrases(r#"foo __*__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_455 did not produce valid node structure");
    }
    #[test]
    fn parser_example_456() {
        let ast = parse_phrases(r#"__foo_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_456 did not produce valid node structure");
    }
    #[test]
    fn parser_example_457() {
        let ast = parse_phrases(r#"_foo__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_457 did not produce valid node structure");
    }
    #[test]
    fn parser_example_458() {
        let ast = parse_phrases(r#"___foo__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_458 did not produce valid node structure");
    }
    #[test]
    fn parser_example_459() {
        let ast = parse_phrases(r#"____foo_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_459 did not produce valid node structure");
    }
    #[test]
    fn parser_example_460() {
        let ast = parse_phrases(r#"__foo___
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_460 did not produce valid node structure");
    }
    #[test]
    fn parser_example_461() {
        let ast = parse_phrases(r#"_foo____
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_461 did not produce valid node structure");
    }
    #[test]
    fn parser_example_462() {
        let ast = parse_phrases(r#"**foo**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_462 did not produce valid node structure");
    }
    #[test]
    fn parser_example_463() {
        let ast = parse_phrases(r#"*_foo_*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_463 did not produce valid node structure");
    }
    #[test]
    fn parser_example_464() {
        let ast = parse_phrases(r#"__foo__
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_464 did not produce valid node structure");
    }
    #[test]
    fn parser_example_465() {
        let ast = parse_phrases(r#"_*foo*_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_465 did not produce valid node structure");
    }
    #[test]
    fn parser_example_466() {
        let ast = parse_phrases(r#"****foo****
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_466 did not produce valid node structure");
    }
    #[test]
    fn parser_example_467() {
        let ast = parse_phrases(r#"____foo____
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_467 did not produce valid node structure");
    }
    #[test]
    fn parser_example_468() {
        let ast = parse_phrases(r#"******foo******
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_468 did not produce valid node structure");
    }
    #[test]
    fn parser_example_469() {
        let ast = parse_phrases(r#"***foo***
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_469 did not produce valid node structure");
    }
    #[test]
    fn parser_example_470() {
        let ast = parse_phrases(r#"_____foo_____
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_470 did not produce valid node structure");
    }
    #[test]
    fn parser_example_471() {
        let ast = parse_phrases(r#"*foo _bar* baz_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_471 did not produce valid node structure");
    }
    #[test]
    fn parser_example_472() {
        let ast = parse_phrases(r#"*foo __bar *baz bim__ bam*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_472 did not produce valid node structure");
    }
    #[test]
    fn parser_example_473() {
        let ast = parse_phrases(r#"**foo **bar baz**
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_473 did not produce valid node structure");
    }
    #[test]
    fn parser_example_474() {
        let ast = parse_phrases(r#"*foo *bar baz*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_474 did not produce valid node structure");
    }
    #[test]
    fn parser_example_475() {
        let ast = parse_phrases(r#"*[bar*](/url)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_475 did not produce valid node structure");
    }
    #[test]
    fn parser_example_476() {
        let ast = parse_phrases(r#"_foo [bar_](/url)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_476 did not produce valid node structure");
    }
    #[test]
    fn parser_example_477() {
        let ast = parse_phrases(r#"*<img src=\"foo\" title=\"*\"/>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_477 did not produce valid node structure");
    }
    #[test]
    fn parser_example_478() {
        let ast = parse_phrases(r#"**<a href=\"**\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_478 did not produce valid node structure");
    }
    #[test]
    fn parser_example_479() {
        let ast = parse_phrases(r#"__<a href=\"__\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_479 did not produce valid node structure");
    }
    #[test]
    fn parser_example_480() {
        let ast = parse_phrases(r#"*a `*`*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_480 did not produce valid node structure");
    }
    #[test]
    fn parser_example_481() {
        let ast = parse_phrases(r#"_a `_`_
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_481 did not produce valid node structure");
    }
    #[test]
    fn parser_example_482() {
        let ast = parse_phrases(r#"**a<https://foo.bar/?q=**>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_482 did not produce valid node structure");
    }
    #[test]
    fn parser_example_483() {
        let ast = parse_phrases(r#"__a<https://foo.bar/?q=__>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_483 did not produce valid node structure");
    }
    #[test]
    fn parser_example_484() {
        let ast = parse_phrases(r#"[link](/uri \"title\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_484 did not produce valid node structure");
    }
    #[test]
    fn parser_example_485() {
        let ast = parse_phrases(r#"[link](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_485 did not produce valid node structure");
    }
    #[test]
    fn parser_example_486() {
        let ast = parse_phrases(r#"[](./target.md)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_486 did not produce valid node structure");
    }
    #[test]
    fn parser_example_487() {
        let ast = parse_phrases(r#"[link]()
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_487 did not produce valid node structure");
    }
    #[test]
    fn parser_example_488() {
        let ast = parse_phrases(r#"[link](<>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_488 did not produce valid node structure");
    }
    #[test]
    fn parser_example_489() {
        let ast = parse_phrases(r#"[]()
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_489 did not produce valid node structure");
    }
    #[test]
    fn parser_example_490() {
        let ast = parse_phrases(r#"[link](/my uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_490 did not produce valid node structure");
    }
    #[test]
    fn parser_example_491() {
        let ast = parse_phrases(r#"[link](</my uri>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_491 did not produce valid node structure");
    }
    #[test]
    fn parser_example_492() {
        let ast = parse_phrases(r#"[link](foo
bar)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_492 did not produce valid node structure");
    }
    #[test]
    fn parser_example_493() {
        let ast = parse_phrases(r#"[link](<foo
bar>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_493 did not produce valid node structure");
    }
    #[test]
    fn parser_example_494() {
        let ast = parse_phrases(r#"[a](<b)c>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_494 did not produce valid node structure");
    }
    #[test]
    fn parser_example_495() {
        let ast = parse_phrases(r#"[link](<foo\>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_495 did not produce valid node structure");
    }
    #[test]
    fn parser_example_496() {
        let ast = parse_phrases(r#"[a](<b)c
[a](<b)c>
[a](<b>c)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_496 did not produce valid node structure");
    }
    #[test]
    fn parser_example_497() {
        let ast = parse_phrases(r#"[link](\(foo\))
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_497 did not produce valid node structure");
    }
    #[test]
    fn parser_example_498() {
        let ast = parse_phrases(r#"[link](foo(and(bar)))
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_498 did not produce valid node structure");
    }
    #[test]
    fn parser_example_499() {
        let ast = parse_phrases(r#"[link](foo(and(bar))
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_499 did not produce valid node structure");
    }
    #[test]
    fn parser_example_500() {
        let ast = parse_phrases(r#"[link](foo\(and\(bar\))
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_500 did not produce valid node structure");
    }
    #[test]
    fn parser_example_501() {
        let ast = parse_phrases(r#"[link](<foo(and(bar)>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_501 did not produce valid node structure");
    }
    #[test]
    fn parser_example_502() {
        let ast = parse_phrases(r#"[link](foo\)\:)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_502 did not produce valid node structure");
    }
    #[test]
    fn parser_example_503() {
        let ast = parse_phrases(r#"[link](#fragment)

[link](https://example.com#fragment)

[link](https://example.com?foo=3#frag)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_503 did not produce valid node structure");
    }
    #[test]
    fn parser_example_504() {
        let ast = parse_phrases(r#"[link](foo\bar)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_504 did not produce valid node structure");
    }
    #[test]
    fn parser_example_505() {
        let ast = parse_phrases(r#"[link](foo%20b&auml;)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_505 did not produce valid node structure");
    }
    #[test]
    fn parser_example_506() {
        let ast = parse_phrases(r#"[link](\"title\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_506 did not produce valid node structure");
    }
    #[test]
    fn parser_example_507() {
        let ast = parse_phrases(r#"[link](/url \"title\")
[link](/url 'title')
[link](/url (title))
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_507 did not produce valid node structure");
    }
    #[test]
    fn parser_example_508() {
        let ast = parse_phrases(r#"[link](/url \"title \\"&quot;\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_508 did not produce valid node structure");
    }
    #[test]
    fn parser_example_509() {
        let ast = parse_phrases(r#"[link](/url \"title\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_509 did not produce valid node structure");
    }
    #[test]
    fn parser_example_510() {
        let ast = parse_phrases(r#"[link](/url \"title \"and\" title\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_510 did not produce valid node structure");
    }
    #[test]
    fn parser_example_511() {
        let ast = parse_phrases(r#"[link](/url 'title \"and\" title')
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_511 did not produce valid node structure");
    }
    #[test]
    fn parser_example_512() {
        let ast = parse_phrases(r#"[link](   /uri
  \"title\"  )
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_512 did not produce valid node structure");
    }
    #[test]
    fn parser_example_513() {
        let ast = parse_phrases(r#"[link] (/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_513 did not produce valid node structure");
    }
    #[test]
    fn parser_example_514() {
        let ast = parse_phrases(r#"[link [foo [bar]]](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_514 did not produce valid node structure");
    }
    #[test]
    fn parser_example_515() {
        let ast = parse_phrases(r#"[link] bar](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_515 did not produce valid node structure");
    }
    #[test]
    fn parser_example_516() {
        let ast = parse_phrases(r#"[link [bar](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_516 did not produce valid node structure");
    }
    #[test]
    fn parser_example_517() {
        let ast = parse_phrases(r#"[link \[bar](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_517 did not produce valid node structure");
    }
    #[test]
    fn parser_example_518() {
        let ast = parse_phrases(r#"[link *foo **bar** `#`*](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_518 did not produce valid node structure");
    }
    #[test]
    fn parser_example_519() {
        let ast = parse_phrases(r#"[![moon](moon.jpg)](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_519 did not produce valid node structure");
    }
    #[test]
    fn parser_example_520() {
        let ast = parse_phrases(r#"[foo [bar](/uri)](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_520 did not produce valid node structure");
    }
    #[test]
    fn parser_example_521() {
        let ast = parse_phrases(r#"[foo *[bar [baz](/uri)](/uri)*](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_521 did not produce valid node structure");
    }
    #[test]
    fn parser_example_522() {
        let ast = parse_phrases(r#"![[[foo](uri1)](uri2)](uri3)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_522 did not produce valid node structure");
    }
    #[test]
    fn parser_example_523() {
        let ast = parse_phrases(r#"*[foo*](/uri)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_523 did not produce valid node structure");
    }
    #[test]
    fn parser_example_524() {
        let ast = parse_phrases(r#"[foo *bar](baz*)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_524 did not produce valid node structure");
    }
    #[test]
    fn parser_example_525() {
        let ast = parse_phrases(r#"*foo [bar* baz]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_525 did not produce valid node structure");
    }
    #[test]
    fn parser_example_526() {
        let ast = parse_phrases(r#"[foo <bar attr=\"](baz)\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_526 did not produce valid node structure");
    }
    #[test]
    fn parser_example_527() {
        let ast = parse_phrases(r#"[foo`](/uri)`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_527 did not produce valid node structure");
    }
    #[test]
    fn parser_example_528() {
        let ast = parse_phrases(r#"[foo<https://example.com/?search=](uri)>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_528 did not produce valid node structure");
    }
    #[test]
    fn parser_example_529() {
        let ast = parse_phrases(r#"[foo][bar]

[bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_529 did not produce valid node structure");
    }
    #[test]
    fn parser_example_530() {
        let ast = parse_phrases(r#"[link [foo [bar]]][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_530 did not produce valid node structure");
    }
    #[test]
    fn parser_example_531() {
        let ast = parse_phrases(r#"[link \[bar][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_531 did not produce valid node structure");
    }
    #[test]
    fn parser_example_532() {
        let ast = parse_phrases(r#"[link *foo **bar** `#`*][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_532 did not produce valid node structure");
    }
    #[test]
    fn parser_example_533() {
        let ast = parse_phrases(r#"[![moon](moon.jpg)][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_533 did not produce valid node structure");
    }
    #[test]
    fn parser_example_534() {
        let ast = parse_phrases(r#"[foo [bar](/uri)][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_534 did not produce valid node structure");
    }
    #[test]
    fn parser_example_535() {
        let ast = parse_phrases(r#"[foo *bar [baz][ref]*][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_535 did not produce valid node structure");
    }
    #[test]
    fn parser_example_536() {
        let ast = parse_phrases(r#"*[foo*][ref]

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_536 did not produce valid node structure");
    }
    #[test]
    fn parser_example_537() {
        let ast = parse_phrases(r#"[foo *bar][ref]*

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_537 did not produce valid node structure");
    }
    #[test]
    fn parser_example_538() {
        let ast = parse_phrases(r#"[foo <bar attr=\"][ref]\">

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_538 did not produce valid node structure");
    }
    #[test]
    fn parser_example_539() {
        let ast = parse_phrases(r#"[foo`][ref]`

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_539 did not produce valid node structure");
    }
    #[test]
    fn parser_example_540() {
        let ast = parse_phrases(r#"[foo<https://example.com/?search=][ref]>

[ref]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_540 did not produce valid node structure");
    }
    #[test]
    fn parser_example_541() {
        let ast = parse_phrases(r#"[foo][BaR]

[bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_541 did not produce valid node structure");
    }
    #[test]
    fn parser_example_542() {
        let ast = parse_phrases(r#"[ẞ]

[SS]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_542 did not produce valid node structure");
    }
    #[test]
    fn parser_example_543() {
        let ast = parse_phrases(r#"[Foo
  bar]: /url

[Baz][Foo bar]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_543 did not produce valid node structure");
    }
    #[test]
    fn parser_example_544() {
        let ast = parse_phrases(r#"[foo] [bar]

[bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_544 did not produce valid node structure");
    }
    #[test]
    fn parser_example_545() {
        let ast = parse_phrases(r#"[foo]
[bar]

[bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_545 did not produce valid node structure");
    }
    #[test]
    fn parser_example_546() {
        let ast = parse_phrases(r#"[foo]: /url1

[foo]: /url2

[bar][foo]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_546 did not produce valid node structure");
    }
    #[test]
    fn parser_example_547() {
        let ast = parse_phrases(r#"[bar][foo\!]

[foo!]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_547 did not produce valid node structure");
    }
    #[test]
    fn parser_example_548() {
        let ast = parse_phrases(r#"[foo][ref[]

[ref[]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_548 did not produce valid node structure");
    }
    #[test]
    fn parser_example_549() {
        let ast = parse_phrases(r#"[foo][ref[bar]]

[ref[bar]]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_549 did not produce valid node structure");
    }
    #[test]
    fn parser_example_550() {
        let ast = parse_phrases(r#"[[[foo]]]

[[[foo]]]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_550 did not produce valid node structure");
    }
    #[test]
    fn parser_example_551() {
        let ast = parse_phrases(r#"[foo][ref\[]

[ref\[]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_551 did not produce valid node structure");
    }
    #[test]
    fn parser_example_552() {
        let ast = parse_phrases(r#"[bar\\]: /uri

[bar\\]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_552 did not produce valid node structure");
    }
    #[test]
    fn parser_example_553() {
        let ast = parse_phrases(r#"[]

[]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_553 did not produce valid node structure");
    }
    #[test]
    fn parser_example_554() {
        let ast = parse_phrases(r#"[
 ]

[
 ]: /uri
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_554 did not produce valid node structure");
    }
    #[test]
    fn parser_example_555() {
        let ast = parse_phrases(r#"[foo][]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_555 did not produce valid node structure");
    }
    #[test]
    fn parser_example_556() {
        let ast = parse_phrases(r#"[*foo* bar][]

[*foo* bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_556 did not produce valid node structure");
    }
    #[test]
    fn parser_example_557() {
        let ast = parse_phrases(r#"[Foo][]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_557 did not produce valid node structure");
    }
    #[test]
    fn parser_example_558() {
        let ast = parse_phrases(r#"[foo] 
[]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_558 did not produce valid node structure");
    }
    #[test]
    fn parser_example_559() {
        let ast = parse_phrases(r#"[foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_559 did not produce valid node structure");
    }
    #[test]
    fn parser_example_560() {
        let ast = parse_phrases(r#"[*foo* bar]

[*foo* bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_560 did not produce valid node structure");
    }
    #[test]
    fn parser_example_561() {
        let ast = parse_phrases(r#"[[*foo* bar]]

[*foo* bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_561 did not produce valid node structure");
    }
    #[test]
    fn parser_example_562() {
        let ast = parse_phrases(r#"[[bar [foo]

[foo]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_562 did not produce valid node structure");
    }
    #[test]
    fn parser_example_563() {
        let ast = parse_phrases(r#"[Foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_563 did not produce valid node structure");
    }
    #[test]
    fn parser_example_564() {
        let ast = parse_phrases(r#"[foo] bar

[foo]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_564 did not produce valid node structure");
    }
    #[test]
    fn parser_example_565() {
        let ast = parse_phrases(r#"\[foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_565 did not produce valid node structure");
    }
    #[test]
    fn parser_example_566() {
        let ast = parse_phrases(r#"[foo*]: /url

*[foo*]
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_566 did not produce valid node structure");
    }
    #[test]
    fn parser_example_567() {
        let ast = parse_phrases(r#"[foo][bar]

[foo]: /url1
[bar]: /url2
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_567 did not produce valid node structure");
    }
    #[test]
    fn parser_example_568() {
        let ast = parse_phrases(r#"[foo][]

[foo]: /url1
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_568 did not produce valid node structure");
    }
    #[test]
    fn parser_example_569() {
        let ast = parse_phrases(r#"[foo]()

[foo]: /url1
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_569 did not produce valid node structure");
    }
    #[test]
    fn parser_example_570() {
        let ast = parse_phrases(r#"[foo](not a link)

[foo]: /url1
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_570 did not produce valid node structure");
    }
    #[test]
    fn parser_example_571() {
        let ast = parse_phrases(r#"[foo][bar][baz]

[baz]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_571 did not produce valid node structure");
    }
    #[test]
    fn parser_example_572() {
        let ast = parse_phrases(r#"[foo][bar][baz]

[baz]: /url1
[bar]: /url2
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_572 did not produce valid node structure");
    }
    #[test]
    fn parser_example_573() {
        let ast = parse_phrases(r#"[foo][bar][baz]

[baz]: /url1
[foo]: /url2
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_573 did not produce valid node structure");
    }
    #[test]
    fn parser_example_574() {
        let ast = parse_phrases(r#"![foo](/url \"title\")
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_574 did not produce valid node structure");
    }
    #[test]
    fn parser_example_575() {
        let ast = parse_phrases(r#"![foo *bar*]

[foo *bar*]: train.jpg \"train & tracks\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_575 did not produce valid node structure");
    }
    #[test]
    fn parser_example_576() {
        let ast = parse_phrases(r#"![foo ![bar](/url)](/url2)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_576 did not produce valid node structure");
    }
    #[test]
    fn parser_example_577() {
        let ast = parse_phrases(r#"![foo [bar](/url)](/url2)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_577 did not produce valid node structure");
    }
    #[test]
    fn parser_example_578() {
        let ast = parse_phrases(r#"![foo *bar*][]

[foo *bar*]: train.jpg \"train & tracks\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_578 did not produce valid node structure");
    }
    #[test]
    fn parser_example_579() {
        let ast = parse_phrases(r#"![foo *bar*][foobar]

[FOOBAR]: train.jpg \"train & tracks\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_579 did not produce valid node structure");
    }
    #[test]
    fn parser_example_580() {
        let ast = parse_phrases(r#"![foo](train.jpg)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_580 did not produce valid node structure");
    }
    #[test]
    fn parser_example_581() {
        let ast = parse_phrases(r#"My ![foo bar](/path/to/train.jpg  \"title\"   )
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_581 did not produce valid node structure");
    }
    #[test]
    fn parser_example_582() {
        let ast = parse_phrases(r#"![foo](<url>)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_582 did not produce valid node structure");
    }
    #[test]
    fn parser_example_583() {
        let ast = parse_phrases(r#"![](/url)
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_583 did not produce valid node structure");
    }
    #[test]
    fn parser_example_584() {
        let ast = parse_phrases(r#"![foo][bar]

[bar]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_584 did not produce valid node structure");
    }
    #[test]
    fn parser_example_585() {
        let ast = parse_phrases(r#"![foo][bar]

[BAR]: /url
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_585 did not produce valid node structure");
    }
    #[test]
    fn parser_example_586() {
        let ast = parse_phrases(r#"![foo][]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_586 did not produce valid node structure");
    }
    #[test]
    fn parser_example_587() {
        let ast = parse_phrases(r#"![*foo* bar][]

[*foo* bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_587 did not produce valid node structure");
    }
    #[test]
    fn parser_example_588() {
        let ast = parse_phrases(r#"![Foo][]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_588 did not produce valid node structure");
    }
    #[test]
    fn parser_example_589() {
        let ast = parse_phrases(r#"![foo] 
[]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_589 did not produce valid node structure");
    }
    #[test]
    fn parser_example_590() {
        let ast = parse_phrases(r#"![foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_590 did not produce valid node structure");
    }
    #[test]
    fn parser_example_591() {
        let ast = parse_phrases(r#"![*foo* bar]

[*foo* bar]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_591 did not produce valid node structure");
    }
    #[test]
    fn parser_example_592() {
        let ast = parse_phrases(r#"![[foo]]

[[foo]]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_592 did not produce valid node structure");
    }
    #[test]
    fn parser_example_593() {
        let ast = parse_phrases(r#"![Foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_593 did not produce valid node structure");
    }
    #[test]
    fn parser_example_594() {
        let ast = parse_phrases(r#"!\[foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_594 did not produce valid node structure");
    }
    #[test]
    fn parser_example_595() {
        let ast = parse_phrases(r#"\![foo]

[foo]: /url \"title\"
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_595 did not produce valid node structure");
    }
    #[test]
    fn parser_example_596() {
        let ast = parse_phrases(r#"<http://foo.bar.baz>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_596 did not produce valid node structure");
    }
    #[test]
    fn parser_example_597() {
        let ast = parse_phrases(r#"<https://foo.bar.baz/test?q=hello&id=22&boolean>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_597 did not produce valid node structure");
    }
    #[test]
    fn parser_example_598() {
        let ast = parse_phrases(r#"<irc://foo.bar:2233/baz>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_598 did not produce valid node structure");
    }
    #[test]
    fn parser_example_599() {
        let ast = parse_phrases(r#"<MAILTO:FOO@BAR.BAZ>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_599 did not produce valid node structure");
    }
    #[test]
    fn parser_example_600() {
        let ast = parse_phrases(r#"<a+b+c:d>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_600 did not produce valid node structure");
    }
    #[test]
    fn parser_example_601() {
        let ast = parse_phrases(r#"<made-up-scheme://foo,bar>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_601 did not produce valid node structure");
    }
    #[test]
    fn parser_example_602() {
        let ast = parse_phrases(r#"<https://../>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_602 did not produce valid node structure");
    }
    #[test]
    fn parser_example_603() {
        let ast = parse_phrases(r#"<localhost:5001/foo>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_603 did not produce valid node structure");
    }
    #[test]
    fn parser_example_604() {
        let ast = parse_phrases(r#"<https://foo.bar/baz bim>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_604 did not produce valid node structure");
    }
    #[test]
    fn parser_example_605() {
        let ast = parse_phrases(r#"<https://example.com/\[\>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_605 did not produce valid node structure");
    }
    #[test]
    fn parser_example_606() {
        let ast = parse_phrases(r#"<foo@bar.example.com>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_606 did not produce valid node structure");
    }
    #[test]
    fn parser_example_607() {
        let ast = parse_phrases(r#"<foo+special@Bar.baz-bar0.com>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_607 did not produce valid node structure");
    }
    #[test]
    fn parser_example_608() {
        let ast = parse_phrases(r#"<foo\+@bar.example.com>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_608 did not produce valid node structure");
    }
    #[test]
    fn parser_example_609() {
        let ast = parse_phrases(r#"<>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_609 did not produce valid node structure");
    }
    #[test]
    fn parser_example_610() {
        let ast = parse_phrases(r#"< https://foo.bar >
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_610 did not produce valid node structure");
    }
    #[test]
    fn parser_example_611() {
        let ast = parse_phrases(r#"<m:abc>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_611 did not produce valid node structure");
    }
    #[test]
    fn parser_example_612() {
        let ast = parse_phrases(r#"<foo.bar.baz>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_612 did not produce valid node structure");
    }
    #[test]
    fn parser_example_613() {
        let ast = parse_phrases(r#"https://example.com
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_613 did not produce valid node structure");
    }
    #[test]
    fn parser_example_614() {
        let ast = parse_phrases(r#"foo@bar.example.com
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_614 did not produce valid node structure");
    }
    #[test]
    fn parser_example_615() {
        let ast = parse_phrases(r#"<a><bab><c2c>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_615 did not produce valid node structure");
    }
    #[test]
    fn parser_example_616() {
        let ast = parse_phrases(r#"<a/><b2/>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_616 did not produce valid node structure");
    }
    #[test]
    fn parser_example_617() {
        let ast = parse_phrases(r#"<a  /><b2
data=\"foo\" >
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_617 did not produce valid node structure");
    }
    #[test]
    fn parser_example_618() {
        let ast = parse_phrases(r#"<a foo=\"bar\" bam = 'baz <em>\"</em>'
_boolean zoop:33=zoop:33 />
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_618 did not produce valid node structure");
    }
    #[test]
    fn parser_example_619() {
        let ast = parse_phrases(r#"Foo <responsive-image src=\"foo.jpg\" />
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_619 did not produce valid node structure");
    }
    #[test]
    fn parser_example_620() {
        let ast = parse_phrases(r#"<33> <__>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_620 did not produce valid node structure");
    }
    #[test]
    fn parser_example_621() {
        let ast = parse_phrases(r#"<a h*#ref=\"hi\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_621 did not produce valid node structure");
    }
    #[test]
    fn parser_example_622() {
        let ast = parse_phrases(r#"<a href=\"hi'> <a href=hi'>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_622 did not produce valid node structure");
    }
    #[test]
    fn parser_example_623() {
        let ast = parse_phrases(r#"< a><
foo><bar/ >
<foo bar=baz
bim!bop />
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_623 did not produce valid node structure");
    }
    #[test]
    fn parser_example_624() {
        let ast = parse_phrases(r#"<a href='bar'title=title>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_624 did not produce valid node structure");
    }
    #[test]
    fn parser_example_625() {
        let ast = parse_phrases(r#"</a></foo >
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_625 did not produce valid node structure");
    }
    #[test]
    fn parser_example_626() {
        let ast = parse_phrases(r#"</a href=\"foo\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_626 did not produce valid node structure");
    }
    #[test]
    fn parser_example_627() {
        let ast = parse_phrases(r#"foo <!-- this is a --
comment - with hyphens -->
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_627 did not produce valid node structure");
    }
    #[test]
    fn parser_example_628() {
        let ast = parse_phrases(r#"foo <!--> foo -->

foo <!---> foo -->
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_628 did not produce valid node structure");
    }
    #[test]
    fn parser_example_629() {
        let ast = parse_phrases(r#"foo <?php echo $a; ?>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_629 did not produce valid node structure");
    }
    #[test]
    fn parser_example_630() {
        let ast = parse_phrases(r#"foo <!ELEMENT br EMPTY>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_630 did not produce valid node structure");
    }
    #[test]
    fn parser_example_631() {
        let ast = parse_phrases(r#"foo <![CDATA[>&<]]>
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_631 did not produce valid node structure");
    }
    #[test]
    fn parser_example_632() {
        let ast = parse_phrases(r#"foo <a href=\"&ouml;\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_632 did not produce valid node structure");
    }
    #[test]
    fn parser_example_633() {
        let ast = parse_phrases(r#"foo <a href=\"\*\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_633 did not produce valid node structure");
    }
    #[test]
    fn parser_example_634() {
        let ast = parse_phrases(r#"<a href=\"\\"\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_634 did not produce valid node structure");
    }
    #[test]
    fn parser_example_635() {
        let ast = parse_phrases(r#"<a
> quoted text
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_635 did not produce valid node structure");
    }
    #[test]
    fn parser_example_636() {
        let ast = parse_phrases(r#"foo  
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_636 did not produce valid node structure");
    }
    #[test]
    fn parser_example_637() {
        let ast = parse_phrases(r#"foo\
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_637 did not produce valid node structure");
    }
    #[test]
    fn parser_example_638() {
        let ast = parse_phrases(r#"foo       
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_638 did not produce valid node structure");
    }
    #[test]
    fn parser_example_639() {
        let ast = parse_phrases(r#"foo  
     bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_639 did not produce valid node structure");
    }
    #[test]
    fn parser_example_640() {
        let ast = parse_phrases(r#"foo\
     bar
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_640 did not produce valid node structure");
    }
    #[test]
    fn parser_example_641() {
        let ast = parse_phrases(r#"*foo  
bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_641 did not produce valid node structure");
    }
    #[test]
    fn parser_example_642() {
        let ast = parse_phrases(r#"*foo\
bar*
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_642 did not produce valid node structure");
    }
    #[test]
    fn parser_example_643() {
        let ast = parse_phrases(r#"`code  
span`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_643 did not produce valid node structure");
    }
    #[test]
    fn parser_example_644() {
        let ast = parse_phrases(r#"`code\
span`
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_644 did not produce valid node structure");
    }
    #[test]
    fn parser_example_645() {
        let ast = parse_phrases(r#"<a href=\"foo  
bar\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_645 did not produce valid node structure");
    }
    #[test]
    fn parser_example_646() {
        let ast = parse_phrases(r#"<a href=\"foo\
bar\">
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_646 did not produce valid node structure");
    }
    #[test]
    fn parser_example_647() {
        let ast = parse_phrases(r#"foo\
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_647 did not produce valid node structure");
    }
    #[test]
    fn parser_example_648() {
        let ast = parse_phrases(r#"foo  
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_648 did not produce valid node structure");
    }
    #[test]
    fn parser_example_649() {
        let ast = parse_phrases(r#"### foo\
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_649 did not produce valid node structure");
    }
    #[test]
    fn parser_example_650() {
        let ast = parse_phrases(r#"### foo  
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_650 did not produce valid node structure");
    }
    #[test]
    fn parser_example_651() {
        let ast = parse_phrases(r#"foo
baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_651 did not produce valid node structure");
    }
    #[test]
    fn parser_example_652() {
        let ast = parse_phrases(r#"foo 
 baz
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_652 did not produce valid node structure");
    }
    #[test]
    fn parser_example_653() {
        let ast = parse_phrases(r#"hello $.;'there
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_653 did not produce valid node structure");
    }
    #[test]
    fn parser_example_654() {
        let ast = parse_phrases(r#"Foo χρῆν
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_654 did not produce valid node structure");
    }
    #[test]
    fn parser_example_655() {
        let ast = parse_phrases(r#"Multiple     spaces
"#);
        // Check for at least one non-text node
        let valid = ast.iter().any(|n| match n {
            InlineNode::Emphasis { .. } | InlineNode::Strong { .. } | InlineNode::Link { .. } | InlineNode::Image { .. } | InlineNode::Code { .. } | InlineNode::Math { .. } | InlineNode::Html { .. } | InlineNode::Entity { .. } | InlineNode::AttributeBlock { .. } | InlineNode::Strikethrough { .. } | InlineNode::TaskListItem { .. } => true,
            _ => false,
        });
        assert!(valid, "parser_example_655 did not produce valid node structure");
    }
}
