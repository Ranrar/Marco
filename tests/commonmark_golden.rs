// This file is generated by build.rs
use marco::logic::core::block::parser::parse_blocks;
use marco::logic::ast::blocks_and_inlines::{Block, ContainerBlock};
use marco::logic::renderer::html_render::HtmlRenderer;
use marco::logic::core::block::blocknode_to_block;
#[cfg(test)]
mod golden_html_spec_generated {
    use super::*;
    #[test]
    fn golden_html_example_1() {
        let block_nodes = parse_blocks(r#"	foo	baz		bim
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo	baz		bim
</code></pre>
"###.trim(), "HTML render mismatch for example 1");
    }
    #[test]
    fn golden_html_example_2() {
        let block_nodes = parse_blocks(r#"  	foo	baz		bim
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo	baz		bim
</code></pre>
"###.trim(), "HTML render mismatch for example 2");
    }
    #[test]
    fn golden_html_example_3() {
        let block_nodes = parse_blocks(r#"    a	a
    ὐ	a
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>a	a
ὐ	a
</code></pre>
"###.trim(), "HTML render mismatch for example 3");
    }
    #[test]
    fn golden_html_example_4() {
        let block_nodes = parse_blocks(r#"  - foo

	bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 4");
    }
    #[test]
    fn golden_html_example_5() {
        let block_nodes = parse_blocks(r#"- foo

		bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<pre><code>  bar
</code></pre>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 5");
    }
    #[test]
    fn golden_html_example_6() {
        let block_nodes = parse_blocks(r#">		foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<pre><code>  foo
</code></pre>
</blockquote>
"###.trim(), "HTML render mismatch for example 6");
    }
    #[test]
    fn golden_html_example_7() {
        let block_nodes = parse_blocks(r#"-		foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<pre><code>  foo
</code></pre>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 7");
    }
    #[test]
    fn golden_html_example_8() {
        let block_nodes = parse_blocks(r#"    foo
	bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo
bar
</code></pre>
"###.trim(), "HTML render mismatch for example 8");
    }
    #[test]
    fn golden_html_example_9() {
        let block_nodes = parse_blocks(r#" - foo
   - bar
	 - baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>baz</li>
</ul>
</li>
</ul>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 9");
    }
    #[test]
    fn golden_html_example_10() {
        let block_nodes = parse_blocks(r#"#	Foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>Foo</h1>
"###.trim(), "HTML render mismatch for example 10");
    }
    #[test]
    fn golden_html_example_11() {
        let block_nodes = parse_blocks(r#"*	*	*	
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
"###.trim(), "HTML render mismatch for example 11");
    }
    #[test]
    fn golden_html_example_12() {
        let block_nodes = parse_blocks(r#"\!\\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</p>
"###.trim(), "HTML render mismatch for example 12");
    }
    #[test]
    fn golden_html_example_13() {
        let block_nodes = parse_blocks(r#"\	\A\a\ \3\φ\«
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>\	\A\a\ \3\φ\«</p>
"###.trim(), "HTML render mismatch for example 13");
    }
    #[test]
    fn golden_html_example_14() {
        let block_nodes = parse_blocks(r#"\*not emphasized*
\<br/> not a tag
\[not a link](/foo)
\`not code`
1\. not a list
\* not a list
\# not a heading
\[foo]: /url \"not a reference\"
\&ouml; not a character entity
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*not emphasized*
&lt;br/&gt; not a tag
[not a link](/foo)
`not code`
1. not a list
* not a list
# not a heading
[foo]: /url &quot;not a reference&quot;
&amp;ouml; not a character entity</p>
"###.trim(), "HTML render mismatch for example 14");
    }
    #[test]
    fn golden_html_example_15() {
        let block_nodes = parse_blocks(r#"\\*emphasis*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>\<em>emphasis</em></p>
"###.trim(), "HTML render mismatch for example 15");
    }
    #[test]
    fn golden_html_example_16() {
        let block_nodes = parse_blocks(r#"foo\
bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<br />
bar</p>
"###.trim(), "HTML render mismatch for example 16");
    }
    #[test]
    fn golden_html_example_17() {
        let block_nodes = parse_blocks(r#"`` \[\` ``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>\[\`</code></p>
"###.trim(), "HTML render mismatch for example 17");
    }
    #[test]
    fn golden_html_example_18() {
        let block_nodes = parse_blocks(r#"    \[\]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>\[\]
</code></pre>
"###.trim(), "HTML render mismatch for example 18");
    }
    #[test]
    fn golden_html_example_19() {
        let block_nodes = parse_blocks(r#"~~~
\[\]
~~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>\[\]
</code></pre>
"###.trim(), "HTML render mismatch for example 19");
    }
    #[test]
    fn golden_html_example_20() {
        let block_nodes = parse_blocks(r#"<https://example.com?find=\*>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="https://example.com?find=%5C*">https://example.com?find=\*</a></p>
"###.trim(), "HTML render mismatch for example 20");
    }
    #[test]
    fn golden_html_example_21() {
        let block_nodes = parse_blocks(r#"<a href=\"/bar\/)\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<a href="/bar\/)">
"###.trim(), "HTML render mismatch for example 21");
    }
    #[test]
    fn golden_html_example_22() {
        let block_nodes = parse_blocks(r#"[foo](/bar\* \"ti\*tle\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/bar*" title="ti*tle">foo</a></p>
"###.trim(), "HTML render mismatch for example 22");
    }
    #[test]
    fn golden_html_example_23() {
        let block_nodes = parse_blocks(r#"[foo]

[foo]: /bar\* \"ti\*tle\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/bar*" title="ti*tle">foo</a></p>
"###.trim(), "HTML render mismatch for example 23");
    }
    #[test]
    fn golden_html_example_24() {
        let block_nodes = parse_blocks(r#"``` foo\+bar
foo
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code class="language-foo+bar">foo
</code></pre>
"###.trim(), "HTML render mismatch for example 24");
    }
    #[test]
    fn golden_html_example_25() {
        let block_nodes = parse_blocks(r#"&nbsp; &amp; &copy; &AElig; &Dcaron;
&frac34; &HilbertSpace; &DifferentialD;
&ClockwiseContourIntegral; &ngE;
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>  &amp; © Æ Ď
¾ ℋ ⅆ
∲ ≧̸</p>
"###.trim(), "HTML render mismatch for example 25");
    }
    #[test]
    fn golden_html_example_26() {
        let block_nodes = parse_blocks(r#"&#35; &#1234; &#992; &#0;
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p># Ӓ Ϡ �</p>
"###.trim(), "HTML render mismatch for example 26");
    }
    #[test]
    fn golden_html_example_27() {
        let block_nodes = parse_blocks(r#"&#X22; &#XD06; &#xcab;
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&quot; ആ ಫ</p>
"###.trim(), "HTML render mismatch for example 27");
    }
    #[test]
    fn golden_html_example_28() {
        let block_nodes = parse_blocks(r#"&nbsp &x; &#; &#x;
&#87654321;
&#abcdef0;
&ThisIsNotDefined; &hi?;
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;
&amp;#87654321;
&amp;#abcdef0;
&amp;ThisIsNotDefined; &amp;hi?;</p>
"###.trim(), "HTML render mismatch for example 28");
    }
    #[test]
    fn golden_html_example_29() {
        let block_nodes = parse_blocks(r#"&copy
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&amp;copy</p>
"###.trim(), "HTML render mismatch for example 29");
    }
    #[test]
    fn golden_html_example_30() {
        let block_nodes = parse_blocks(r#"&MadeUpEntity;
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&amp;MadeUpEntity;</p>
"###.trim(), "HTML render mismatch for example 30");
    }
    #[test]
    fn golden_html_example_31() {
        let block_nodes = parse_blocks(r#"<a href=\"&ouml;&ouml;.html\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<a href="&ouml;&ouml;.html">
"###.trim(), "HTML render mismatch for example 31");
    }
    #[test]
    fn golden_html_example_32() {
        let block_nodes = parse_blocks(r#"[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/f%C3%B6%C3%B6" title="föö">foo</a></p>
"###.trim(), "HTML render mismatch for example 32");
    }
    #[test]
    fn golden_html_example_33() {
        let block_nodes = parse_blocks(r#"[foo]

[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/f%C3%B6%C3%B6" title="föö">foo</a></p>
"###.trim(), "HTML render mismatch for example 33");
    }
    #[test]
    fn golden_html_example_34() {
        let block_nodes = parse_blocks(r#"``` f&ouml;&ouml;
foo
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code class="language-föö">foo
</code></pre>
"###.trim(), "HTML render mismatch for example 34");
    }
    #[test]
    fn golden_html_example_35() {
        let block_nodes = parse_blocks(r#"`f&ouml;&ouml;`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>f&amp;ouml;&amp;ouml;</code></p>
"###.trim(), "HTML render mismatch for example 35");
    }
    #[test]
    fn golden_html_example_36() {
        let block_nodes = parse_blocks(r#"    f&ouml;f&ouml;
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>f&amp;ouml;f&amp;ouml;
</code></pre>
"###.trim(), "HTML render mismatch for example 36");
    }
    #[test]
    fn golden_html_example_37() {
        let block_nodes = parse_blocks(r#"&#42;foo&#42;
*foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*foo*
<em>foo</em></p>
"###.trim(), "HTML render mismatch for example 37");
    }
    #[test]
    fn golden_html_example_38() {
        let block_nodes = parse_blocks(r#"&#42; foo

* foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>* foo</p>
<ul>
<li>foo</li>
</ul>
"###.trim(), "HTML render mismatch for example 38");
    }
    #[test]
    fn golden_html_example_39() {
        let block_nodes = parse_blocks(r#"foo&#10;&#10;bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo

bar</p>
"###.trim(), "HTML render mismatch for example 39");
    }
    #[test]
    fn golden_html_example_40() {
        let block_nodes = parse_blocks(r#"&#9;foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>	foo</p>
"###.trim(), "HTML render mismatch for example 40");
    }
    #[test]
    fn golden_html_example_41() {
        let block_nodes = parse_blocks(r#"[a](url &quot;tit&quot;)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[a](url &quot;tit&quot;)</p>
"###.trim(), "HTML render mismatch for example 41");
    }
    #[test]
    fn golden_html_example_42() {
        let block_nodes = parse_blocks(r#"- `one
- two`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>`one</li>
<li>two`</li>
</ul>
"###.trim(), "HTML render mismatch for example 42");
    }
    #[test]
    fn golden_html_example_43() {
        let block_nodes = parse_blocks(r#"***
---
___
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
<hr />
<hr />
"###.trim(), "HTML render mismatch for example 43");
    }
    #[test]
    fn golden_html_example_44() {
        let block_nodes = parse_blocks(r#"+++
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>+++</p>
"###.trim(), "HTML render mismatch for example 44");
    }
    #[test]
    fn golden_html_example_45() {
        let block_nodes = parse_blocks(r#"===
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>===</p>
"###.trim(), "HTML render mismatch for example 45");
    }
    #[test]
    fn golden_html_example_46() {
        let block_nodes = parse_blocks(r#"--
**
__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>--
**
__</p>
"###.trim(), "HTML render mismatch for example 46");
    }
    #[test]
    fn golden_html_example_47() {
        let block_nodes = parse_blocks(r#" ***
  ***
   ***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
<hr />
<hr />
"###.trim(), "HTML render mismatch for example 47");
    }
    #[test]
    fn golden_html_example_48() {
        let block_nodes = parse_blocks(r#"    ***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>***
</code></pre>
"###.trim(), "HTML render mismatch for example 48");
    }
    #[test]
    fn golden_html_example_49() {
        let block_nodes = parse_blocks(r#"Foo
    ***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
***</p>
"###.trim(), "HTML render mismatch for example 49");
    }
    #[test]
    fn golden_html_example_50() {
        let block_nodes = parse_blocks(r#"_____________________________________
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
"###.trim(), "HTML render mismatch for example 50");
    }
    #[test]
    fn golden_html_example_51() {
        let block_nodes = parse_blocks(r#" - - -
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
"###.trim(), "HTML render mismatch for example 51");
    }
    #[test]
    fn golden_html_example_52() {
        let block_nodes = parse_blocks(r#" **  * ** * ** * **
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
"###.trim(), "HTML render mismatch for example 52");
    }
    #[test]
    fn golden_html_example_53() {
        let block_nodes = parse_blocks(r#"-     -      -      -
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
"###.trim(), "HTML render mismatch for example 53");
    }
    #[test]
    fn golden_html_example_54() {
        let block_nodes = parse_blocks(r#"- - - -    
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
"###.trim(), "HTML render mismatch for example 54");
    }
    #[test]
    fn golden_html_example_55() {
        let block_nodes = parse_blocks(r#"_ _ _ _ a

a------

---a---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_ _ _ _ a</p>
<p>a------</p>
<p>---a---</p>
"###.trim(), "HTML render mismatch for example 55");
    }
    #[test]
    fn golden_html_example_56() {
        let block_nodes = parse_blocks(r#" *-*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>-</em></p>
"###.trim(), "HTML render mismatch for example 56");
    }
    #[test]
    fn golden_html_example_57() {
        let block_nodes = parse_blocks(r#"- foo
***
- bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
</ul>
<hr />
<ul>
<li>bar</li>
</ul>
"###.trim(), "HTML render mismatch for example 57");
    }
    #[test]
    fn golden_html_example_58() {
        let block_nodes = parse_blocks(r#"Foo
***
bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo</p>
<hr />
<p>bar</p>
"###.trim(), "HTML render mismatch for example 58");
    }
    #[test]
    fn golden_html_example_59() {
        let block_nodes = parse_blocks(r#"Foo
---
bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo</h2>
<p>bar</p>
"###.trim(), "HTML render mismatch for example 59");
    }
    #[test]
    fn golden_html_example_60() {
        let block_nodes = parse_blocks(r#"* Foo
* * *
* Bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>Foo</li>
</ul>
<hr />
<ul>
<li>Bar</li>
</ul>
"###.trim(), "HTML render mismatch for example 60");
    }
    #[test]
    fn golden_html_example_61() {
        let block_nodes = parse_blocks(r#"- Foo
- * * *
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>Foo</li>
<li>
<hr />
</li>
</ul>
"###.trim(), "HTML render mismatch for example 61");
    }
    #[test]
    fn golden_html_example_62() {
        let block_nodes = parse_blocks(r#"# foo
## foo
### foo
#### foo
##### foo
###### foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>foo</h1>
<h2>foo</h2>
<h3>foo</h3>
<h4>foo</h4>
<h5>foo</h5>
<h6>foo</h6>
"###.trim(), "HTML render mismatch for example 62");
    }
    #[test]
    fn golden_html_example_63() {
        let block_nodes = parse_blocks(r#"####### foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>####### foo</p>
"###.trim(), "HTML render mismatch for example 63");
    }
    #[test]
    fn golden_html_example_64() {
        let block_nodes = parse_blocks(r#"#5 bolt

#hashtag
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>#5 bolt</p>
<p>#hashtag</p>
"###.trim(), "HTML render mismatch for example 64");
    }
    #[test]
    fn golden_html_example_65() {
        let block_nodes = parse_blocks(r#"\## foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>## foo</p>
"###.trim(), "HTML render mismatch for example 65");
    }
    #[test]
    fn golden_html_example_66() {
        let block_nodes = parse_blocks(r#"# foo *bar* \*baz\*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>foo <em>bar</em> *baz*</h1>
"###.trim(), "HTML render mismatch for example 66");
    }
    #[test]
    fn golden_html_example_67() {
        let block_nodes = parse_blocks(r#"#                  foo                     
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>foo</h1>
"###.trim(), "HTML render mismatch for example 67");
    }
    #[test]
    fn golden_html_example_68() {
        let block_nodes = parse_blocks(r#" ### foo
  ## foo
   # foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h3>foo</h3>
<h2>foo</h2>
<h1>foo</h1>
"###.trim(), "HTML render mismatch for example 68");
    }
    #[test]
    fn golden_html_example_69() {
        let block_nodes = parse_blocks(r#"    # foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code># foo
</code></pre>
"###.trim(), "HTML render mismatch for example 69");
    }
    #[test]
    fn golden_html_example_70() {
        let block_nodes = parse_blocks(r#"foo
    # bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo
# bar</p>
"###.trim(), "HTML render mismatch for example 70");
    }
    #[test]
    fn golden_html_example_71() {
        let block_nodes = parse_blocks(r#"## foo ##
  ###   bar    ###
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>foo</h2>
<h3>bar</h3>
"###.trim(), "HTML render mismatch for example 71");
    }
    #[test]
    fn golden_html_example_72() {
        let block_nodes = parse_blocks(r#"# foo ##################################
##### foo ##
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>foo</h1>
<h5>foo</h5>
"###.trim(), "HTML render mismatch for example 72");
    }
    #[test]
    fn golden_html_example_73() {
        let block_nodes = parse_blocks(r#"### foo ###     
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h3>foo</h3>
"###.trim(), "HTML render mismatch for example 73");
    }
    #[test]
    fn golden_html_example_74() {
        let block_nodes = parse_blocks(r#"### foo ### b
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h3>foo ### b</h3>
"###.trim(), "HTML render mismatch for example 74");
    }
    #[test]
    fn golden_html_example_75() {
        let block_nodes = parse_blocks(r#"# foo#
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>foo#</h1>
"###.trim(), "HTML render mismatch for example 75");
    }
    #[test]
    fn golden_html_example_76() {
        let block_nodes = parse_blocks(r#"### foo \###
## foo #\##
# foo \#
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h3>foo ###</h3>
<h2>foo ###</h2>
<h1>foo #</h1>
"###.trim(), "HTML render mismatch for example 76");
    }
    #[test]
    fn golden_html_example_77() {
        let block_nodes = parse_blocks(r#"****
## foo
****
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
<h2>foo</h2>
<hr />
"###.trim(), "HTML render mismatch for example 77");
    }
    #[test]
    fn golden_html_example_78() {
        let block_nodes = parse_blocks(r#"Foo bar
# baz
Bar foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo bar</p>
<h1>baz</h1>
<p>Bar foo</p>
"###.trim(), "HTML render mismatch for example 78");
    }
    #[test]
    fn golden_html_example_79() {
        let block_nodes = parse_blocks(r#"## 
#
### ###
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2></h2>
<h1></h1>
<h3></h3>
"###.trim(), "HTML render mismatch for example 79");
    }
    #[test]
    fn golden_html_example_80() {
        let block_nodes = parse_blocks(r#"Foo *bar*
=========

Foo *bar*
---------
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>Foo <em>bar</em></h1>
<h2>Foo <em>bar</em></h2>
"###.trim(), "HTML render mismatch for example 80");
    }
    #[test]
    fn golden_html_example_81() {
        let block_nodes = parse_blocks(r#"Foo *bar
baz*
====
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>Foo <em>bar
baz</em></h1>
"###.trim(), "HTML render mismatch for example 81");
    }
    #[test]
    fn golden_html_example_82() {
        let block_nodes = parse_blocks(r#"  Foo *bar
baz*	
====
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>Foo <em>bar
baz</em></h1>
"###.trim(), "HTML render mismatch for example 82");
    }
    #[test]
    fn golden_html_example_83() {
        let block_nodes = parse_blocks(r#"Foo
-------------------------

Foo
=
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo</h2>
<h1>Foo</h1>
"###.trim(), "HTML render mismatch for example 83");
    }
    #[test]
    fn golden_html_example_84() {
        let block_nodes = parse_blocks(r#"   Foo
---

  Foo
-----

  Foo
  ===
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo</h2>
<h2>Foo</h2>
<h1>Foo</h1>
"###.trim(), "HTML render mismatch for example 84");
    }
    #[test]
    fn golden_html_example_85() {
        let block_nodes = parse_blocks(r#"    Foo
    ---

    Foo
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>Foo
---

Foo
</code></pre>
<hr />
"###.trim(), "HTML render mismatch for example 85");
    }
    #[test]
    fn golden_html_example_86() {
        let block_nodes = parse_blocks(r#"Foo
   ----      
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo</h2>
"###.trim(), "HTML render mismatch for example 86");
    }
    #[test]
    fn golden_html_example_87() {
        let block_nodes = parse_blocks(r#"Foo
    ---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
---</p>
"###.trim(), "HTML render mismatch for example 87");
    }
    #[test]
    fn golden_html_example_88() {
        let block_nodes = parse_blocks(r#"Foo
= =

Foo
--- -
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
= =</p>
<p>Foo</p>
<hr />
"###.trim(), "HTML render mismatch for example 88");
    }
    #[test]
    fn golden_html_example_89() {
        let block_nodes = parse_blocks(r#"Foo  
-----
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo</h2>
"###.trim(), "HTML render mismatch for example 89");
    }
    #[test]
    fn golden_html_example_90() {
        let block_nodes = parse_blocks(r#"Foo\
----
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo\</h2>
"###.trim(), "HTML render mismatch for example 90");
    }
    #[test]
    fn golden_html_example_91() {
        let block_nodes = parse_blocks(r#"`Foo
----
`

<a title=\"a lot
---
of dashes\"/>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>`Foo</h2>
<p>`</p>
<h2>&lt;a title=&quot;a lot</h2>
<p>of dashes&quot;/&gt;</p>
"###.trim(), "HTML render mismatch for example 91");
    }
    #[test]
    fn golden_html_example_92() {
        let block_nodes = parse_blocks(r#"> Foo
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>Foo</p>
</blockquote>
<hr />
"###.trim(), "HTML render mismatch for example 92");
    }
    #[test]
    fn golden_html_example_93() {
        let block_nodes = parse_blocks(r#"> foo
bar
===
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo
bar
===</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 93");
    }
    #[test]
    fn golden_html_example_94() {
        let block_nodes = parse_blocks(r#"- Foo
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>Foo</li>
</ul>
<hr />
"###.trim(), "HTML render mismatch for example 94");
    }
    #[test]
    fn golden_html_example_95() {
        let block_nodes = parse_blocks(r#"Foo
Bar
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>Foo
Bar</h2>
"###.trim(), "HTML render mismatch for example 95");
    }
    #[test]
    fn golden_html_example_96() {
        let block_nodes = parse_blocks(r#"---
Foo
---
Bar
---
Baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
<h2>Foo</h2>
<h2>Bar</h2>
<p>Baz</p>
"###.trim(), "HTML render mismatch for example 96");
    }
    #[test]
    fn golden_html_example_97() {
        let block_nodes = parse_blocks(r#"
====
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>====</p>
"###.trim(), "HTML render mismatch for example 97");
    }
    #[test]
    fn golden_html_example_98() {
        let block_nodes = parse_blocks(r#"---
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<hr />
<hr />
"###.trim(), "HTML render mismatch for example 98");
    }
    #[test]
    fn golden_html_example_99() {
        let block_nodes = parse_blocks(r#"- foo
-----
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
</ul>
<hr />
"###.trim(), "HTML render mismatch for example 99");
    }
    #[test]
    fn golden_html_example_100() {
        let block_nodes = parse_blocks(r#"    foo
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo
</code></pre>
<hr />
"###.trim(), "HTML render mismatch for example 100");
    }
    #[test]
    fn golden_html_example_101() {
        let block_nodes = parse_blocks(r#"> foo
-----
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo</p>
</blockquote>
<hr />
"###.trim(), "HTML render mismatch for example 101");
    }
    #[test]
    fn golden_html_example_102() {
        let block_nodes = parse_blocks(r#"\> foo
------
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>&gt; foo</h2>
"###.trim(), "HTML render mismatch for example 102");
    }
    #[test]
    fn golden_html_example_103() {
        let block_nodes = parse_blocks(r#"Foo

bar
---
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo</p>
<h2>bar</h2>
<p>baz</p>
"###.trim(), "HTML render mismatch for example 103");
    }
    #[test]
    fn golden_html_example_104() {
        let block_nodes = parse_blocks(r#"Foo
bar

---

baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
bar</p>
<hr />
<p>baz</p>
"###.trim(), "HTML render mismatch for example 104");
    }
    #[test]
    fn golden_html_example_105() {
        let block_nodes = parse_blocks(r#"Foo
bar
* * *
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
bar</p>
<hr />
<p>baz</p>
"###.trim(), "HTML render mismatch for example 105");
    }
    #[test]
    fn golden_html_example_106() {
        let block_nodes = parse_blocks(r#"Foo
bar
\---
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
bar
---
baz</p>
"###.trim(), "HTML render mismatch for example 106");
    }
    #[test]
    fn golden_html_example_107() {
        let block_nodes = parse_blocks(r#"    a simple
      indented code block
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>a simple
  indented code block
</code></pre>
"###.trim(), "HTML render mismatch for example 107");
    }
    #[test]
    fn golden_html_example_108() {
        let block_nodes = parse_blocks(r#"  - foo

    bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 108");
    }
    #[test]
    fn golden_html_example_109() {
        let block_nodes = parse_blocks(r#"1.  foo

    - bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>foo</p>
<ul>
<li>bar</li>
</ul>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 109");
    }
    #[test]
    fn golden_html_example_110() {
        let block_nodes = parse_blocks(r#"    <a/>
    *hi*

    - one
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>&lt;a/&gt;
*hi*

- one
</code></pre>
"###.trim(), "HTML render mismatch for example 110");
    }
    #[test]
    fn golden_html_example_111() {
        let block_nodes = parse_blocks(r#"    chunk1

    chunk2
  
 
 
    chunk3
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>chunk1

chunk2



chunk3
</code></pre>
"###.trim(), "HTML render mismatch for example 111");
    }
    #[test]
    fn golden_html_example_112() {
        let block_nodes = parse_blocks(r#"    chunk1
      
      chunk2
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>chunk1
  
  chunk2
</code></pre>
"###.trim(), "HTML render mismatch for example 112");
    }
    #[test]
    fn golden_html_example_113() {
        let block_nodes = parse_blocks(r#"Foo
    bar

"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
bar</p>
"###.trim(), "HTML render mismatch for example 113");
    }
    #[test]
    fn golden_html_example_114() {
        let block_nodes = parse_blocks(r#"    foo
bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo
</code></pre>
<p>bar</p>
"###.trim(), "HTML render mismatch for example 114");
    }
    #[test]
    fn golden_html_example_115() {
        let block_nodes = parse_blocks(r#"# Heading
    foo
Heading
------
    foo
----
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>Heading</h1>
<pre><code>foo
</code></pre>
<h2>Heading</h2>
<pre><code>foo
</code></pre>
<hr />
"###.trim(), "HTML render mismatch for example 115");
    }
    #[test]
    fn golden_html_example_116() {
        let block_nodes = parse_blocks(r#"        foo
    bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>    foo
bar
</code></pre>
"###.trim(), "HTML render mismatch for example 116");
    }
    #[test]
    fn golden_html_example_117() {
        let block_nodes = parse_blocks(r#"
    
    foo
    

"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo
</code></pre>
"###.trim(), "HTML render mismatch for example 117");
    }
    #[test]
    fn golden_html_example_118() {
        let block_nodes = parse_blocks(r#"    foo  
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>foo  
</code></pre>
"###.trim(), "HTML render mismatch for example 118");
    }
    #[test]
    fn golden_html_example_119() {
        let block_nodes = parse_blocks(r#"```
<
 >
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>&lt;
 &gt;
</code></pre>
"###.trim(), "HTML render mismatch for example 119");
    }
    #[test]
    fn golden_html_example_120() {
        let block_nodes = parse_blocks(r#"~~~
<
 >
~~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>&lt;
 &gt;
</code></pre>
"###.trim(), "HTML render mismatch for example 120");
    }
    #[test]
    fn golden_html_example_121() {
        let block_nodes = parse_blocks(r#"``
foo
``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo</code></p>
"###.trim(), "HTML render mismatch for example 121");
    }
    #[test]
    fn golden_html_example_122() {
        let block_nodes = parse_blocks(r#"```
aaa
~~~
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
~~~
</code></pre>
"###.trim(), "HTML render mismatch for example 122");
    }
    #[test]
    fn golden_html_example_123() {
        let block_nodes = parse_blocks(r#"~~~
aaa
```
~~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
```
</code></pre>
"###.trim(), "HTML render mismatch for example 123");
    }
    #[test]
    fn golden_html_example_124() {
        let block_nodes = parse_blocks(r#"````
aaa
```
``````
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
```
</code></pre>
"###.trim(), "HTML render mismatch for example 124");
    }
    #[test]
    fn golden_html_example_125() {
        let block_nodes = parse_blocks(r#"~~~~
aaa
~~~
~~~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
~~~
</code></pre>
"###.trim(), "HTML render mismatch for example 125");
    }
    #[test]
    fn golden_html_example_126() {
        let block_nodes = parse_blocks(r#"```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code></code></pre>
"###.trim(), "HTML render mismatch for example 126");
    }
    #[test]
    fn golden_html_example_127() {
        let block_nodes = parse_blocks(r#"`````

```
aaa
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>
```
aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 127");
    }
    #[test]
    fn golden_html_example_128() {
        let block_nodes = parse_blocks(r#"> ```
> aaa

bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<pre><code>aaa
</code></pre>
</blockquote>
<p>bbb</p>
"###.trim(), "HTML render mismatch for example 128");
    }
    #[test]
    fn golden_html_example_129() {
        let block_nodes = parse_blocks(r#"```

  
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>
  
</code></pre>
"###.trim(), "HTML render mismatch for example 129");
    }
    #[test]
    fn golden_html_example_130() {
        let block_nodes = parse_blocks(r#"```
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code></code></pre>
"###.trim(), "HTML render mismatch for example 130");
    }
    #[test]
    fn golden_html_example_131() {
        let block_nodes = parse_blocks(r#" ```
 aaa
aaa
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 131");
    }
    #[test]
    fn golden_html_example_132() {
        let block_nodes = parse_blocks(r#"  ```
aaa
  aaa
aaa
  ```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
aaa
aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 132");
    }
    #[test]
    fn golden_html_example_133() {
        let block_nodes = parse_blocks(r#"   ```
   aaa
    aaa
  aaa
   ```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
 aaa
aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 133");
    }
    #[test]
    fn golden_html_example_134() {
        let block_nodes = parse_blocks(r#"    ```
    aaa
    ```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>```
aaa
```
</code></pre>
"###.trim(), "HTML render mismatch for example 134");
    }
    #[test]
    fn golden_html_example_135() {
        let block_nodes = parse_blocks(r#"```
aaa
  ```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 135");
    }
    #[test]
    fn golden_html_example_136() {
        let block_nodes = parse_blocks(r#"   ```
aaa
  ```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 136");
    }
    #[test]
    fn golden_html_example_137() {
        let block_nodes = parse_blocks(r#"```
aaa
    ```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
    ```
</code></pre>
"###.trim(), "HTML render mismatch for example 137");
    }
    #[test]
    fn golden_html_example_138() {
        let block_nodes = parse_blocks(r#"``` ```
aaa
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code> </code>
aaa</p>
"###.trim(), "HTML render mismatch for example 138");
    }
    #[test]
    fn golden_html_example_139() {
        let block_nodes = parse_blocks(r#"~~~~~~
aaa
~~~ ~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
~~~ ~~
</code></pre>
"###.trim(), "HTML render mismatch for example 139");
    }
    #[test]
    fn golden_html_example_140() {
        let block_nodes = parse_blocks(r#"foo
```
bar
```
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo</p>
<pre><code>bar
</code></pre>
<p>baz</p>
"###.trim(), "HTML render mismatch for example 140");
    }
    #[test]
    fn golden_html_example_141() {
        let block_nodes = parse_blocks(r#"foo
---
~~~
bar
~~~
# baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h2>foo</h2>
<pre><code>bar
</code></pre>
<h1>baz</h1>
"###.trim(), "HTML render mismatch for example 141");
    }
    #[test]
    fn golden_html_example_142() {
        let block_nodes = parse_blocks(r#"```ruby
def foo(x)
  return 3
end
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code class="language-ruby">def foo(x)
  return 3
end
</code></pre>
"###.trim(), "HTML render mismatch for example 142");
    }
    #[test]
    fn golden_html_example_143() {
        let block_nodes = parse_blocks(r#"~~~~    ruby startline=3 $%@#$
def foo(x)
  return 3
end
~~~~~~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code class="language-ruby">def foo(x)
  return 3
end
</code></pre>
"###.trim(), "HTML render mismatch for example 143");
    }
    #[test]
    fn golden_html_example_144() {
        let block_nodes = parse_blocks(r#"````;
````
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code class="language-;"></code></pre>
"###.trim(), "HTML render mismatch for example 144");
    }
    #[test]
    fn golden_html_example_145() {
        let block_nodes = parse_blocks(r#"``` aa ```
foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>aa</code>
foo</p>
"###.trim(), "HTML render mismatch for example 145");
    }
    #[test]
    fn golden_html_example_146() {
        let block_nodes = parse_blocks(r#"~~~ aa ``` ~~~
foo
~~~
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code class="language-aa">foo
</code></pre>
"###.trim(), "HTML render mismatch for example 146");
    }
    #[test]
    fn golden_html_example_147() {
        let block_nodes = parse_blocks(r#"```
``` aaa
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>``` aaa
</code></pre>
"###.trim(), "HTML render mismatch for example 147");
    }
    #[test]
    fn golden_html_example_148() {
        let block_nodes = parse_blocks(r#"<table><tr><td>
<pre>
**Hello**,

_world_.
</pre>
</td></tr></table>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<table><tr><td>
<pre>
**Hello**,
<p><em>world</em>.
</pre></p>
</td></tr></table>
"###.trim(), "HTML render mismatch for example 148");
    }
    #[test]
    fn golden_html_example_149() {
        let block_nodes = parse_blocks(r#"<table>
  <tr>
    <td>
           hi
    </td>
  </tr>
</table>

okay.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<table>
  <tr>
    <td>
           hi
    </td>
  </tr>
</table>
<p>okay.</p>
"###.trim(), "HTML render mismatch for example 149");
    }
    #[test]
    fn golden_html_example_150() {
        let block_nodes = parse_blocks(r#" <div>
  *hello*
         <foo><a>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###" <div>
  *hello*
         <foo><a>
"###.trim(), "HTML render mismatch for example 150");
    }
    #[test]
    fn golden_html_example_151() {
        let block_nodes = parse_blocks(r#"</div>
*foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"</div>
*foo*
"###.trim(), "HTML render mismatch for example 151");
    }
    #[test]
    fn golden_html_example_152() {
        let block_nodes = parse_blocks(r#"<DIV CLASS=\"foo\">

*Markdown*

</DIV>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<DIV CLASS="foo">
<p><em>Markdown</em></p>
</DIV>
"###.trim(), "HTML render mismatch for example 152");
    }
    #[test]
    fn golden_html_example_153() {
        let block_nodes = parse_blocks(r#"<div id=\"foo\"
  class=\"bar\">
</div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div id="foo"
  class="bar">
</div>
"###.trim(), "HTML render mismatch for example 153");
    }
    #[test]
    fn golden_html_example_154() {
        let block_nodes = parse_blocks(r#"<div id=\"foo\" class=\"bar
  baz\">
</div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div id="foo" class="bar
  baz">
</div>
"###.trim(), "HTML render mismatch for example 154");
    }
    #[test]
    fn golden_html_example_155() {
        let block_nodes = parse_blocks(r#"<div>
*foo*

*bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div>
*foo*
<p><em>bar</em></p>
"###.trim(), "HTML render mismatch for example 155");
    }
    #[test]
    fn golden_html_example_156() {
        let block_nodes = parse_blocks(r#"<div id=\"foo\"
*hi*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div id="foo"
*hi*
"###.trim(), "HTML render mismatch for example 156");
    }
    #[test]
    fn golden_html_example_157() {
        let block_nodes = parse_blocks(r#"<div class
foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div class
foo
"###.trim(), "HTML render mismatch for example 157");
    }
    #[test]
    fn golden_html_example_158() {
        let block_nodes = parse_blocks(r#"<div *???-&&&-<---
*foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div *???-&&&-<---
*foo*
"###.trim(), "HTML render mismatch for example 158");
    }
    #[test]
    fn golden_html_example_159() {
        let block_nodes = parse_blocks(r#"<div><a href=\"bar\">*foo*</a></div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div><a href="bar">*foo*</a></div>
"###.trim(), "HTML render mismatch for example 159");
    }
    #[test]
    fn golden_html_example_160() {
        let block_nodes = parse_blocks(r#"<table><tr><td>
foo
</td></tr></table>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<table><tr><td>
foo
</td></tr></table>
"###.trim(), "HTML render mismatch for example 160");
    }
    #[test]
    fn golden_html_example_161() {
        let block_nodes = parse_blocks(r#"<div></div>
``` c
int x = 33;
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div></div>
``` c
int x = 33;
```
"###.trim(), "HTML render mismatch for example 161");
    }
    #[test]
    fn golden_html_example_162() {
        let block_nodes = parse_blocks(r#"<div
> not quoted text
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div
> not quoted text
"###.trim(), "HTML render mismatch for example 162");
    }
    #[test]
    fn golden_html_example_163() {
        let block_nodes = parse_blocks(r#"<a href=\"foo\">
*bar*
</a>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<a href="foo">
*bar*
</a>
"###.trim(), "HTML render mismatch for example 163");
    }
    #[test]
    fn golden_html_example_164() {
        let block_nodes = parse_blocks(r#"<Warning>
*bar*
</Warning>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<Warning>
*bar*
</Warning>
"###.trim(), "HTML render mismatch for example 164");
    }
    #[test]
    fn golden_html_example_165() {
        let block_nodes = parse_blocks(r#"<i class=\"foo\">
*bar*
</i>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<i class="foo">
*bar*
</i>
"###.trim(), "HTML render mismatch for example 165");
    }
    #[test]
    fn golden_html_example_166() {
        let block_nodes = parse_blocks(r#"</ins>
*bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"</ins>
*bar*
"###.trim(), "HTML render mismatch for example 166");
    }
    #[test]
    fn golden_html_example_167() {
        let block_nodes = parse_blocks(r#"<del>
*foo*
</del>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<del>
*foo*
</del>
"###.trim(), "HTML render mismatch for example 167");
    }
    #[test]
    fn golden_html_example_168() {
        let block_nodes = parse_blocks(r#"<del>

*foo*

</del>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<del>
<p><em>foo</em></p>
</del>
"###.trim(), "HTML render mismatch for example 168");
    }
    #[test]
    fn golden_html_example_169() {
        let block_nodes = parse_blocks(r#"<del>*foo*</del>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><del><em>foo</em></del></p>
"###.trim(), "HTML render mismatch for example 169");
    }
    #[test]
    fn golden_html_example_170() {
        let block_nodes = parse_blocks(r#"<del
class=\"foo\">
*foo*
</del>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><del
class="foo">
<em>foo</em>
</del></p>
"###.trim(), "HTML render mismatch for example 170");
    }
    #[test]
    fn golden_html_example_171() {
        let block_nodes = parse_blocks(r#"<pre language=\"haskell\"><code>
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags
</code></pre>
okay
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre language="haskell"><code>
import Text.HTML.TagSoup

main :: IO ()
main = print $ parseTags tags
</code></pre>
<p>okay</p>
"###.trim(), "HTML render mismatch for example 171");
    }
    #[test]
    fn golden_html_example_172() {
        let block_nodes = parse_blocks(r#"<script type=\"text/javascript\">
// JavaScript example

document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";
</script>
okay
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<script type="text/javascript">
// JavaScript example

document.getElementById("demo").innerHTML = "Hello JavaScript!";
</script>
<p>okay</p>
"###.trim(), "HTML render mismatch for example 172");
    }
    #[test]
    fn golden_html_example_173() {
        let block_nodes = parse_blocks(r#"<textarea>

*foo*

_bar_

</textarea>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<textarea>

*foo*

_bar_

</textarea>
"###.trim(), "HTML render mismatch for example 173");
    }
    #[test]
    fn golden_html_example_174() {
        let block_nodes = parse_blocks(r#"<style
  type=\"text/css\">
h1 {color:red;}

p {color:blue;}
</style>
okay
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<style
  type="text/css">
h1 {color:red;}

p {color:blue;}
</style>
<p>okay</p>
"###.trim(), "HTML render mismatch for example 174");
    }
    #[test]
    fn golden_html_example_175() {
        let block_nodes = parse_blocks(r#"<style
  type=\"text/css\">

foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<style
  type="text/css">

foo
"###.trim(), "HTML render mismatch for example 175");
    }
    #[test]
    fn golden_html_example_176() {
        let block_nodes = parse_blocks(r#"> <div>
> foo

bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<div>
foo
</blockquote>
<p>bar</p>
"###.trim(), "HTML render mismatch for example 176");
    }
    #[test]
    fn golden_html_example_177() {
        let block_nodes = parse_blocks(r#"- <div>
- foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<div>
</li>
<li>foo</li>
</ul>
"###.trim(), "HTML render mismatch for example 177");
    }
    #[test]
    fn golden_html_example_178() {
        let block_nodes = parse_blocks(r#"<style>p{color:red;}</style>
*foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<style>p{color:red;}</style>
<p><em>foo</em></p>
"###.trim(), "HTML render mismatch for example 178");
    }
    #[test]
    fn golden_html_example_179() {
        let block_nodes = parse_blocks(r#"<!-- foo -->*bar*
*baz*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<!-- foo -->*bar*
<p><em>baz</em></p>
"###.trim(), "HTML render mismatch for example 179");
    }
    #[test]
    fn golden_html_example_180() {
        let block_nodes = parse_blocks(r#"<script>
foo
</script>1. *bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<script>
foo
</script>1. *bar*
"###.trim(), "HTML render mismatch for example 180");
    }
    #[test]
    fn golden_html_example_181() {
        let block_nodes = parse_blocks(r#"<!-- Foo

bar
   baz -->
okay
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<!-- Foo

bar
   baz -->
<p>okay</p>
"###.trim(), "HTML render mismatch for example 181");
    }
    #[test]
    fn golden_html_example_182() {
        let block_nodes = parse_blocks(r#"<?php

  echo '>';

?>
okay
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<?php

  echo '>';

?>
<p>okay</p>
"###.trim(), "HTML render mismatch for example 182");
    }
    #[test]
    fn golden_html_example_183() {
        let block_nodes = parse_blocks(r#"<!DOCTYPE html>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<!DOCTYPE html>
"###.trim(), "HTML render mismatch for example 183");
    }
    #[test]
    fn golden_html_example_184() {
        let block_nodes = parse_blocks(r#"<![CDATA[
function matchwo(a,b)
{
  if (a < b && a < 0) then {
    return 1;

  } else {

    return 0;
  }
}
]]>
okay
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<![CDATA[
function matchwo(a,b)
{
  if (a < b && a < 0) then {
    return 1;

  } else {

    return 0;
  }
}
]]>
<p>okay</p>
"###.trim(), "HTML render mismatch for example 184");
    }
    #[test]
    fn golden_html_example_185() {
        let block_nodes = parse_blocks(r#"  <!-- foo -->

    <!-- foo -->
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"  <!-- foo -->
<pre><code>&lt;!-- foo --&gt;
</code></pre>
"###.trim(), "HTML render mismatch for example 185");
    }
    #[test]
    fn golden_html_example_186() {
        let block_nodes = parse_blocks(r#"  <div>

    <div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"  <div>
<pre><code>&lt;div&gt;
</code></pre>
"###.trim(), "HTML render mismatch for example 186");
    }
    #[test]
    fn golden_html_example_187() {
        let block_nodes = parse_blocks(r#"Foo
<div>
bar
</div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo</p>
<div>
bar
</div>
"###.trim(), "HTML render mismatch for example 187");
    }
    #[test]
    fn golden_html_example_188() {
        let block_nodes = parse_blocks(r#"<div>
bar
</div>
*foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div>
bar
</div>
*foo*
"###.trim(), "HTML render mismatch for example 188");
    }
    #[test]
    fn golden_html_example_189() {
        let block_nodes = parse_blocks(r#"Foo
<a href=\"bar\">
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
<a href="bar">
baz</p>
"###.trim(), "HTML render mismatch for example 189");
    }
    #[test]
    fn golden_html_example_190() {
        let block_nodes = parse_blocks(r#"<div>

*Emphasized* text.

</div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div>
<p><em>Emphasized</em> text.</p>
</div>
"###.trim(), "HTML render mismatch for example 190");
    }
    #[test]
    fn golden_html_example_191() {
        let block_nodes = parse_blocks(r#"<div>
*Emphasized* text.
</div>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<div>
*Emphasized* text.
</div>
"###.trim(), "HTML render mismatch for example 191");
    }
    #[test]
    fn golden_html_example_192() {
        let block_nodes = parse_blocks(r#"<table>

<tr>

<td>
Hi
</td>

</tr>

</table>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<table>
<tr>
<td>
Hi
</td>
</tr>
</table>
"###.trim(), "HTML render mismatch for example 192");
    }
    #[test]
    fn golden_html_example_193() {
        let block_nodes = parse_blocks(r#"<table>

  <tr>

    <td>
      Hi
    </td>

  </tr>

</table>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<table>
  <tr>
<pre><code>&lt;td&gt;
  Hi
&lt;/td&gt;
</code></pre>
  </tr>
</table>
"###.trim(), "HTML render mismatch for example 193");
    }
    #[test]
    fn golden_html_example_194() {
        let block_nodes = parse_blocks(r#"[foo]: /url \"title\"

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">foo</a></p>
"###.trim(), "HTML render mismatch for example 194");
    }
    #[test]
    fn golden_html_example_195() {
        let block_nodes = parse_blocks(r#"   [foo]: 
      /url  
           'the title'  

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="the title">foo</a></p>
"###.trim(), "HTML render mismatch for example 195");
    }
    #[test]
    fn golden_html_example_196() {
        let block_nodes = parse_blocks(r#"[Foo*bar\]]:my_(url) 'title (with parens)'

[Foo*bar\]]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="my_(url)" title="title (with parens)">Foo*bar]</a></p>
"###.trim(), "HTML render mismatch for example 196");
    }
    #[test]
    fn golden_html_example_197() {
        let block_nodes = parse_blocks(r#"[Foo bar]:
<my url>
'title'

[Foo bar]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="my%20url" title="title">Foo bar</a></p>
"###.trim(), "HTML render mismatch for example 197");
    }
    #[test]
    fn golden_html_example_198() {
        let block_nodes = parse_blocks(r#"[foo]: /url '
title
line1
line2
'

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="
title
line1
line2
">foo</a></p>
"###.trim(), "HTML render mismatch for example 198");
    }
    #[test]
    fn golden_html_example_199() {
        let block_nodes = parse_blocks(r#"[foo]: /url 'title

with blank line'

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]: /url 'title</p>
<p>with blank line'</p>
<p>[foo]</p>
"###.trim(), "HTML render mismatch for example 199");
    }
    #[test]
    fn golden_html_example_200() {
        let block_nodes = parse_blocks(r#"[foo]:
/url

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url">foo</a></p>
"###.trim(), "HTML render mismatch for example 200");
    }
    #[test]
    fn golden_html_example_201() {
        let block_nodes = parse_blocks(r#"[foo]:

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]:</p>
<p>[foo]</p>
"###.trim(), "HTML render mismatch for example 201");
    }
    #[test]
    fn golden_html_example_202() {
        let block_nodes = parse_blocks(r#"[foo]: <>

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="">foo</a></p>
"###.trim(), "HTML render mismatch for example 202");
    }
    #[test]
    fn golden_html_example_203() {
        let block_nodes = parse_blocks(r#"[foo]: <bar>(baz)

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]: <bar>(baz)</p>
<p>[foo]</p>
"###.trim(), "HTML render mismatch for example 203");
    }
    #[test]
    fn golden_html_example_204() {
        let block_nodes = parse_blocks(r#"[foo]: /url\bar\*baz \"foo\\"bar\baz\"

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url%5Cbar*baz" title="foo&quot;bar\baz">foo</a></p>
"###.trim(), "HTML render mismatch for example 204");
    }
    #[test]
    fn golden_html_example_205() {
        let block_nodes = parse_blocks(r#"[foo]

[foo]: url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="url">foo</a></p>
"###.trim(), "HTML render mismatch for example 205");
    }
    #[test]
    fn golden_html_example_206() {
        let block_nodes = parse_blocks(r#"[foo]

[foo]: first
[foo]: second
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="first">foo</a></p>
"###.trim(), "HTML render mismatch for example 206");
    }
    #[test]
    fn golden_html_example_207() {
        let block_nodes = parse_blocks(r#"[FOO]: /url

[Foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url">Foo</a></p>
"###.trim(), "HTML render mismatch for example 207");
    }
    #[test]
    fn golden_html_example_208() {
        let block_nodes = parse_blocks(r#"[ΑΓΩ]: /φου

[αγω]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/%CF%86%CE%BF%CF%85">αγω</a></p>
"###.trim(), "HTML render mismatch for example 208");
    }
    #[test]
    fn golden_html_example_209() {
        let block_nodes = parse_blocks(r#"[foo]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###""###.trim(), "HTML render mismatch for example 209");
    }
    #[test]
    fn golden_html_example_210() {
        let block_nodes = parse_blocks(r#"[
foo
]: /url
bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>bar</p>
"###.trim(), "HTML render mismatch for example 210");
    }
    #[test]
    fn golden_html_example_211() {
        let block_nodes = parse_blocks(r#"[foo]: /url \"title\" ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]: /url &quot;title&quot; ok</p>
"###.trim(), "HTML render mismatch for example 211");
    }
    #[test]
    fn golden_html_example_212() {
        let block_nodes = parse_blocks(r#"[foo]: /url
\"title\" ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&quot;title&quot; ok</p>
"###.trim(), "HTML render mismatch for example 212");
    }
    #[test]
    fn golden_html_example_213() {
        let block_nodes = parse_blocks(r#"    [foo]: /url \"title\"

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>[foo]: /url &quot;title&quot;
</code></pre>
<p>[foo]</p>
"###.trim(), "HTML render mismatch for example 213");
    }
    #[test]
    fn golden_html_example_214() {
        let block_nodes = parse_blocks(r#"```
[foo]: /url
```

[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>[foo]: /url
</code></pre>
<p>[foo]</p>
"###.trim(), "HTML render mismatch for example 214");
    }
    #[test]
    fn golden_html_example_215() {
        let block_nodes = parse_blocks(r#"Foo
[bar]: /baz

[bar]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo
[bar]: /baz</p>
<p>[bar]</p>
"###.trim(), "HTML render mismatch for example 215");
    }
    #[test]
    fn golden_html_example_216() {
        let block_nodes = parse_blocks(r#"# [Foo]
[foo]: /url
> bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1><a href="/url">Foo</a></h1>
<blockquote>
<p>bar</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 216");
    }
    #[test]
    fn golden_html_example_217() {
        let block_nodes = parse_blocks(r#"[foo]: /url
bar
===
[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h1>bar</h1>
<p><a href="/url">foo</a></p>
"###.trim(), "HTML render mismatch for example 217");
    }
    #[test]
    fn golden_html_example_218() {
        let block_nodes = parse_blocks(r#"[foo]: /url
===
[foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>===
<a href="/url">foo</a></p>
"###.trim(), "HTML render mismatch for example 218");
    }
    #[test]
    fn golden_html_example_219() {
        let block_nodes = parse_blocks(r#"[foo]: /foo-url \"foo\"
[bar]: /bar-url
  \"bar\"
[baz]: /baz-url

[foo],
[bar],
[baz]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/foo-url" title="foo">foo</a>,
<a href="/bar-url" title="bar">bar</a>,
<a href="/baz-url">baz</a></p>
"###.trim(), "HTML render mismatch for example 219");
    }
    #[test]
    fn golden_html_example_220() {
        let block_nodes = parse_blocks(r#"[foo]

> [foo]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url">foo</a></p>
<blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 220");
    }
    #[test]
    fn golden_html_example_221() {
        let block_nodes = parse_blocks(r#"aaa

bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa</p>
<p>bbb</p>
"###.trim(), "HTML render mismatch for example 221");
    }
    #[test]
    fn golden_html_example_222() {
        let block_nodes = parse_blocks(r#"aaa
bbb

ccc
ddd
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa
bbb</p>
<p>ccc
ddd</p>
"###.trim(), "HTML render mismatch for example 222");
    }
    #[test]
    fn golden_html_example_223() {
        let block_nodes = parse_blocks(r#"aaa


bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa</p>
<p>bbb</p>
"###.trim(), "HTML render mismatch for example 223");
    }
    #[test]
    fn golden_html_example_224() {
        let block_nodes = parse_blocks(r#"  aaa
 bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa
bbb</p>
"###.trim(), "HTML render mismatch for example 224");
    }
    #[test]
    fn golden_html_example_225() {
        let block_nodes = parse_blocks(r#"aaa
             bbb
                                       ccc
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa
bbb
ccc</p>
"###.trim(), "HTML render mismatch for example 225");
    }
    #[test]
    fn golden_html_example_226() {
        let block_nodes = parse_blocks(r#"   aaa
bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa
bbb</p>
"###.trim(), "HTML render mismatch for example 226");
    }
    #[test]
    fn golden_html_example_227() {
        let block_nodes = parse_blocks(r#"    aaa
bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>aaa
</code></pre>
<p>bbb</p>
"###.trim(), "HTML render mismatch for example 227");
    }
    #[test]
    fn golden_html_example_228() {
        let block_nodes = parse_blocks(r#"aaa     
bbb     
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa<br />
bbb</p>
"###.trim(), "HTML render mismatch for example 228");
    }
    #[test]
    fn golden_html_example_229() {
        let block_nodes = parse_blocks(r#"  

aaa
  

# aaa

  
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aaa</p>
<h1>aaa</h1>
"###.trim(), "HTML render mismatch for example 229");
    }
    #[test]
    fn golden_html_example_230() {
        let block_nodes = parse_blocks(r#"> # Foo
> bar
> baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 230");
    }
    #[test]
    fn golden_html_example_231() {
        let block_nodes = parse_blocks(r#"># Foo
>bar
> baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 231");
    }
    #[test]
    fn golden_html_example_232() {
        let block_nodes = parse_blocks(r#"   > # Foo
   > bar
 > baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 232");
    }
    #[test]
    fn golden_html_example_233() {
        let block_nodes = parse_blocks(r#"    > # Foo
    > bar
    > baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>&gt; # Foo
&gt; bar
&gt; baz
</code></pre>
"###.trim(), "HTML render mismatch for example 233");
    }
    #[test]
    fn golden_html_example_234() {
        let block_nodes = parse_blocks(r#"> # Foo
> bar
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<h1>Foo</h1>
<p>bar
baz</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 234");
    }
    #[test]
    fn golden_html_example_235() {
        let block_nodes = parse_blocks(r#"> bar
baz
> foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>bar
baz
foo</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 235");
    }
    #[test]
    fn golden_html_example_236() {
        let block_nodes = parse_blocks(r#"> foo
---
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo</p>
</blockquote>
<hr />
"###.trim(), "HTML render mismatch for example 236");
    }
    #[test]
    fn golden_html_example_237() {
        let block_nodes = parse_blocks(r#"> - foo
- bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<ul>
<li>foo</li>
</ul>
</blockquote>
<ul>
<li>bar</li>
</ul>
"###.trim(), "HTML render mismatch for example 237");
    }
    #[test]
    fn golden_html_example_238() {
        let block_nodes = parse_blocks(r#">     foo
    bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<pre><code>foo
</code></pre>
</blockquote>
<pre><code>bar
</code></pre>
"###.trim(), "HTML render mismatch for example 238");
    }
    #[test]
    fn golden_html_example_239() {
        let block_nodes = parse_blocks(r#"> ```
foo
```
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<pre><code></code></pre>
</blockquote>
<p>foo</p>
<pre><code></code></pre>
"###.trim(), "HTML render mismatch for example 239");
    }
    #[test]
    fn golden_html_example_240() {
        let block_nodes = parse_blocks(r#"> foo
    - bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo
- bar</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 240");
    }
    #[test]
    fn golden_html_example_241() {
        let block_nodes = parse_blocks(r#">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 241");
    }
    #[test]
    fn golden_html_example_242() {
        let block_nodes = parse_blocks(r#">
>  
> 
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 242");
    }
    #[test]
    fn golden_html_example_243() {
        let block_nodes = parse_blocks(r#">
> foo
>  
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 243");
    }
    #[test]
    fn golden_html_example_244() {
        let block_nodes = parse_blocks(r#"> foo

> bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo</p>
</blockquote>
<blockquote>
<p>bar</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 244");
    }
    #[test]
    fn golden_html_example_245() {
        let block_nodes = parse_blocks(r#"> foo
> bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo
bar</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 245");
    }
    #[test]
    fn golden_html_example_246() {
        let block_nodes = parse_blocks(r#"> foo
>
> bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>foo</p>
<p>bar</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 246");
    }
    #[test]
    fn golden_html_example_247() {
        let block_nodes = parse_blocks(r#"foo
> bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo</p>
<blockquote>
<p>bar</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 247");
    }
    #[test]
    fn golden_html_example_248() {
        let block_nodes = parse_blocks(r#"> aaa
***
> bbb
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>aaa</p>
</blockquote>
<hr />
<blockquote>
<p>bbb</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 248");
    }
    #[test]
    fn golden_html_example_249() {
        let block_nodes = parse_blocks(r#"> bar
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>bar
baz</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 249");
    }
    #[test]
    fn golden_html_example_250() {
        let block_nodes = parse_blocks(r#"> bar

baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>bar</p>
</blockquote>
<p>baz</p>
"###.trim(), "HTML render mismatch for example 250");
    }
    #[test]
    fn golden_html_example_251() {
        let block_nodes = parse_blocks(r#"> bar
>
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<p>bar</p>
</blockquote>
<p>baz</p>
"###.trim(), "HTML render mismatch for example 251");
    }
    #[test]
    fn golden_html_example_252() {
        let block_nodes = parse_blocks(r#"> > > foo
bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<blockquote>
<blockquote>
<p>foo
bar</p>
</blockquote>
</blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 252");
    }
    #[test]
    fn golden_html_example_253() {
        let block_nodes = parse_blocks(r#">>> foo
> bar
>>baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<blockquote>
<blockquote>
<p>foo
bar
baz</p>
</blockquote>
</blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 253");
    }
    #[test]
    fn golden_html_example_254() {
        let block_nodes = parse_blocks(r#">     code

>    not code
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<pre><code>code
</code></pre>
</blockquote>
<blockquote>
<p>not code</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 254");
    }
    #[test]
    fn golden_html_example_255() {
        let block_nodes = parse_blocks(r#"A paragraph
with two lines.

    indented code

> A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 255");
    }
    #[test]
    fn golden_html_example_256() {
        let block_nodes = parse_blocks(r#"1.  A paragraph
    with two lines.

        indented code

    > A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 256");
    }
    #[test]
    fn golden_html_example_257() {
        let block_nodes = parse_blocks(r#"- one

 two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>one</li>
</ul>
<p>two</p>
"###.trim(), "HTML render mismatch for example 257");
    }
    #[test]
    fn golden_html_example_258() {
        let block_nodes = parse_blocks(r#"- one

  two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>one</p>
<p>two</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 258");
    }
    #[test]
    fn golden_html_example_259() {
        let block_nodes = parse_blocks(r#" -    one

     two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>one</li>
</ul>
<pre><code> two
</code></pre>
"###.trim(), "HTML render mismatch for example 259");
    }
    #[test]
    fn golden_html_example_260() {
        let block_nodes = parse_blocks(r#" -    one

      two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>one</p>
<p>two</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 260");
    }
    #[test]
    fn golden_html_example_261() {
        let block_nodes = parse_blocks(r#"   > > 1.  one
>>
>>     two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<blockquote>
<ol>
<li>
<p>one</p>
<p>two</p>
</li>
</ol>
</blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 261");
    }
    #[test]
    fn golden_html_example_262() {
        let block_nodes = parse_blocks(r#">>- one
>>
  >  > two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<blockquote>
<ul>
<li>one</li>
</ul>
<p>two</p>
</blockquote>
</blockquote>
"###.trim(), "HTML render mismatch for example 262");
    }
    #[test]
    fn golden_html_example_263() {
        let block_nodes = parse_blocks(r#"-one

2.two
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>-one</p>
<p>2.two</p>
"###.trim(), "HTML render mismatch for example 263");
    }
    #[test]
    fn golden_html_example_264() {
        let block_nodes = parse_blocks(r#"- foo


  bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 264");
    }
    #[test]
    fn golden_html_example_265() {
        let block_nodes = parse_blocks(r#"1.  foo

    ```
    bar
    ```

    baz

    > bam
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
<p>baz</p>
<blockquote>
<p>bam</p>
</blockquote>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 265");
    }
    #[test]
    fn golden_html_example_266() {
        let block_nodes = parse_blocks(r#"- Foo

      bar


      baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>Foo</p>
<pre><code>bar


baz
</code></pre>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 266");
    }
    #[test]
    fn golden_html_example_267() {
        let block_nodes = parse_blocks(r#"123456789. ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol start="123456789">
<li>ok</li>
</ol>
"###.trim(), "HTML render mismatch for example 267");
    }
    #[test]
    fn golden_html_example_268() {
        let block_nodes = parse_blocks(r#"1234567890. not ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>1234567890. not ok</p>
"###.trim(), "HTML render mismatch for example 268");
    }
    #[test]
    fn golden_html_example_269() {
        let block_nodes = parse_blocks(r#"0. ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol start="0">
<li>ok</li>
</ol>
"###.trim(), "HTML render mismatch for example 269");
    }
    #[test]
    fn golden_html_example_270() {
        let block_nodes = parse_blocks(r#"003. ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol start="3">
<li>ok</li>
</ol>
"###.trim(), "HTML render mismatch for example 270");
    }
    #[test]
    fn golden_html_example_271() {
        let block_nodes = parse_blocks(r#"-1. not ok
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>-1. not ok</p>
"###.trim(), "HTML render mismatch for example 271");
    }
    #[test]
    fn golden_html_example_272() {
        let block_nodes = parse_blocks(r#"- foo

      bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 272");
    }
    #[test]
    fn golden_html_example_273() {
        let block_nodes = parse_blocks(r#"  10.  foo

           bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol start="10">
<li>
<p>foo</p>
<pre><code>bar
</code></pre>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 273");
    }
    #[test]
    fn golden_html_example_274() {
        let block_nodes = parse_blocks(r#"    indented code

paragraph

    more code
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
"###.trim(), "HTML render mismatch for example 274");
    }
    #[test]
    fn golden_html_example_275() {
        let block_nodes = parse_blocks(r#"1.     indented code

   paragraph

       more code
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<pre><code>indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 275");
    }
    #[test]
    fn golden_html_example_276() {
        let block_nodes = parse_blocks(r#"1.      indented code

   paragraph

       more code
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<pre><code> indented code
</code></pre>
<p>paragraph</p>
<pre><code>more code
</code></pre>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 276");
    }
    #[test]
    fn golden_html_example_277() {
        let block_nodes = parse_blocks(r#"   foo

bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo</p>
<p>bar</p>
"###.trim(), "HTML render mismatch for example 277");
    }
    #[test]
    fn golden_html_example_278() {
        let block_nodes = parse_blocks(r#"-    foo

  bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
</ul>
<p>bar</p>
"###.trim(), "HTML render mismatch for example 278");
    }
    #[test]
    fn golden_html_example_279() {
        let block_nodes = parse_blocks(r#"-  foo

   bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<p>bar</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 279");
    }
    #[test]
    fn golden_html_example_280() {
        let block_nodes = parse_blocks(r#"-
  foo
-
  ```
  bar
  ```
-
      baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
<li>
<pre><code>bar
</code></pre>
</li>
<li>
<pre><code>baz
</code></pre>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 280");
    }
    #[test]
    fn golden_html_example_281() {
        let block_nodes = parse_blocks(r#"-   
  foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
</ul>
"###.trim(), "HTML render mismatch for example 281");
    }
    #[test]
    fn golden_html_example_282() {
        let block_nodes = parse_blocks(r#"-

  foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li></li>
</ul>
<p>foo</p>
"###.trim(), "HTML render mismatch for example 282");
    }
    #[test]
    fn golden_html_example_283() {
        let block_nodes = parse_blocks(r#"- foo
-
- bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
<li></li>
<li>bar</li>
</ul>
"###.trim(), "HTML render mismatch for example 283");
    }
    #[test]
    fn golden_html_example_284() {
        let block_nodes = parse_blocks(r#"- foo
-   
- bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
<li></li>
<li>bar</li>
</ul>
"###.trim(), "HTML render mismatch for example 284");
    }
    #[test]
    fn golden_html_example_285() {
        let block_nodes = parse_blocks(r#"1. foo
2.
3. bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>foo</li>
<li></li>
<li>bar</li>
</ol>
"###.trim(), "HTML render mismatch for example 285");
    }
    #[test]
    fn golden_html_example_286() {
        let block_nodes = parse_blocks(r#"*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li></li>
</ul>
"###.trim(), "HTML render mismatch for example 286");
    }
    #[test]
    fn golden_html_example_287() {
        let block_nodes = parse_blocks(r#"foo
*

foo
1.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo
*</p>
<p>foo
1.</p>
"###.trim(), "HTML render mismatch for example 287");
    }
    #[test]
    fn golden_html_example_288() {
        let block_nodes = parse_blocks(r#" 1.  A paragraph
     with two lines.

         indented code

     > A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 288");
    }
    #[test]
    fn golden_html_example_289() {
        let block_nodes = parse_blocks(r#"  1.  A paragraph
      with two lines.

          indented code

      > A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 289");
    }
    #[test]
    fn golden_html_example_290() {
        let block_nodes = parse_blocks(r#"   1.  A paragraph
       with two lines.

           indented code

       > A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 290");
    }
    #[test]
    fn golden_html_example_291() {
        let block_nodes = parse_blocks(r#"    1.  A paragraph
        with two lines.

            indented code

        > A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<pre><code>1.  A paragraph
    with two lines.

        indented code

    &gt; A block quote.
</code></pre>
"###.trim(), "HTML render mismatch for example 291");
    }
    #[test]
    fn golden_html_example_292() {
        let block_nodes = parse_blocks(r#"  1.  A paragraph
with two lines.

          indented code

      > A block quote.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>A paragraph
with two lines.</p>
<pre><code>indented code
</code></pre>
<blockquote>
<p>A block quote.</p>
</blockquote>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 292");
    }
    #[test]
    fn golden_html_example_293() {
        let block_nodes = parse_blocks(r#"  1.  A paragraph
    with two lines.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>A paragraph
with two lines.</li>
</ol>
"###.trim(), "HTML render mismatch for example 293");
    }
    #[test]
    fn golden_html_example_294() {
        let block_nodes = parse_blocks(r#"> 1. > Blockquote
continued here.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<ol>
<li>
<blockquote>
<p>Blockquote
continued here.</p>
</blockquote>
</li>
</ol>
</blockquote>
"###.trim(), "HTML render mismatch for example 294");
    }
    #[test]
    fn golden_html_example_295() {
        let block_nodes = parse_blocks(r#"> 1. > Blockquote
> continued here.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<blockquote>
<ol>
<li>
<blockquote>
<p>Blockquote
continued here.</p>
</blockquote>
</li>
</ol>
</blockquote>
"###.trim(), "HTML render mismatch for example 295");
    }
    #[test]
    fn golden_html_example_296() {
        let block_nodes = parse_blocks(r#"- foo
  - bar
    - baz
      - boo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>baz
<ul>
<li>boo</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 296");
    }
    #[test]
    fn golden_html_example_297() {
        let block_nodes = parse_blocks(r#"- foo
 - bar
  - baz
   - boo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
<li>bar</li>
<li>baz</li>
<li>boo</li>
</ul>
"###.trim(), "HTML render mismatch for example 297");
    }
    #[test]
    fn golden_html_example_298() {
        let block_nodes = parse_blocks(r#"10) foo
    - bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol start="10">
<li>foo
<ul>
<li>bar</li>
</ul>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 298");
    }
    #[test]
    fn golden_html_example_299() {
        let block_nodes = parse_blocks(r#"10) foo
   - bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol start="10">
<li>foo</li>
</ol>
<ul>
<li>bar</li>
</ul>
"###.trim(), "HTML render mismatch for example 299");
    }
    #[test]
    fn golden_html_example_300() {
        let block_nodes = parse_blocks(r#"- - foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<ul>
<li>foo</li>
</ul>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 300");
    }
    #[test]
    fn golden_html_example_301() {
        let block_nodes = parse_blocks(r#"1. - 2. foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<ul>
<li>
<ol start="2">
<li>foo</li>
</ol>
</li>
</ul>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 301");
    }
    #[test]
    fn golden_html_example_302() {
        let block_nodes = parse_blocks(r#"- # Foo
- Bar
  ---
  baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<h1>Foo</h1>
</li>
<li>
<h2>Bar</h2>
baz</li>
</ul>
"###.trim(), "HTML render mismatch for example 302");
    }
    #[test]
    fn golden_html_example_303() {
        let block_nodes = parse_blocks(r#"- foo
- bar
+ baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
<li>bar</li>
</ul>
<ul>
<li>baz</li>
</ul>
"###.trim(), "HTML render mismatch for example 303");
    }
    #[test]
    fn golden_html_example_304() {
        let block_nodes = parse_blocks(r#"1. foo
2. bar
3) baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>foo</li>
<li>bar</li>
</ol>
<ol start="3">
<li>baz</li>
</ol>
"###.trim(), "HTML render mismatch for example 304");
    }
    #[test]
    fn golden_html_example_305() {
        let block_nodes = parse_blocks(r#"Foo
- bar
- baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo</p>
<ul>
<li>bar</li>
<li>baz</li>
</ul>
"###.trim(), "HTML render mismatch for example 305");
    }
    #[test]
    fn golden_html_example_306() {
        let block_nodes = parse_blocks(r#"The number of windows in my house is
14.  The number of doors is 6.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>The number of windows in my house is
14.  The number of doors is 6.</p>
"###.trim(), "HTML render mismatch for example 306");
    }
    #[test]
    fn golden_html_example_307() {
        let block_nodes = parse_blocks(r#"The number of windows in my house is
1.  The number of doors is 6.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>The number of windows in my house is</p>
<ol>
<li>The number of doors is 6.</li>
</ol>
"###.trim(), "HTML render mismatch for example 307");
    }
    #[test]
    fn golden_html_example_308() {
        let block_nodes = parse_blocks(r#"- foo

- bar


- baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
</li>
<li>
<p>bar</p>
</li>
<li>
<p>baz</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 308");
    }
    #[test]
    fn golden_html_example_309() {
        let block_nodes = parse_blocks(r#"- foo
  - bar
    - baz


      bim
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo
<ul>
<li>bar
<ul>
<li>
<p>baz</p>
<p>bim</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 309");
    }
    #[test]
    fn golden_html_example_310() {
        let block_nodes = parse_blocks(r#"- foo
- bar

<!-- -->

- baz
- bim
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>foo</li>
<li>bar</li>
</ul>
<!-- -->
<ul>
<li>baz</li>
<li>bim</li>
</ul>
"###.trim(), "HTML render mismatch for example 310");
    }
    #[test]
    fn golden_html_example_311() {
        let block_nodes = parse_blocks(r#"-   foo

    notcode

-   foo

<!-- -->

    code
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<p>notcode</p>
</li>
<li>
<p>foo</p>
</li>
</ul>
<!-- -->
<pre><code>code
</code></pre>
"###.trim(), "HTML render mismatch for example 311");
    }
    #[test]
    fn golden_html_example_312() {
        let block_nodes = parse_blocks(r#"- a
 - b
  - c
   - d
  - e
 - f
- g
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d</li>
<li>e</li>
<li>f</li>
<li>g</li>
</ul>
"###.trim(), "HTML render mismatch for example 312");
    }
    #[test]
    fn golden_html_example_313() {
        let block_nodes = parse_blocks(r#"1. a

  2. b

   3. c
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>c</p>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 313");
    }
    #[test]
    fn golden_html_example_314() {
        let block_nodes = parse_blocks(r#"- a
 - b
  - c
   - d
    - e
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a</li>
<li>b</li>
<li>c</li>
<li>d
- e</li>
</ul>
"###.trim(), "HTML render mismatch for example 314");
    }
    #[test]
    fn golden_html_example_315() {
        let block_nodes = parse_blocks(r#"1. a

  2. b

    3. c
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
</ol>
<pre><code>3. c
</code></pre>
"###.trim(), "HTML render mismatch for example 315");
    }
    #[test]
    fn golden_html_example_316() {
        let block_nodes = parse_blocks(r#"- a
- b

- c
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>c</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 316");
    }
    #[test]
    fn golden_html_example_317() {
        let block_nodes = parse_blocks(r#"* a
*

* c
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>a</p>
</li>
<li></li>
<li>
<p>c</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 317");
    }
    #[test]
    fn golden_html_example_318() {
        let block_nodes = parse_blocks(r#"- a
- b

  c
- d
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
<p>c</p>
</li>
<li>
<p>d</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 318");
    }
    #[test]
    fn golden_html_example_319() {
        let block_nodes = parse_blocks(r#"- a
- b

  [ref]: /url
- d
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>a</p>
</li>
<li>
<p>b</p>
</li>
<li>
<p>d</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 319");
    }
    #[test]
    fn golden_html_example_320() {
        let block_nodes = parse_blocks(r#"- a
- ```
  b


  ```
- c
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a</li>
<li>
<pre><code>b


</code></pre>
</li>
<li>c</li>
</ul>
"###.trim(), "HTML render mismatch for example 320");
    }
    #[test]
    fn golden_html_example_321() {
        let block_nodes = parse_blocks(r#"- a
  - b

    c
- d
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a
<ul>
<li>
<p>b</p>
<p>c</p>
</li>
</ul>
</li>
<li>d</li>
</ul>
"###.trim(), "HTML render mismatch for example 321");
    }
    #[test]
    fn golden_html_example_322() {
        let block_nodes = parse_blocks(r#"* a
  > b
  >
* c
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a
<blockquote>
<p>b</p>
</blockquote>
</li>
<li>c</li>
</ul>
"###.trim(), "HTML render mismatch for example 322");
    }
    #[test]
    fn golden_html_example_323() {
        let block_nodes = parse_blocks(r#"- a
  > b
  ```
  c
  ```
- d
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a
<blockquote>
<p>b</p>
</blockquote>
<pre><code>c
</code></pre>
</li>
<li>d</li>
</ul>
"###.trim(), "HTML render mismatch for example 323");
    }
    #[test]
    fn golden_html_example_324() {
        let block_nodes = parse_blocks(r#"- a
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a</li>
</ul>
"###.trim(), "HTML render mismatch for example 324");
    }
    #[test]
    fn golden_html_example_325() {
        let block_nodes = parse_blocks(r#"- a
  - b
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>a
<ul>
<li>b</li>
</ul>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 325");
    }
    #[test]
    fn golden_html_example_326() {
        let block_nodes = parse_blocks(r#"1. ```
   foo
   ```

   bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ol>
<li>
<pre><code>foo
</code></pre>
<p>bar</p>
</li>
</ol>
"###.trim(), "HTML render mismatch for example 326");
    }
    #[test]
    fn golden_html_example_327() {
        let block_nodes = parse_blocks(r#"* foo
  * bar

  baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>foo</p>
<ul>
<li>bar</li>
</ul>
<p>baz</p>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 327");
    }
    #[test]
    fn golden_html_example_328() {
        let block_nodes = parse_blocks(r#"- a
  - b
  - c

- d
  - e
  - f
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<ul>
<li>
<p>a</p>
<ul>
<li>b</li>
<li>c</li>
</ul>
</li>
<li>
<p>d</p>
<ul>
<li>e</li>
<li>f</li>
</ul>
</li>
</ul>
"###.trim(), "HTML render mismatch for example 328");
    }
    #[test]
    fn golden_html_example_329() {
        let block_nodes = parse_blocks(r#"`hi`lo`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>hi</code>lo`</p>
"###.trim(), "HTML render mismatch for example 329");
    }
    #[test]
    fn golden_html_example_330() {
        let block_nodes = parse_blocks(r#"`foo`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo</code></p>
"###.trim(), "HTML render mismatch for example 330");
    }
    #[test]
    fn golden_html_example_331() {
        let block_nodes = parse_blocks(r#"`` foo ` bar ``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo ` bar</code></p>
"###.trim(), "HTML render mismatch for example 331");
    }
    #[test]
    fn golden_html_example_332() {
        let block_nodes = parse_blocks(r#"` `` `
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>``</code></p>
"###.trim(), "HTML render mismatch for example 332");
    }
    #[test]
    fn golden_html_example_333() {
        let block_nodes = parse_blocks(r#"`  ``  `
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code> `` </code></p>
"###.trim(), "HTML render mismatch for example 333");
    }
    #[test]
    fn golden_html_example_334() {
        let block_nodes = parse_blocks(r#"` a`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code> a</code></p>
"###.trim(), "HTML render mismatch for example 334");
    }
    #[test]
    fn golden_html_example_335() {
        let block_nodes = parse_blocks(r#"` b `
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code> b </code></p>
"###.trim(), "HTML render mismatch for example 335");
    }
    #[test]
    fn golden_html_example_336() {
        let block_nodes = parse_blocks(r#"` `
`  `
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code> </code>
<code>  </code></p>
"###.trim(), "HTML render mismatch for example 336");
    }
    #[test]
    fn golden_html_example_337() {
        let block_nodes = parse_blocks(r#"``
foo
bar  
baz
``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo bar   baz</code></p>
"###.trim(), "HTML render mismatch for example 337");
    }
    #[test]
    fn golden_html_example_338() {
        let block_nodes = parse_blocks(r#"``
foo 
``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo </code></p>
"###.trim(), "HTML render mismatch for example 338");
    }
    #[test]
    fn golden_html_example_339() {
        let block_nodes = parse_blocks(r#"`foo   bar 
baz`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo   bar  baz</code></p>
"###.trim(), "HTML render mismatch for example 339");
    }
    #[test]
    fn golden_html_example_340() {
        let block_nodes = parse_blocks(r#"`foo\`bar`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo\</code>bar`</p>
"###.trim(), "HTML render mismatch for example 340");
    }
    #[test]
    fn golden_html_example_341() {
        let block_nodes = parse_blocks(r#"``foo`bar``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo`bar</code></p>
"###.trim(), "HTML render mismatch for example 341");
    }
    #[test]
    fn golden_html_example_342() {
        let block_nodes = parse_blocks(r#"` foo `` bar `
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>foo `` bar</code></p>
"###.trim(), "HTML render mismatch for example 342");
    }
    #[test]
    fn golden_html_example_343() {
        let block_nodes = parse_blocks(r#"*foo`*`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*foo<code>*</code></p>
"###.trim(), "HTML render mismatch for example 343");
    }
    #[test]
    fn golden_html_example_344() {
        let block_nodes = parse_blocks(r#"[not a `link](/foo`)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[not a <code>link](/foo</code>)</p>
"###.trim(), "HTML render mismatch for example 344");
    }
    #[test]
    fn golden_html_example_345() {
        let block_nodes = parse_blocks(r#"`<a href=\"`\">`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>
"###.trim(), "HTML render mismatch for example 345");
    }
    #[test]
    fn golden_html_example_346() {
        let block_nodes = parse_blocks(r#"<a href=\"`\">`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="`">`</p>
"###.trim(), "HTML render mismatch for example 346");
    }
    #[test]
    fn golden_html_example_347() {
        let block_nodes = parse_blocks(r#"`<https://foo.bar.`baz>`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>&lt;https://foo.bar.</code>baz&gt;`</p>
"###.trim(), "HTML render mismatch for example 347");
    }
    #[test]
    fn golden_html_example_348() {
        let block_nodes = parse_blocks(r#"<https://foo.bar.`baz>`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="https://foo.bar.%60baz">https://foo.bar.`baz</a>`</p>
"###.trim(), "HTML render mismatch for example 348");
    }
    #[test]
    fn golden_html_example_349() {
        let block_nodes = parse_blocks(r#"```foo``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>```foo``</p>
"###.trim(), "HTML render mismatch for example 349");
    }
    #[test]
    fn golden_html_example_350() {
        let block_nodes = parse_blocks(r#"`foo
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>`foo</p>
"###.trim(), "HTML render mismatch for example 350");
    }
    #[test]
    fn golden_html_example_351() {
        let block_nodes = parse_blocks(r#"`foo``bar``
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>`foo<code>bar</code></p>
"###.trim(), "HTML render mismatch for example 351");
    }
    #[test]
    fn golden_html_example_352() {
        let block_nodes = parse_blocks(r#"*foo bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo bar</em></p>
"###.trim(), "HTML render mismatch for example 352");
    }
    #[test]
    fn golden_html_example_353() {
        let block_nodes = parse_blocks(r#"a * foo bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>a * foo bar*</p>
"###.trim(), "HTML render mismatch for example 353");
    }
    #[test]
    fn golden_html_example_354() {
        let block_nodes = parse_blocks(r#"a*\"foo\"*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>a*&quot;foo&quot;*</p>
"###.trim(), "HTML render mismatch for example 354");
    }
    #[test]
    fn golden_html_example_355() {
        let block_nodes = parse_blocks(r#"* a *
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>* a *</p>
"###.trim(), "HTML render mismatch for example 355");
    }
    #[test]
    fn golden_html_example_356() {
        let block_nodes = parse_blocks(r#"*$*alpha.

*£*bravo.

*€*charlie.

*𞋿*delta.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*$*alpha.</p>
<p>*£*bravo.</p>
<p>*€*charlie.</p>
<p>*𞋿*delta.</p>
"###.trim(), "HTML render mismatch for example 356");
    }
    #[test]
    fn golden_html_example_357() {
        let block_nodes = parse_blocks(r#"foo*bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<em>bar</em></p>
"###.trim(), "HTML render mismatch for example 357");
    }
    #[test]
    fn golden_html_example_358() {
        let block_nodes = parse_blocks(r#"5*6*78
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>5<em>6</em>78</p>
"###.trim(), "HTML render mismatch for example 358");
    }
    #[test]
    fn golden_html_example_359() {
        let block_nodes = parse_blocks(r#"_foo bar_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo bar</em></p>
"###.trim(), "HTML render mismatch for example 359");
    }
    #[test]
    fn golden_html_example_360() {
        let block_nodes = parse_blocks(r#"_ foo bar_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_ foo bar_</p>
"###.trim(), "HTML render mismatch for example 360");
    }
    #[test]
    fn golden_html_example_361() {
        let block_nodes = parse_blocks(r#"a_\"foo\"_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>a_&quot;foo&quot;_</p>
"###.trim(), "HTML render mismatch for example 361");
    }
    #[test]
    fn golden_html_example_362() {
        let block_nodes = parse_blocks(r#"foo_bar_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo_bar_</p>
"###.trim(), "HTML render mismatch for example 362");
    }
    #[test]
    fn golden_html_example_363() {
        let block_nodes = parse_blocks(r#"5_6_78
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>5_6_78</p>
"###.trim(), "HTML render mismatch for example 363");
    }
    #[test]
    fn golden_html_example_364() {
        let block_nodes = parse_blocks(r#"пристаням_стремятся_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>пристаням_стремятся_</p>
"###.trim(), "HTML render mismatch for example 364");
    }
    #[test]
    fn golden_html_example_365() {
        let block_nodes = parse_blocks(r#"aa_\"bb\"_cc
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>aa_&quot;bb&quot;_cc</p>
"###.trim(), "HTML render mismatch for example 365");
    }
    #[test]
    fn golden_html_example_366() {
        let block_nodes = parse_blocks(r#"foo-_(bar)_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo-<em>(bar)</em></p>
"###.trim(), "HTML render mismatch for example 366");
    }
    #[test]
    fn golden_html_example_367() {
        let block_nodes = parse_blocks(r#"_foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_foo*</p>
"###.trim(), "HTML render mismatch for example 367");
    }
    #[test]
    fn golden_html_example_368() {
        let block_nodes = parse_blocks(r#"*foo bar *
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*foo bar *</p>
"###.trim(), "HTML render mismatch for example 368");
    }
    #[test]
    fn golden_html_example_369() {
        let block_nodes = parse_blocks(r#"*foo bar
*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*foo bar
*</p>
"###.trim(), "HTML render mismatch for example 369");
    }
    #[test]
    fn golden_html_example_370() {
        let block_nodes = parse_blocks(r#"*(*foo)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*(*foo)</p>
"###.trim(), "HTML render mismatch for example 370");
    }
    #[test]
    fn golden_html_example_371() {
        let block_nodes = parse_blocks(r#"*(*foo*)*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>(<em>foo</em>)</em></p>
"###.trim(), "HTML render mismatch for example 371");
    }
    #[test]
    fn golden_html_example_372() {
        let block_nodes = parse_blocks(r#"*foo*bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo</em>bar</p>
"###.trim(), "HTML render mismatch for example 372");
    }
    #[test]
    fn golden_html_example_373() {
        let block_nodes = parse_blocks(r#"_foo bar _
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_foo bar _</p>
"###.trim(), "HTML render mismatch for example 373");
    }
    #[test]
    fn golden_html_example_374() {
        let block_nodes = parse_blocks(r#"_(_foo)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_(_foo)</p>
"###.trim(), "HTML render mismatch for example 374");
    }
    #[test]
    fn golden_html_example_375() {
        let block_nodes = parse_blocks(r#"_(_foo_)_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>(<em>foo</em>)</em></p>
"###.trim(), "HTML render mismatch for example 375");
    }
    #[test]
    fn golden_html_example_376() {
        let block_nodes = parse_blocks(r#"_foo_bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_foo_bar</p>
"###.trim(), "HTML render mismatch for example 376");
    }
    #[test]
    fn golden_html_example_377() {
        let block_nodes = parse_blocks(r#"_пристаням_стремятся
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_пристаням_стремятся</p>
"###.trim(), "HTML render mismatch for example 377");
    }
    #[test]
    fn golden_html_example_378() {
        let block_nodes = parse_blocks(r#"_foo_bar_baz_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo_bar_baz</em></p>
"###.trim(), "HTML render mismatch for example 378");
    }
    #[test]
    fn golden_html_example_379() {
        let block_nodes = parse_blocks(r#"_(bar)_.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>(bar)</em>.</p>
"###.trim(), "HTML render mismatch for example 379");
    }
    #[test]
    fn golden_html_example_380() {
        let block_nodes = parse_blocks(r#"**foo bar**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo bar</strong></p>
"###.trim(), "HTML render mismatch for example 380");
    }
    #[test]
    fn golden_html_example_381() {
        let block_nodes = parse_blocks(r#"** foo bar**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>** foo bar**</p>
"###.trim(), "HTML render mismatch for example 381");
    }
    #[test]
    fn golden_html_example_382() {
        let block_nodes = parse_blocks(r#"a**\"foo\"**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>a**&quot;foo&quot;**</p>
"###.trim(), "HTML render mismatch for example 382");
    }
    #[test]
    fn golden_html_example_383() {
        let block_nodes = parse_blocks(r#"foo**bar**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<strong>bar</strong></p>
"###.trim(), "HTML render mismatch for example 383");
    }
    #[test]
    fn golden_html_example_384() {
        let block_nodes = parse_blocks(r#"__foo bar__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo bar</strong></p>
"###.trim(), "HTML render mismatch for example 384");
    }
    #[test]
    fn golden_html_example_385() {
        let block_nodes = parse_blocks(r#"__ foo bar__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__ foo bar__</p>
"###.trim(), "HTML render mismatch for example 385");
    }
    #[test]
    fn golden_html_example_386() {
        let block_nodes = parse_blocks(r#"__
foo bar__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__
foo bar__</p>
"###.trim(), "HTML render mismatch for example 386");
    }
    #[test]
    fn golden_html_example_387() {
        let block_nodes = parse_blocks(r#"a__\"foo\"__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>a__&quot;foo&quot;__</p>
"###.trim(), "HTML render mismatch for example 387");
    }
    #[test]
    fn golden_html_example_388() {
        let block_nodes = parse_blocks(r#"foo__bar__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo__bar__</p>
"###.trim(), "HTML render mismatch for example 388");
    }
    #[test]
    fn golden_html_example_389() {
        let block_nodes = parse_blocks(r#"5__6__78
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>5__6__78</p>
"###.trim(), "HTML render mismatch for example 389");
    }
    #[test]
    fn golden_html_example_390() {
        let block_nodes = parse_blocks(r#"пристаням__стремятся__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>пристаням__стремятся__</p>
"###.trim(), "HTML render mismatch for example 390");
    }
    #[test]
    fn golden_html_example_391() {
        let block_nodes = parse_blocks(r#"__foo, __bar__, baz__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo, <strong>bar</strong>, baz</strong></p>
"###.trim(), "HTML render mismatch for example 391");
    }
    #[test]
    fn golden_html_example_392() {
        let block_nodes = parse_blocks(r#"foo-__(bar)__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo-<strong>(bar)</strong></p>
"###.trim(), "HTML render mismatch for example 392");
    }
    #[test]
    fn golden_html_example_393() {
        let block_nodes = parse_blocks(r#"**foo bar **
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>**foo bar **</p>
"###.trim(), "HTML render mismatch for example 393");
    }
    #[test]
    fn golden_html_example_394() {
        let block_nodes = parse_blocks(r#"**(**foo)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>**(**foo)</p>
"###.trim(), "HTML render mismatch for example 394");
    }
    #[test]
    fn golden_html_example_395() {
        let block_nodes = parse_blocks(r#"*(**foo**)*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>(<strong>foo</strong>)</em></p>
"###.trim(), "HTML render mismatch for example 395");
    }
    #[test]
    fn golden_html_example_396() {
        let block_nodes = parse_blocks(r#"**Gomphocarpus (*Gomphocarpus physocarpus*, syn.
*Asclepias physocarpa*)**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.
<em>Asclepias physocarpa</em>)</strong></p>
"###.trim(), "HTML render mismatch for example 396");
    }
    #[test]
    fn golden_html_example_397() {
        let block_nodes = parse_blocks(r#"**foo \"*bar*\" foo**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>
"###.trim(), "HTML render mismatch for example 397");
    }
    #[test]
    fn golden_html_example_398() {
        let block_nodes = parse_blocks(r#"**foo**bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo</strong>bar</p>
"###.trim(), "HTML render mismatch for example 398");
    }
    #[test]
    fn golden_html_example_399() {
        let block_nodes = parse_blocks(r#"__foo bar __
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__foo bar __</p>
"###.trim(), "HTML render mismatch for example 399");
    }
    #[test]
    fn golden_html_example_400() {
        let block_nodes = parse_blocks(r#"__(__foo)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__(__foo)</p>
"###.trim(), "HTML render mismatch for example 400");
    }
    #[test]
    fn golden_html_example_401() {
        let block_nodes = parse_blocks(r#"_(__foo__)_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>(<strong>foo</strong>)</em></p>
"###.trim(), "HTML render mismatch for example 401");
    }
    #[test]
    fn golden_html_example_402() {
        let block_nodes = parse_blocks(r#"__foo__bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__foo__bar</p>
"###.trim(), "HTML render mismatch for example 402");
    }
    #[test]
    fn golden_html_example_403() {
        let block_nodes = parse_blocks(r#"__пристаням__стремятся
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__пристаням__стремятся</p>
"###.trim(), "HTML render mismatch for example 403");
    }
    #[test]
    fn golden_html_example_404() {
        let block_nodes = parse_blocks(r#"__foo__bar__baz__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo__bar__baz</strong></p>
"###.trim(), "HTML render mismatch for example 404");
    }
    #[test]
    fn golden_html_example_405() {
        let block_nodes = parse_blocks(r#"__(bar)__.
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>(bar)</strong>.</p>
"###.trim(), "HTML render mismatch for example 405");
    }
    #[test]
    fn golden_html_example_406() {
        let block_nodes = parse_blocks(r#"*foo [bar](/url)*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <a href="/url">bar</a></em></p>
"###.trim(), "HTML render mismatch for example 406");
    }
    #[test]
    fn golden_html_example_407() {
        let block_nodes = parse_blocks(r#"*foo
bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo
bar</em></p>
"###.trim(), "HTML render mismatch for example 407");
    }
    #[test]
    fn golden_html_example_408() {
        let block_nodes = parse_blocks(r#"_foo __bar__ baz_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <strong>bar</strong> baz</em></p>
"###.trim(), "HTML render mismatch for example 408");
    }
    #[test]
    fn golden_html_example_409() {
        let block_nodes = parse_blocks(r#"_foo _bar_ baz_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <em>bar</em> baz</em></p>
"###.trim(), "HTML render mismatch for example 409");
    }
    #[test]
    fn golden_html_example_410() {
        let block_nodes = parse_blocks(r#"__foo_ bar_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em><em>foo</em> bar</em></p>
"###.trim(), "HTML render mismatch for example 410");
    }
    #[test]
    fn golden_html_example_411() {
        let block_nodes = parse_blocks(r#"*foo *bar**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <em>bar</em></em></p>
"###.trim(), "HTML render mismatch for example 411");
    }
    #[test]
    fn golden_html_example_412() {
        let block_nodes = parse_blocks(r#"*foo **bar** baz*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <strong>bar</strong> baz</em></p>
"###.trim(), "HTML render mismatch for example 412");
    }
    #[test]
    fn golden_html_example_413() {
        let block_nodes = parse_blocks(r#"*foo**bar**baz*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo<strong>bar</strong>baz</em></p>
"###.trim(), "HTML render mismatch for example 413");
    }
    #[test]
    fn golden_html_example_414() {
        let block_nodes = parse_blocks(r#"*foo**bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo**bar</em></p>
"###.trim(), "HTML render mismatch for example 414");
    }
    #[test]
    fn golden_html_example_415() {
        let block_nodes = parse_blocks(r#"***foo** bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em><strong>foo</strong> bar</em></p>
"###.trim(), "HTML render mismatch for example 415");
    }
    #[test]
    fn golden_html_example_416() {
        let block_nodes = parse_blocks(r#"*foo **bar***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <strong>bar</strong></em></p>
"###.trim(), "HTML render mismatch for example 416");
    }
    #[test]
    fn golden_html_example_417() {
        let block_nodes = parse_blocks(r#"*foo**bar***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo<strong>bar</strong></em></p>
"###.trim(), "HTML render mismatch for example 417");
    }
    #[test]
    fn golden_html_example_418() {
        let block_nodes = parse_blocks(r#"foo***bar***baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<em><strong>bar</strong></em>baz</p>
"###.trim(), "HTML render mismatch for example 418");
    }
    #[test]
    fn golden_html_example_419() {
        let block_nodes = parse_blocks(r#"foo******bar*********baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>
"###.trim(), "HTML render mismatch for example 419");
    }
    #[test]
    fn golden_html_example_420() {
        let block_nodes = parse_blocks(r#"*foo **bar *baz* bim** bop*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>
"###.trim(), "HTML render mismatch for example 420");
    }
    #[test]
    fn golden_html_example_421() {
        let block_nodes = parse_blocks(r#"*foo [*bar*](/url)*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <a href="/url"><em>bar</em></a></em></p>
"###.trim(), "HTML render mismatch for example 421");
    }
    #[test]
    fn golden_html_example_422() {
        let block_nodes = parse_blocks(r#"** is not an empty emphasis
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>** is not an empty emphasis</p>
"###.trim(), "HTML render mismatch for example 422");
    }
    #[test]
    fn golden_html_example_423() {
        let block_nodes = parse_blocks(r#"**** is not an empty strong emphasis
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>**** is not an empty strong emphasis</p>
"###.trim(), "HTML render mismatch for example 423");
    }
    #[test]
    fn golden_html_example_424() {
        let block_nodes = parse_blocks(r#"**foo [bar](/url)**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <a href="/url">bar</a></strong></p>
"###.trim(), "HTML render mismatch for example 424");
    }
    #[test]
    fn golden_html_example_425() {
        let block_nodes = parse_blocks(r#"**foo
bar**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo
bar</strong></p>
"###.trim(), "HTML render mismatch for example 425");
    }
    #[test]
    fn golden_html_example_426() {
        let block_nodes = parse_blocks(r#"__foo _bar_ baz__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <em>bar</em> baz</strong></p>
"###.trim(), "HTML render mismatch for example 426");
    }
    #[test]
    fn golden_html_example_427() {
        let block_nodes = parse_blocks(r#"__foo __bar__ baz__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <strong>bar</strong> baz</strong></p>
"###.trim(), "HTML render mismatch for example 427");
    }
    #[test]
    fn golden_html_example_428() {
        let block_nodes = parse_blocks(r#"____foo__ bar__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong><strong>foo</strong> bar</strong></p>
"###.trim(), "HTML render mismatch for example 428");
    }
    #[test]
    fn golden_html_example_429() {
        let block_nodes = parse_blocks(r#"**foo **bar****
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <strong>bar</strong></strong></p>
"###.trim(), "HTML render mismatch for example 429");
    }
    #[test]
    fn golden_html_example_430() {
        let block_nodes = parse_blocks(r#"**foo *bar* baz**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <em>bar</em> baz</strong></p>
"###.trim(), "HTML render mismatch for example 430");
    }
    #[test]
    fn golden_html_example_431() {
        let block_nodes = parse_blocks(r#"**foo*bar*baz**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo<em>bar</em>baz</strong></p>
"###.trim(), "HTML render mismatch for example 431");
    }
    #[test]
    fn golden_html_example_432() {
        let block_nodes = parse_blocks(r#"***foo* bar**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong><em>foo</em> bar</strong></p>
"###.trim(), "HTML render mismatch for example 432");
    }
    #[test]
    fn golden_html_example_433() {
        let block_nodes = parse_blocks(r#"**foo *bar***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <em>bar</em></strong></p>
"###.trim(), "HTML render mismatch for example 433");
    }
    #[test]
    fn golden_html_example_434() {
        let block_nodes = parse_blocks(r#"**foo *bar **baz**
bim* bop**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <em>bar <strong>baz</strong>
bim</em> bop</strong></p>
"###.trim(), "HTML render mismatch for example 434");
    }
    #[test]
    fn golden_html_example_435() {
        let block_nodes = parse_blocks(r#"**foo [*bar*](/url)**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo <a href="/url"><em>bar</em></a></strong></p>
"###.trim(), "HTML render mismatch for example 435");
    }
    #[test]
    fn golden_html_example_436() {
        let block_nodes = parse_blocks(r#"__ is not an empty emphasis
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__ is not an empty emphasis</p>
"###.trim(), "HTML render mismatch for example 436");
    }
    #[test]
    fn golden_html_example_437() {
        let block_nodes = parse_blocks(r#"____ is not an empty strong emphasis
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>____ is not an empty strong emphasis</p>
"###.trim(), "HTML render mismatch for example 437");
    }
    #[test]
    fn golden_html_example_438() {
        let block_nodes = parse_blocks(r#"foo ***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo ***</p>
"###.trim(), "HTML render mismatch for example 438");
    }
    #[test]
    fn golden_html_example_439() {
        let block_nodes = parse_blocks(r#"foo *\**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <em>*</em></p>
"###.trim(), "HTML render mismatch for example 439");
    }
    #[test]
    fn golden_html_example_440() {
        let block_nodes = parse_blocks(r#"foo *_*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <em>_</em></p>
"###.trim(), "HTML render mismatch for example 440");
    }
    #[test]
    fn golden_html_example_441() {
        let block_nodes = parse_blocks(r#"foo *****
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo *****</p>
"###.trim(), "HTML render mismatch for example 441");
    }
    #[test]
    fn golden_html_example_442() {
        let block_nodes = parse_blocks(r#"foo **\***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <strong>*</strong></p>
"###.trim(), "HTML render mismatch for example 442");
    }
    #[test]
    fn golden_html_example_443() {
        let block_nodes = parse_blocks(r#"foo **_**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <strong>_</strong></p>
"###.trim(), "HTML render mismatch for example 443");
    }
    #[test]
    fn golden_html_example_444() {
        let block_nodes = parse_blocks(r#"**foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<em>foo</em></p>
"###.trim(), "HTML render mismatch for example 444");
    }
    #[test]
    fn golden_html_example_445() {
        let block_nodes = parse_blocks(r#"*foo**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo</em>*</p>
"###.trim(), "HTML render mismatch for example 445");
    }
    #[test]
    fn golden_html_example_446() {
        let block_nodes = parse_blocks(r#"***foo**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<strong>foo</strong></p>
"###.trim(), "HTML render mismatch for example 446");
    }
    #[test]
    fn golden_html_example_447() {
        let block_nodes = parse_blocks(r#"****foo*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>***<em>foo</em></p>
"###.trim(), "HTML render mismatch for example 447");
    }
    #[test]
    fn golden_html_example_448() {
        let block_nodes = parse_blocks(r#"**foo***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo</strong>*</p>
"###.trim(), "HTML render mismatch for example 448");
    }
    #[test]
    fn golden_html_example_449() {
        let block_nodes = parse_blocks(r#"*foo****
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo</em>***</p>
"###.trim(), "HTML render mismatch for example 449");
    }
    #[test]
    fn golden_html_example_450() {
        let block_nodes = parse_blocks(r#"foo ___
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo ___</p>
"###.trim(), "HTML render mismatch for example 450");
    }
    #[test]
    fn golden_html_example_451() {
        let block_nodes = parse_blocks(r#"foo _\__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <em>_</em></p>
"###.trim(), "HTML render mismatch for example 451");
    }
    #[test]
    fn golden_html_example_452() {
        let block_nodes = parse_blocks(r#"foo _*_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <em>*</em></p>
"###.trim(), "HTML render mismatch for example 452");
    }
    #[test]
    fn golden_html_example_453() {
        let block_nodes = parse_blocks(r#"foo _____
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo _____</p>
"###.trim(), "HTML render mismatch for example 453");
    }
    #[test]
    fn golden_html_example_454() {
        let block_nodes = parse_blocks(r#"foo __\___
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <strong>_</strong></p>
"###.trim(), "HTML render mismatch for example 454");
    }
    #[test]
    fn golden_html_example_455() {
        let block_nodes = parse_blocks(r#"foo __*__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <strong>*</strong></p>
"###.trim(), "HTML render mismatch for example 455");
    }
    #[test]
    fn golden_html_example_456() {
        let block_nodes = parse_blocks(r#"__foo_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_<em>foo</em></p>
"###.trim(), "HTML render mismatch for example 456");
    }
    #[test]
    fn golden_html_example_457() {
        let block_nodes = parse_blocks(r#"_foo__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo</em>_</p>
"###.trim(), "HTML render mismatch for example 457");
    }
    #[test]
    fn golden_html_example_458() {
        let block_nodes = parse_blocks(r#"___foo__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_<strong>foo</strong></p>
"###.trim(), "HTML render mismatch for example 458");
    }
    #[test]
    fn golden_html_example_459() {
        let block_nodes = parse_blocks(r#"____foo_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>___<em>foo</em></p>
"###.trim(), "HTML render mismatch for example 459");
    }
    #[test]
    fn golden_html_example_460() {
        let block_nodes = parse_blocks(r#"__foo___
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo</strong>_</p>
"###.trim(), "HTML render mismatch for example 460");
    }
    #[test]
    fn golden_html_example_461() {
        let block_nodes = parse_blocks(r#"_foo____
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo</em>___</p>
"###.trim(), "HTML render mismatch for example 461");
    }
    #[test]
    fn golden_html_example_462() {
        let block_nodes = parse_blocks(r#"**foo**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo</strong></p>
"###.trim(), "HTML render mismatch for example 462");
    }
    #[test]
    fn golden_html_example_463() {
        let block_nodes = parse_blocks(r#"*_foo_*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em><em>foo</em></em></p>
"###.trim(), "HTML render mismatch for example 463");
    }
    #[test]
    fn golden_html_example_464() {
        let block_nodes = parse_blocks(r#"__foo__
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong>foo</strong></p>
"###.trim(), "HTML render mismatch for example 464");
    }
    #[test]
    fn golden_html_example_465() {
        let block_nodes = parse_blocks(r#"_*foo*_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em><em>foo</em></em></p>
"###.trim(), "HTML render mismatch for example 465");
    }
    #[test]
    fn golden_html_example_466() {
        let block_nodes = parse_blocks(r#"****foo****
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong><strong>foo</strong></strong></p>
"###.trim(), "HTML render mismatch for example 466");
    }
    #[test]
    fn golden_html_example_467() {
        let block_nodes = parse_blocks(r#"____foo____
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong><strong>foo</strong></strong></p>
"###.trim(), "HTML render mismatch for example 467");
    }
    #[test]
    fn golden_html_example_468() {
        let block_nodes = parse_blocks(r#"******foo******
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><strong><strong><strong>foo</strong></strong></strong></p>
"###.trim(), "HTML render mismatch for example 468");
    }
    #[test]
    fn golden_html_example_469() {
        let block_nodes = parse_blocks(r#"***foo***
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em><strong>foo</strong></em></p>
"###.trim(), "HTML render mismatch for example 469");
    }
    #[test]
    fn golden_html_example_470() {
        let block_nodes = parse_blocks(r#"_____foo_____
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em><strong><strong>foo</strong></strong></em></p>
"###.trim(), "HTML render mismatch for example 470");
    }
    #[test]
    fn golden_html_example_471() {
        let block_nodes = parse_blocks(r#"*foo _bar* baz_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo _bar</em> baz_</p>
"###.trim(), "HTML render mismatch for example 471");
    }
    #[test]
    fn golden_html_example_472() {
        let block_nodes = parse_blocks(r#"*foo __bar *baz bim__ bam*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo <strong>bar *baz bim</strong> bam</em></p>
"###.trim(), "HTML render mismatch for example 472");
    }
    #[test]
    fn golden_html_example_473() {
        let block_nodes = parse_blocks(r#"**foo **bar baz**
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>**foo <strong>bar baz</strong></p>
"###.trim(), "HTML render mismatch for example 473");
    }
    #[test]
    fn golden_html_example_474() {
        let block_nodes = parse_blocks(r#"*foo *bar baz*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*foo <em>bar baz</em></p>
"###.trim(), "HTML render mismatch for example 474");
    }
    #[test]
    fn golden_html_example_475() {
        let block_nodes = parse_blocks(r#"*[bar*](/url)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<a href="/url">bar*</a></p>
"###.trim(), "HTML render mismatch for example 475");
    }
    #[test]
    fn golden_html_example_476() {
        let block_nodes = parse_blocks(r#"_foo [bar_](/url)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>_foo <a href="/url">bar_</a></p>
"###.trim(), "HTML render mismatch for example 476");
    }
    #[test]
    fn golden_html_example_477() {
        let block_nodes = parse_blocks(r#"*<img src=\"foo\" title=\"*\"/>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<img src="foo" title="*"/></p>
"###.trim(), "HTML render mismatch for example 477");
    }
    #[test]
    fn golden_html_example_478() {
        let block_nodes = parse_blocks(r#"**<a href=\"**\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>**<a href="**"></p>
"###.trim(), "HTML render mismatch for example 478");
    }
    #[test]
    fn golden_html_example_479() {
        let block_nodes = parse_blocks(r#"__<a href=\"__\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__<a href="__"></p>
"###.trim(), "HTML render mismatch for example 479");
    }
    #[test]
    fn golden_html_example_480() {
        let block_nodes = parse_blocks(r#"*a `*`*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>a <code>*</code></em></p>
"###.trim(), "HTML render mismatch for example 480");
    }
    #[test]
    fn golden_html_example_481() {
        let block_nodes = parse_blocks(r#"_a `_`_
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>a <code>_</code></em></p>
"###.trim(), "HTML render mismatch for example 481");
    }
    #[test]
    fn golden_html_example_482() {
        let block_nodes = parse_blocks(r#"**a<https://foo.bar/?q=**>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>**a<a href="https://foo.bar/?q=**">https://foo.bar/?q=**</a></p>
"###.trim(), "HTML render mismatch for example 482");
    }
    #[test]
    fn golden_html_example_483() {
        let block_nodes = parse_blocks(r#"__a<https://foo.bar/?q=__>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>__a<a href="https://foo.bar/?q=__">https://foo.bar/?q=__</a></p>
"###.trim(), "HTML render mismatch for example 483");
    }
    #[test]
    fn golden_html_example_484() {
        let block_nodes = parse_blocks(r#"[link](/uri \"title\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri" title="title">link</a></p>
"###.trim(), "HTML render mismatch for example 484");
    }
    #[test]
    fn golden_html_example_485() {
        let block_nodes = parse_blocks(r#"[link](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link</a></p>
"###.trim(), "HTML render mismatch for example 485");
    }
    #[test]
    fn golden_html_example_486() {
        let block_nodes = parse_blocks(r#"[](./target.md)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="./target.md"></a></p>
"###.trim(), "HTML render mismatch for example 486");
    }
    #[test]
    fn golden_html_example_487() {
        let block_nodes = parse_blocks(r#"[link]()
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="">link</a></p>
"###.trim(), "HTML render mismatch for example 487");
    }
    #[test]
    fn golden_html_example_488() {
        let block_nodes = parse_blocks(r#"[link](<>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="">link</a></p>
"###.trim(), "HTML render mismatch for example 488");
    }
    #[test]
    fn golden_html_example_489() {
        let block_nodes = parse_blocks(r#"[]()
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href=""></a></p>
"###.trim(), "HTML render mismatch for example 489");
    }
    #[test]
    fn golden_html_example_490() {
        let block_nodes = parse_blocks(r#"[link](/my uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link](/my uri)</p>
"###.trim(), "HTML render mismatch for example 490");
    }
    #[test]
    fn golden_html_example_491() {
        let block_nodes = parse_blocks(r#"[link](</my uri>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/my%20uri">link</a></p>
"###.trim(), "HTML render mismatch for example 491");
    }
    #[test]
    fn golden_html_example_492() {
        let block_nodes = parse_blocks(r#"[link](foo
bar)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link](foo
bar)</p>
"###.trim(), "HTML render mismatch for example 492");
    }
    #[test]
    fn golden_html_example_493() {
        let block_nodes = parse_blocks(r#"[link](<foo
bar>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link](<foo
bar>)</p>
"###.trim(), "HTML render mismatch for example 493");
    }
    #[test]
    fn golden_html_example_494() {
        let block_nodes = parse_blocks(r#"[a](<b)c>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="b)c">a</a></p>
"###.trim(), "HTML render mismatch for example 494");
    }
    #[test]
    fn golden_html_example_495() {
        let block_nodes = parse_blocks(r#"[link](<foo\>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link](&lt;foo&gt;)</p>
"###.trim(), "HTML render mismatch for example 495");
    }
    #[test]
    fn golden_html_example_496() {
        let block_nodes = parse_blocks(r#"[a](<b)c
[a](<b)c>
[a](<b>c)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[a](&lt;b)c
[a](&lt;b)c&gt;
[a](<b>c)</p>
"###.trim(), "HTML render mismatch for example 496");
    }
    #[test]
    fn golden_html_example_497() {
        let block_nodes = parse_blocks(r#"[link](\(foo\))
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="(foo)">link</a></p>
"###.trim(), "HTML render mismatch for example 497");
    }
    #[test]
    fn golden_html_example_498() {
        let block_nodes = parse_blocks(r#"[link](foo(and(bar)))
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo(and(bar))">link</a></p>
"###.trim(), "HTML render mismatch for example 498");
    }
    #[test]
    fn golden_html_example_499() {
        let block_nodes = parse_blocks(r#"[link](foo(and(bar))
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link](foo(and(bar))</p>
"###.trim(), "HTML render mismatch for example 499");
    }
    #[test]
    fn golden_html_example_500() {
        let block_nodes = parse_blocks(r#"[link](foo\(and\(bar\))
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo(and(bar)">link</a></p>
"###.trim(), "HTML render mismatch for example 500");
    }
    #[test]
    fn golden_html_example_501() {
        let block_nodes = parse_blocks(r#"[link](<foo(and(bar)>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo(and(bar)">link</a></p>
"###.trim(), "HTML render mismatch for example 501");
    }
    #[test]
    fn golden_html_example_502() {
        let block_nodes = parse_blocks(r#"[link](foo\)\:)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo):">link</a></p>
"###.trim(), "HTML render mismatch for example 502");
    }
    #[test]
    fn golden_html_example_503() {
        let block_nodes = parse_blocks(r#"[link](#fragment)

[link](https://example.com#fragment)

[link](https://example.com?foo=3#frag)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="#fragment">link</a></p>
<p><a href="https://example.com#fragment">link</a></p>
<p><a href="https://example.com?foo=3#frag">link</a></p>
"###.trim(), "HTML render mismatch for example 503");
    }
    #[test]
    fn golden_html_example_504() {
        let block_nodes = parse_blocks(r#"[link](foo\bar)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo%5Cbar">link</a></p>
"###.trim(), "HTML render mismatch for example 504");
    }
    #[test]
    fn golden_html_example_505() {
        let block_nodes = parse_blocks(r#"[link](foo%20b&auml;)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo%20b%C3%A4">link</a></p>
"###.trim(), "HTML render mismatch for example 505");
    }
    #[test]
    fn golden_html_example_506() {
        let block_nodes = parse_blocks(r#"[link](\"title\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="%22title%22">link</a></p>
"###.trim(), "HTML render mismatch for example 506");
    }
    #[test]
    fn golden_html_example_507() {
        let block_nodes = parse_blocks(r#"[link](/url \"title\")
[link](/url 'title')
[link](/url (title))
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">link</a>
<a href="/url" title="title">link</a>
<a href="/url" title="title">link</a></p>
"###.trim(), "HTML render mismatch for example 507");
    }
    #[test]
    fn golden_html_example_508() {
        let block_nodes = parse_blocks(r#"[link](/url \"title \\"&quot;\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title &quot;&quot;">link</a></p>
"###.trim(), "HTML render mismatch for example 508");
    }
    #[test]
    fn golden_html_example_509() {
        let block_nodes = parse_blocks(r#"[link](/url \"title\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url%C2%A0%22title%22">link</a></p>
"###.trim(), "HTML render mismatch for example 509");
    }
    #[test]
    fn golden_html_example_510() {
        let block_nodes = parse_blocks(r#"[link](/url \"title \"and\" title\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>
"###.trim(), "HTML render mismatch for example 510");
    }
    #[test]
    fn golden_html_example_511() {
        let block_nodes = parse_blocks(r#"[link](/url 'title \"and\" title')
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title &quot;and&quot; title">link</a></p>
"###.trim(), "HTML render mismatch for example 511");
    }
    #[test]
    fn golden_html_example_512() {
        let block_nodes = parse_blocks(r#"[link](   /uri
  \"title\"  )
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri" title="title">link</a></p>
"###.trim(), "HTML render mismatch for example 512");
    }
    #[test]
    fn golden_html_example_513() {
        let block_nodes = parse_blocks(r#"[link] (/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link] (/uri)</p>
"###.trim(), "HTML render mismatch for example 513");
    }
    #[test]
    fn golden_html_example_514() {
        let block_nodes = parse_blocks(r#"[link [foo [bar]]](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link [foo [bar]]</a></p>
"###.trim(), "HTML render mismatch for example 514");
    }
    #[test]
    fn golden_html_example_515() {
        let block_nodes = parse_blocks(r#"[link] bar](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link] bar](/uri)</p>
"###.trim(), "HTML render mismatch for example 515");
    }
    #[test]
    fn golden_html_example_516() {
        let block_nodes = parse_blocks(r#"[link [bar](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[link <a href="/uri">bar</a></p>
"###.trim(), "HTML render mismatch for example 516");
    }
    #[test]
    fn golden_html_example_517() {
        let block_nodes = parse_blocks(r#"[link \[bar](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link [bar</a></p>
"###.trim(), "HTML render mismatch for example 517");
    }
    #[test]
    fn golden_html_example_518() {
        let block_nodes = parse_blocks(r#"[link *foo **bar** `#`*](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
"###.trim(), "HTML render mismatch for example 518");
    }
    #[test]
    fn golden_html_example_519() {
        let block_nodes = parse_blocks(r#"[![moon](moon.jpg)](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri"><img src="moon.jpg" alt="moon" /></a></p>
"###.trim(), "HTML render mismatch for example 519");
    }
    #[test]
    fn golden_html_example_520() {
        let block_nodes = parse_blocks(r#"[foo [bar](/uri)](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo <a href="/uri">bar</a>](/uri)</p>
"###.trim(), "HTML render mismatch for example 520");
    }
    #[test]
    fn golden_html_example_521() {
        let block_nodes = parse_blocks(r#"[foo *[bar [baz](/uri)](/uri)*](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo <em>[bar <a href="/uri">baz</a>](/uri)</em>](/uri)</p>
"###.trim(), "HTML render mismatch for example 521");
    }
    #[test]
    fn golden_html_example_522() {
        let block_nodes = parse_blocks(r#"![[[foo](uri1)](uri2)](uri3)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="uri3" alt="[foo](uri2)" /></p>
"###.trim(), "HTML render mismatch for example 522");
    }
    #[test]
    fn golden_html_example_523() {
        let block_nodes = parse_blocks(r#"*[foo*](/uri)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<a href="/uri">foo*</a></p>
"###.trim(), "HTML render mismatch for example 523");
    }
    #[test]
    fn golden_html_example_524() {
        let block_nodes = parse_blocks(r#"[foo *bar](baz*)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="baz*">foo *bar</a></p>
"###.trim(), "HTML render mismatch for example 524");
    }
    #[test]
    fn golden_html_example_525() {
        let block_nodes = parse_blocks(r#"*foo [bar* baz]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo [bar</em> baz]</p>
"###.trim(), "HTML render mismatch for example 525");
    }
    #[test]
    fn golden_html_example_526() {
        let block_nodes = parse_blocks(r#"[foo <bar attr=\"](baz)\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo <bar attr="](baz)"></p>
"###.trim(), "HTML render mismatch for example 526");
    }
    #[test]
    fn golden_html_example_527() {
        let block_nodes = parse_blocks(r#"[foo`](/uri)`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo<code>](/uri)</code></p>
"###.trim(), "HTML render mismatch for example 527");
    }
    #[test]
    fn golden_html_example_528() {
        let block_nodes = parse_blocks(r#"[foo<https://example.com/?search=](uri)>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo<a href="https://example.com/?search=%5D(uri)">https://example.com/?search=](uri)</a></p>
"###.trim(), "HTML render mismatch for example 528");
    }
    #[test]
    fn golden_html_example_529() {
        let block_nodes = parse_blocks(r#"[foo][bar]

[bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">foo</a></p>
"###.trim(), "HTML render mismatch for example 529");
    }
    #[test]
    fn golden_html_example_530() {
        let block_nodes = parse_blocks(r#"[link [foo [bar]]][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link [foo [bar]]</a></p>
"###.trim(), "HTML render mismatch for example 530");
    }
    #[test]
    fn golden_html_example_531() {
        let block_nodes = parse_blocks(r#"[link \[bar][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link [bar</a></p>
"###.trim(), "HTML render mismatch for example 531");
    }
    #[test]
    fn golden_html_example_532() {
        let block_nodes = parse_blocks(r#"[link *foo **bar** `#`*][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>
"###.trim(), "HTML render mismatch for example 532");
    }
    #[test]
    fn golden_html_example_533() {
        let block_nodes = parse_blocks(r#"[![moon](moon.jpg)][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri"><img src="moon.jpg" alt="moon" /></a></p>
"###.trim(), "HTML render mismatch for example 533");
    }
    #[test]
    fn golden_html_example_534() {
        let block_nodes = parse_blocks(r#"[foo [bar](/uri)][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo <a href="/uri">bar</a>]<a href="/uri">ref</a></p>
"###.trim(), "HTML render mismatch for example 534");
    }
    #[test]
    fn golden_html_example_535() {
        let block_nodes = parse_blocks(r#"[foo *bar [baz][ref]*][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo <em>bar <a href="/uri">baz</a></em>]<a href="/uri">ref</a></p>
"###.trim(), "HTML render mismatch for example 535");
    }
    #[test]
    fn golden_html_example_536() {
        let block_nodes = parse_blocks(r#"*[foo*][ref]

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<a href="/uri">foo*</a></p>
"###.trim(), "HTML render mismatch for example 536");
    }
    #[test]
    fn golden_html_example_537() {
        let block_nodes = parse_blocks(r#"[foo *bar][ref]*

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">foo *bar</a>*</p>
"###.trim(), "HTML render mismatch for example 537");
    }
    #[test]
    fn golden_html_example_538() {
        let block_nodes = parse_blocks(r#"[foo <bar attr=\"][ref]\">

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo <bar attr="][ref]"></p>
"###.trim(), "HTML render mismatch for example 538");
    }
    #[test]
    fn golden_html_example_539() {
        let block_nodes = parse_blocks(r#"[foo`][ref]`

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo<code>][ref]</code></p>
"###.trim(), "HTML render mismatch for example 539");
    }
    #[test]
    fn golden_html_example_540() {
        let block_nodes = parse_blocks(r#"[foo<https://example.com/?search=][ref]>

[ref]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo<a href="https://example.com/?search=%5D%5Bref%5D">https://example.com/?search=][ref]</a></p>
"###.trim(), "HTML render mismatch for example 540");
    }
    #[test]
    fn golden_html_example_541() {
        let block_nodes = parse_blocks(r#"[foo][BaR]

[bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">foo</a></p>
"###.trim(), "HTML render mismatch for example 541");
    }
    #[test]
    fn golden_html_example_542() {
        let block_nodes = parse_blocks(r#"[ẞ]

[SS]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url">ẞ</a></p>
"###.trim(), "HTML render mismatch for example 542");
    }
    #[test]
    fn golden_html_example_543() {
        let block_nodes = parse_blocks(r#"[Foo
  bar]: /url

[Baz][Foo bar]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url">Baz</a></p>
"###.trim(), "HTML render mismatch for example 543");
    }
    #[test]
    fn golden_html_example_544() {
        let block_nodes = parse_blocks(r#"[foo] [bar]

[bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo] <a href="/url" title="title">bar</a></p>
"###.trim(), "HTML render mismatch for example 544");
    }
    #[test]
    fn golden_html_example_545() {
        let block_nodes = parse_blocks(r#"[foo]
[bar]

[bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]
<a href="/url" title="title">bar</a></p>
"###.trim(), "HTML render mismatch for example 545");
    }
    #[test]
    fn golden_html_example_546() {
        let block_nodes = parse_blocks(r#"[foo]: /url1

[foo]: /url2

[bar][foo]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url1">bar</a></p>
"###.trim(), "HTML render mismatch for example 546");
    }
    #[test]
    fn golden_html_example_547() {
        let block_nodes = parse_blocks(r#"[bar][foo\!]

[foo!]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[bar][foo!]</p>
"###.trim(), "HTML render mismatch for example 547");
    }
    #[test]
    fn golden_html_example_548() {
        let block_nodes = parse_blocks(r#"[foo][ref[]

[ref[]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo][ref[]</p>
<p>[ref[]: /uri</p>
"###.trim(), "HTML render mismatch for example 548");
    }
    #[test]
    fn golden_html_example_549() {
        let block_nodes = parse_blocks(r#"[foo][ref[bar]]

[ref[bar]]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo][ref[bar]]</p>
<p>[ref[bar]]: /uri</p>
"###.trim(), "HTML render mismatch for example 549");
    }
    #[test]
    fn golden_html_example_550() {
        let block_nodes = parse_blocks(r#"[[[foo]]]

[[[foo]]]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[[[foo]]]</p>
<p>[[[foo]]]: /url</p>
"###.trim(), "HTML render mismatch for example 550");
    }
    #[test]
    fn golden_html_example_551() {
        let block_nodes = parse_blocks(r#"[foo][ref\[]

[ref\[]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">foo</a></p>
"###.trim(), "HTML render mismatch for example 551");
    }
    #[test]
    fn golden_html_example_552() {
        let block_nodes = parse_blocks(r#"[bar\\]: /uri

[bar\\]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/uri">bar\</a></p>
"###.trim(), "HTML render mismatch for example 552");
    }
    #[test]
    fn golden_html_example_553() {
        let block_nodes = parse_blocks(r#"[]

[]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[]</p>
<p>[]: /uri</p>
"###.trim(), "HTML render mismatch for example 553");
    }
    #[test]
    fn golden_html_example_554() {
        let block_nodes = parse_blocks(r#"[
 ]

[
 ]: /uri
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[
]</p>
<p>[
]: /uri</p>
"###.trim(), "HTML render mismatch for example 554");
    }
    #[test]
    fn golden_html_example_555() {
        let block_nodes = parse_blocks(r#"[foo][]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">foo</a></p>
"###.trim(), "HTML render mismatch for example 555");
    }
    #[test]
    fn golden_html_example_556() {
        let block_nodes = parse_blocks(r#"[*foo* bar][]

[*foo* bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title"><em>foo</em> bar</a></p>
"###.trim(), "HTML render mismatch for example 556");
    }
    #[test]
    fn golden_html_example_557() {
        let block_nodes = parse_blocks(r#"[Foo][]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">Foo</a></p>
"###.trim(), "HTML render mismatch for example 557");
    }
    #[test]
    fn golden_html_example_558() {
        let block_nodes = parse_blocks(r#"[foo] 
[]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">foo</a>
[]</p>
"###.trim(), "HTML render mismatch for example 558");
    }
    #[test]
    fn golden_html_example_559() {
        let block_nodes = parse_blocks(r#"[foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">foo</a></p>
"###.trim(), "HTML render mismatch for example 559");
    }
    #[test]
    fn golden_html_example_560() {
        let block_nodes = parse_blocks(r#"[*foo* bar]

[*foo* bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title"><em>foo</em> bar</a></p>
"###.trim(), "HTML render mismatch for example 560");
    }
    #[test]
    fn golden_html_example_561() {
        let block_nodes = parse_blocks(r#"[[*foo* bar]]

[*foo* bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[<a href="/url" title="title"><em>foo</em> bar</a>]</p>
"###.trim(), "HTML render mismatch for example 561");
    }
    #[test]
    fn golden_html_example_562() {
        let block_nodes = parse_blocks(r#"[[bar [foo]

[foo]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[[bar <a href="/url">foo</a></p>
"###.trim(), "HTML render mismatch for example 562");
    }
    #[test]
    fn golden_html_example_563() {
        let block_nodes = parse_blocks(r#"[Foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url" title="title">Foo</a></p>
"###.trim(), "HTML render mismatch for example 563");
    }
    #[test]
    fn golden_html_example_564() {
        let block_nodes = parse_blocks(r#"[foo] bar

[foo]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url">foo</a> bar</p>
"###.trim(), "HTML render mismatch for example 564");
    }
    #[test]
    fn golden_html_example_565() {
        let block_nodes = parse_blocks(r#"\[foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]</p>
"###.trim(), "HTML render mismatch for example 565");
    }
    #[test]
    fn golden_html_example_566() {
        let block_nodes = parse_blocks(r#"[foo*]: /url

*[foo*]
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>*<a href="/url">foo*</a></p>
"###.trim(), "HTML render mismatch for example 566");
    }
    #[test]
    fn golden_html_example_567() {
        let block_nodes = parse_blocks(r#"[foo][bar]

[foo]: /url1
[bar]: /url2
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url2">foo</a></p>
"###.trim(), "HTML render mismatch for example 567");
    }
    #[test]
    fn golden_html_example_568() {
        let block_nodes = parse_blocks(r#"[foo][]

[foo]: /url1
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url1">foo</a></p>
"###.trim(), "HTML render mismatch for example 568");
    }
    #[test]
    fn golden_html_example_569() {
        let block_nodes = parse_blocks(r#"[foo]()

[foo]: /url1
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="">foo</a></p>
"###.trim(), "HTML render mismatch for example 569");
    }
    #[test]
    fn golden_html_example_570() {
        let block_nodes = parse_blocks(r#"[foo](not a link)

[foo]: /url1
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url1">foo</a>(not a link)</p>
"###.trim(), "HTML render mismatch for example 570");
    }
    #[test]
    fn golden_html_example_571() {
        let block_nodes = parse_blocks(r#"[foo][bar][baz]

[baz]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]<a href="/url">bar</a></p>
"###.trim(), "HTML render mismatch for example 571");
    }
    #[test]
    fn golden_html_example_572() {
        let block_nodes = parse_blocks(r#"[foo][bar][baz]

[baz]: /url1
[bar]: /url2
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="/url2">foo</a><a href="/url1">baz</a></p>
"###.trim(), "HTML render mismatch for example 572");
    }
    #[test]
    fn golden_html_example_573() {
        let block_nodes = parse_blocks(r#"[foo][bar][baz]

[baz]: /url1
[foo]: /url2
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>[foo]<a href="/url1">bar</a></p>
"###.trim(), "HTML render mismatch for example 573");
    }
    #[test]
    fn golden_html_example_574() {
        let block_nodes = parse_blocks(r#"![foo](/url \"title\")
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo" title="title" /></p>
"###.trim(), "HTML render mismatch for example 574");
    }
    #[test]
    fn golden_html_example_575() {
        let block_nodes = parse_blocks(r#"![foo *bar*]

[foo *bar*]: train.jpg \"train & tracks\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="train.jpg" alt="foo bar" title="train &amp; tracks" /></p>
"###.trim(), "HTML render mismatch for example 575");
    }
    #[test]
    fn golden_html_example_576() {
        let block_nodes = parse_blocks(r#"![foo ![bar](/url)](/url2)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url2" alt="foo bar" /></p>
"###.trim(), "HTML render mismatch for example 576");
    }
    #[test]
    fn golden_html_example_577() {
        let block_nodes = parse_blocks(r#"![foo [bar](/url)](/url2)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url2" alt="foo bar" /></p>
"###.trim(), "HTML render mismatch for example 577");
    }
    #[test]
    fn golden_html_example_578() {
        let block_nodes = parse_blocks(r#"![foo *bar*][]

[foo *bar*]: train.jpg \"train & tracks\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="train.jpg" alt="foo bar" title="train &amp; tracks" /></p>
"###.trim(), "HTML render mismatch for example 578");
    }
    #[test]
    fn golden_html_example_579() {
        let block_nodes = parse_blocks(r#"![foo *bar*][foobar]

[FOOBAR]: train.jpg \"train & tracks\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="train.jpg" alt="foo bar" title="train &amp; tracks" /></p>
"###.trim(), "HTML render mismatch for example 579");
    }
    #[test]
    fn golden_html_example_580() {
        let block_nodes = parse_blocks(r#"![foo](train.jpg)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="train.jpg" alt="foo" /></p>
"###.trim(), "HTML render mismatch for example 580");
    }
    #[test]
    fn golden_html_example_581() {
        let block_nodes = parse_blocks(r#"My ![foo bar](/path/to/train.jpg  \"title\"   )
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>My <img src="/path/to/train.jpg" alt="foo bar" title="title" /></p>
"###.trim(), "HTML render mismatch for example 581");
    }
    #[test]
    fn golden_html_example_582() {
        let block_nodes = parse_blocks(r#"![foo](<url>)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="url" alt="foo" /></p>
"###.trim(), "HTML render mismatch for example 582");
    }
    #[test]
    fn golden_html_example_583() {
        let block_nodes = parse_blocks(r#"![](/url)
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="" /></p>
"###.trim(), "HTML render mismatch for example 583");
    }
    #[test]
    fn golden_html_example_584() {
        let block_nodes = parse_blocks(r#"![foo][bar]

[bar]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo" /></p>
"###.trim(), "HTML render mismatch for example 584");
    }
    #[test]
    fn golden_html_example_585() {
        let block_nodes = parse_blocks(r#"![foo][bar]

[BAR]: /url
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo" /></p>
"###.trim(), "HTML render mismatch for example 585");
    }
    #[test]
    fn golden_html_example_586() {
        let block_nodes = parse_blocks(r#"![foo][]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo" title="title" /></p>
"###.trim(), "HTML render mismatch for example 586");
    }
    #[test]
    fn golden_html_example_587() {
        let block_nodes = parse_blocks(r#"![*foo* bar][]

[*foo* bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo bar" title="title" /></p>
"###.trim(), "HTML render mismatch for example 587");
    }
    #[test]
    fn golden_html_example_588() {
        let block_nodes = parse_blocks(r#"![Foo][]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="Foo" title="title" /></p>
"###.trim(), "HTML render mismatch for example 588");
    }
    #[test]
    fn golden_html_example_589() {
        let block_nodes = parse_blocks(r#"![foo] 
[]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo" title="title" />
[]</p>
"###.trim(), "HTML render mismatch for example 589");
    }
    #[test]
    fn golden_html_example_590() {
        let block_nodes = parse_blocks(r#"![foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo" title="title" /></p>
"###.trim(), "HTML render mismatch for example 590");
    }
    #[test]
    fn golden_html_example_591() {
        let block_nodes = parse_blocks(r#"![*foo* bar]

[*foo* bar]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="foo bar" title="title" /></p>
"###.trim(), "HTML render mismatch for example 591");
    }
    #[test]
    fn golden_html_example_592() {
        let block_nodes = parse_blocks(r#"![[foo]]

[[foo]]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>![[foo]]</p>
<p>[[foo]]: /url &quot;title&quot;</p>
"###.trim(), "HTML render mismatch for example 592");
    }
    #[test]
    fn golden_html_example_593() {
        let block_nodes = parse_blocks(r#"![Foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><img src="/url" alt="Foo" title="title" /></p>
"###.trim(), "HTML render mismatch for example 593");
    }
    #[test]
    fn golden_html_example_594() {
        let block_nodes = parse_blocks(r#"!\[foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>![foo]</p>
"###.trim(), "HTML render mismatch for example 594");
    }
    #[test]
    fn golden_html_example_595() {
        let block_nodes = parse_blocks(r#"\![foo]

[foo]: /url \"title\"
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>!<a href="/url" title="title">foo</a></p>
"###.trim(), "HTML render mismatch for example 595");
    }
    #[test]
    fn golden_html_example_596() {
        let block_nodes = parse_blocks(r#"<http://foo.bar.baz>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="http://foo.bar.baz">http://foo.bar.baz</a></p>
"###.trim(), "HTML render mismatch for example 596");
    }
    #[test]
    fn golden_html_example_597() {
        let block_nodes = parse_blocks(r#"<https://foo.bar.baz/test?q=hello&id=22&boolean>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean">https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>
"###.trim(), "HTML render mismatch for example 597");
    }
    #[test]
    fn golden_html_example_598() {
        let block_nodes = parse_blocks(r#"<irc://foo.bar:2233/baz>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="irc://foo.bar:2233/baz">irc://foo.bar:2233/baz</a></p>
"###.trim(), "HTML render mismatch for example 598");
    }
    #[test]
    fn golden_html_example_599() {
        let block_nodes = parse_blocks(r#"<MAILTO:FOO@BAR.BAZ>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="MAILTO:FOO@BAR.BAZ">MAILTO:FOO@BAR.BAZ</a></p>
"###.trim(), "HTML render mismatch for example 599");
    }
    #[test]
    fn golden_html_example_600() {
        let block_nodes = parse_blocks(r#"<a+b+c:d>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="a+b+c:d">a+b+c:d</a></p>
"###.trim(), "HTML render mismatch for example 600");
    }
    #[test]
    fn golden_html_example_601() {
        let block_nodes = parse_blocks(r#"<made-up-scheme://foo,bar>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="made-up-scheme://foo,bar">made-up-scheme://foo,bar</a></p>
"###.trim(), "HTML render mismatch for example 601");
    }
    #[test]
    fn golden_html_example_602() {
        let block_nodes = parse_blocks(r#"<https://../>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="https://../">https://../</a></p>
"###.trim(), "HTML render mismatch for example 602");
    }
    #[test]
    fn golden_html_example_603() {
        let block_nodes = parse_blocks(r#"<localhost:5001/foo>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="localhost:5001/foo">localhost:5001/foo</a></p>
"###.trim(), "HTML render mismatch for example 603");
    }
    #[test]
    fn golden_html_example_604() {
        let block_nodes = parse_blocks(r#"<https://foo.bar/baz bim>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;https://foo.bar/baz bim&gt;</p>
"###.trim(), "HTML render mismatch for example 604");
    }
    #[test]
    fn golden_html_example_605() {
        let block_nodes = parse_blocks(r#"<https://example.com/\[\>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="https://example.com/%5C%5B%5C">https://example.com/\[\</a></p>
"###.trim(), "HTML render mismatch for example 605");
    }
    #[test]
    fn golden_html_example_606() {
        let block_nodes = parse_blocks(r#"<foo@bar.example.com>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="mailto:foo@bar.example.com">foo@bar.example.com</a></p>
"###.trim(), "HTML render mismatch for example 606");
    }
    #[test]
    fn golden_html_example_607() {
        let block_nodes = parse_blocks(r#"<foo+special@Bar.baz-bar0.com>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="mailto:foo+special@Bar.baz-bar0.com">foo+special@Bar.baz-bar0.com</a></p>
"###.trim(), "HTML render mismatch for example 607");
    }
    #[test]
    fn golden_html_example_608() {
        let block_nodes = parse_blocks(r#"<foo\+@bar.example.com>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;foo+@bar.example.com&gt;</p>
"###.trim(), "HTML render mismatch for example 608");
    }
    #[test]
    fn golden_html_example_609() {
        let block_nodes = parse_blocks(r#"<>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;&gt;</p>
"###.trim(), "HTML render mismatch for example 609");
    }
    #[test]
    fn golden_html_example_610() {
        let block_nodes = parse_blocks(r#"< https://foo.bar >
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt; https://foo.bar &gt;</p>
"###.trim(), "HTML render mismatch for example 610");
    }
    #[test]
    fn golden_html_example_611() {
        let block_nodes = parse_blocks(r#"<m:abc>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;m:abc&gt;</p>
"###.trim(), "HTML render mismatch for example 611");
    }
    #[test]
    fn golden_html_example_612() {
        let block_nodes = parse_blocks(r#"<foo.bar.baz>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;foo.bar.baz&gt;</p>
"###.trim(), "HTML render mismatch for example 612");
    }
    #[test]
    fn golden_html_example_613() {
        let block_nodes = parse_blocks(r#"https://example.com
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>https://example.com</p>
"###.trim(), "HTML render mismatch for example 613");
    }
    #[test]
    fn golden_html_example_614() {
        let block_nodes = parse_blocks(r#"foo@bar.example.com
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo@bar.example.com</p>
"###.trim(), "HTML render mismatch for example 614");
    }
    #[test]
    fn golden_html_example_615() {
        let block_nodes = parse_blocks(r#"<a><bab><c2c>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a><bab><c2c></p>
"###.trim(), "HTML render mismatch for example 615");
    }
    #[test]
    fn golden_html_example_616() {
        let block_nodes = parse_blocks(r#"<a/><b2/>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a/><b2/></p>
"###.trim(), "HTML render mismatch for example 616");
    }
    #[test]
    fn golden_html_example_617() {
        let block_nodes = parse_blocks(r#"<a  /><b2
data=\"foo\" >
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a  /><b2
data="foo" ></p>
"###.trim(), "HTML render mismatch for example 617");
    }
    #[test]
    fn golden_html_example_618() {
        let block_nodes = parse_blocks(r#"<a foo=\"bar\" bam = 'baz <em>\"</em>'
_boolean zoop:33=zoop:33 />
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a foo="bar" bam = 'baz <em>"</em>'
_boolean zoop:33=zoop:33 /></p>
"###.trim(), "HTML render mismatch for example 618");
    }
    #[test]
    fn golden_html_example_619() {
        let block_nodes = parse_blocks(r#"Foo <responsive-image src=\"foo.jpg\" />
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo <responsive-image src="foo.jpg" /></p>
"###.trim(), "HTML render mismatch for example 619");
    }
    #[test]
    fn golden_html_example_620() {
        let block_nodes = parse_blocks(r#"<33> <__>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;33&gt; &lt;__&gt;</p>
"###.trim(), "HTML render mismatch for example 620");
    }
    #[test]
    fn golden_html_example_621() {
        let block_nodes = parse_blocks(r#"<a h*#ref=\"hi\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>
"###.trim(), "HTML render mismatch for example 621");
    }
    #[test]
    fn golden_html_example_622() {
        let block_nodes = parse_blocks(r#"<a href=\"hi'> <a href=hi'>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>
"###.trim(), "HTML render mismatch for example 622");
    }
    #[test]
    fn golden_html_example_623() {
        let block_nodes = parse_blocks(r#"< a><
foo><bar/ >
<foo bar=baz
bim!bop />
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt; a&gt;&lt;
foo&gt;&lt;bar/ &gt;
&lt;foo bar=baz
bim!bop /&gt;</p>
"###.trim(), "HTML render mismatch for example 623");
    }
    #[test]
    fn golden_html_example_624() {
        let block_nodes = parse_blocks(r#"<a href='bar'title=title>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;a href='bar'title=title&gt;</p>
"###.trim(), "HTML render mismatch for example 624");
    }
    #[test]
    fn golden_html_example_625() {
        let block_nodes = parse_blocks(r#"</a></foo >
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p></a></foo ></p>
"###.trim(), "HTML render mismatch for example 625");
    }
    #[test]
    fn golden_html_example_626() {
        let block_nodes = parse_blocks(r#"</a href=\"foo\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;/a href=&quot;foo&quot;&gt;</p>
"###.trim(), "HTML render mismatch for example 626");
    }
    #[test]
    fn golden_html_example_627() {
        let block_nodes = parse_blocks(r#"foo <!-- this is a --
comment - with hyphens -->
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <!-- this is a --
comment - with hyphens --></p>
"###.trim(), "HTML render mismatch for example 627");
    }
    #[test]
    fn golden_html_example_628() {
        let block_nodes = parse_blocks(r#"foo <!--> foo -->

foo <!---> foo -->
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <!--> foo --&gt;</p>
<p>foo <!---> foo --&gt;</p>
"###.trim(), "HTML render mismatch for example 628");
    }
    #[test]
    fn golden_html_example_629() {
        let block_nodes = parse_blocks(r#"foo <?php echo $a; ?>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <?php echo $a; ?></p>
"###.trim(), "HTML render mismatch for example 629");
    }
    #[test]
    fn golden_html_example_630() {
        let block_nodes = parse_blocks(r#"foo <!ELEMENT br EMPTY>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <!ELEMENT br EMPTY></p>
"###.trim(), "HTML render mismatch for example 630");
    }
    #[test]
    fn golden_html_example_631() {
        let block_nodes = parse_blocks(r#"foo <![CDATA[>&<]]>
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <![CDATA[>&<]]></p>
"###.trim(), "HTML render mismatch for example 631");
    }
    #[test]
    fn golden_html_example_632() {
        let block_nodes = parse_blocks(r#"foo <a href=\"&ouml;\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <a href="&ouml;"></p>
"###.trim(), "HTML render mismatch for example 632");
    }
    #[test]
    fn golden_html_example_633() {
        let block_nodes = parse_blocks(r#"foo <a href=\"\*\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo <a href="\*"></p>
"###.trim(), "HTML render mismatch for example 633");
    }
    #[test]
    fn golden_html_example_634() {
        let block_nodes = parse_blocks(r#"<a href=\"\\"\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;a href=&quot;&quot;&quot;&gt;</p>
"###.trim(), "HTML render mismatch for example 634");
    }
    #[test]
    fn golden_html_example_635() {
        let block_nodes = parse_blocks(r#"<a
> quoted text
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>&lt;a</p>
<blockquote>
<p>quoted text</p>
</blockquote>
"###.trim(), "HTML render mismatch for example 635");
    }
    #[test]
    fn golden_html_example_636() {
        let block_nodes = parse_blocks(r#"foo  
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<br />
baz</p>
"###.trim(), "HTML render mismatch for example 636");
    }
    #[test]
    fn golden_html_example_637() {
        let block_nodes = parse_blocks(r#"foo\
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<br />
baz</p>
"###.trim(), "HTML render mismatch for example 637");
    }
    #[test]
    fn golden_html_example_638() {
        let block_nodes = parse_blocks(r#"foo       
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<br />
baz</p>
"###.trim(), "HTML render mismatch for example 638");
    }
    #[test]
    fn golden_html_example_639() {
        let block_nodes = parse_blocks(r#"foo  
     bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<br />
bar</p>
"###.trim(), "HTML render mismatch for example 639");
    }
    #[test]
    fn golden_html_example_640() {
        let block_nodes = parse_blocks(r#"foo\
     bar
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo<br />
bar</p>
"###.trim(), "HTML render mismatch for example 640");
    }
    #[test]
    fn golden_html_example_641() {
        let block_nodes = parse_blocks(r#"*foo  
bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo<br />
bar</em></p>
"###.trim(), "HTML render mismatch for example 641");
    }
    #[test]
    fn golden_html_example_642() {
        let block_nodes = parse_blocks(r#"*foo\
bar*
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><em>foo<br />
bar</em></p>
"###.trim(), "HTML render mismatch for example 642");
    }
    #[test]
    fn golden_html_example_643() {
        let block_nodes = parse_blocks(r#"`code  
span`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>code   span</code></p>
"###.trim(), "HTML render mismatch for example 643");
    }
    #[test]
    fn golden_html_example_644() {
        let block_nodes = parse_blocks(r#"`code\
span`
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><code>code\ span</code></p>
"###.trim(), "HTML render mismatch for example 644");
    }
    #[test]
    fn golden_html_example_645() {
        let block_nodes = parse_blocks(r#"<a href=\"foo  
bar\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo  
bar"></p>
"###.trim(), "HTML render mismatch for example 645");
    }
    #[test]
    fn golden_html_example_646() {
        let block_nodes = parse_blocks(r#"<a href=\"foo\
bar\">
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p><a href="foo\
bar"></p>
"###.trim(), "HTML render mismatch for example 646");
    }
    #[test]
    fn golden_html_example_647() {
        let block_nodes = parse_blocks(r#"foo\
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo\</p>
"###.trim(), "HTML render mismatch for example 647");
    }
    #[test]
    fn golden_html_example_648() {
        let block_nodes = parse_blocks(r#"foo  
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo</p>
"###.trim(), "HTML render mismatch for example 648");
    }
    #[test]
    fn golden_html_example_649() {
        let block_nodes = parse_blocks(r#"### foo\
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h3>foo\</h3>
"###.trim(), "HTML render mismatch for example 649");
    }
    #[test]
    fn golden_html_example_650() {
        let block_nodes = parse_blocks(r#"### foo  
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<h3>foo</h3>
"###.trim(), "HTML render mismatch for example 650");
    }
    #[test]
    fn golden_html_example_651() {
        let block_nodes = parse_blocks(r#"foo
baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo
baz</p>
"###.trim(), "HTML render mismatch for example 651");
    }
    #[test]
    fn golden_html_example_652() {
        let block_nodes = parse_blocks(r#"foo 
 baz
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>foo
baz</p>
"###.trim(), "HTML render mismatch for example 652");
    }
    #[test]
    fn golden_html_example_653() {
        let block_nodes = parse_blocks(r#"hello $.;'there
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>hello $.;'there</p>
"###.trim(), "HTML render mismatch for example 653");
    }
    #[test]
    fn golden_html_example_654() {
        let block_nodes = parse_blocks(r#"Foo χρῆν
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Foo χρῆν</p>
"###.trim(), "HTML render mismatch for example 654");
    }
    #[test]
    fn golden_html_example_655() {
        let block_nodes = parse_blocks(r#"Multiple     spaces
"#);
        let blocks: Vec<Block> = block_nodes.into_iter().map(|node| blocknode_to_block(&node)).collect();
        let doc = Block::Container(ContainerBlock::Document(blocks, None));
        let rendered = HtmlRenderer::render_document(&doc);
        assert_eq!(rendered.trim(), r###"<p>Multiple     spaces</p>
"###.trim(), "HTML render mismatch for example 655");
    }
}
